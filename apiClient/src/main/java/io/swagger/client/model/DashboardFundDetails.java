/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DashboardFundDetails
 */


public class DashboardFundDetails implements Parcelable {
  @SerializedName("topFundAssets")
  private List<FundAssetPercent> topFundAssets = null;

  @SerializedName("totalAssetsCount")
  private Integer totalAssetsCount = null;

  @SerializedName("tradingSchedule")
  private TradingScheduleInfo tradingSchedule = null;

  @SerializedName("entryFeeCurrent")
  private Double entryFeeCurrent = null;

  @SerializedName("entryFeeSelected")
  private Double entryFeeSelected = null;

  @SerializedName("exitFeeCurrent")
  private Double exitFeeCurrent = null;

  @SerializedName("exitFeeSelected")
  private Double exitFeeSelected = null;

  public DashboardFundDetails() {
  }
  public DashboardFundDetails topFundAssets(List<FundAssetPercent> topFundAssets) {
    this.topFundAssets = topFundAssets;
    return this;
  }

  public DashboardFundDetails addTopFundAssetsItem(FundAssetPercent topFundAssetsItem) {
    if (this.topFundAssets == null) {
      this.topFundAssets = new ArrayList<FundAssetPercent>();
    }
    this.topFundAssets.add(topFundAssetsItem);
    return this;
  }

   /**
   * Get topFundAssets
   * @return topFundAssets
  **/
  @Schema(description = "")
  public List<FundAssetPercent> getTopFundAssets() {
    return topFundAssets;
  }

  public void setTopFundAssets(List<FundAssetPercent> topFundAssets) {
    this.topFundAssets = topFundAssets;
  }

  public DashboardFundDetails totalAssetsCount(Integer totalAssetsCount) {
    this.totalAssetsCount = totalAssetsCount;
    return this;
  }

   /**
   * Get totalAssetsCount
   * @return totalAssetsCount
  **/
  @Schema(description = "")
  public Integer getTotalAssetsCount() {
    return totalAssetsCount;
  }

  public void setTotalAssetsCount(Integer totalAssetsCount) {
    this.totalAssetsCount = totalAssetsCount;
  }

  public DashboardFundDetails tradingSchedule(TradingScheduleInfo tradingSchedule) {
    this.tradingSchedule = tradingSchedule;
    return this;
  }

   /**
   * Get tradingSchedule
   * @return tradingSchedule
  **/
  @Schema(description = "")
  public TradingScheduleInfo getTradingSchedule() {
    return tradingSchedule;
  }

  public void setTradingSchedule(TradingScheduleInfo tradingSchedule) {
    this.tradingSchedule = tradingSchedule;
  }

  public DashboardFundDetails entryFeeCurrent(Double entryFeeCurrent) {
    this.entryFeeCurrent = entryFeeCurrent;
    return this;
  }

   /**
   * Get entryFeeCurrent
   * @return entryFeeCurrent
  **/
  @Schema(description = "")
  public Double getEntryFeeCurrent() {
    return entryFeeCurrent;
  }

  public void setEntryFeeCurrent(Double entryFeeCurrent) {
    this.entryFeeCurrent = entryFeeCurrent;
  }

  public DashboardFundDetails entryFeeSelected(Double entryFeeSelected) {
    this.entryFeeSelected = entryFeeSelected;
    return this;
  }

   /**
   * Get entryFeeSelected
   * @return entryFeeSelected
  **/
  @Schema(description = "")
  public Double getEntryFeeSelected() {
    return entryFeeSelected;
  }

  public void setEntryFeeSelected(Double entryFeeSelected) {
    this.entryFeeSelected = entryFeeSelected;
  }

  public DashboardFundDetails exitFeeCurrent(Double exitFeeCurrent) {
    this.exitFeeCurrent = exitFeeCurrent;
    return this;
  }

   /**
   * Get exitFeeCurrent
   * @return exitFeeCurrent
  **/
  @Schema(description = "")
  public Double getExitFeeCurrent() {
    return exitFeeCurrent;
  }

  public void setExitFeeCurrent(Double exitFeeCurrent) {
    this.exitFeeCurrent = exitFeeCurrent;
  }

  public DashboardFundDetails exitFeeSelected(Double exitFeeSelected) {
    this.exitFeeSelected = exitFeeSelected;
    return this;
  }

   /**
   * Get exitFeeSelected
   * @return exitFeeSelected
  **/
  @Schema(description = "")
  public Double getExitFeeSelected() {
    return exitFeeSelected;
  }

  public void setExitFeeSelected(Double exitFeeSelected) {
    this.exitFeeSelected = exitFeeSelected;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardFundDetails dashboardFundDetails = (DashboardFundDetails) o;
    return Objects.equals(this.topFundAssets, dashboardFundDetails.topFundAssets) &&
        Objects.equals(this.totalAssetsCount, dashboardFundDetails.totalAssetsCount) &&
        Objects.equals(this.tradingSchedule, dashboardFundDetails.tradingSchedule) &&
        Objects.equals(this.entryFeeCurrent, dashboardFundDetails.entryFeeCurrent) &&
        Objects.equals(this.entryFeeSelected, dashboardFundDetails.entryFeeSelected) &&
        Objects.equals(this.exitFeeCurrent, dashboardFundDetails.exitFeeCurrent) &&
        Objects.equals(this.exitFeeSelected, dashboardFundDetails.exitFeeSelected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topFundAssets, totalAssetsCount, tradingSchedule, entryFeeCurrent, entryFeeSelected, exitFeeCurrent, exitFeeSelected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardFundDetails {\n");
    
    sb.append("    topFundAssets: ").append(toIndentedString(topFundAssets)).append("\n");
    sb.append("    totalAssetsCount: ").append(toIndentedString(totalAssetsCount)).append("\n");
    sb.append("    tradingSchedule: ").append(toIndentedString(tradingSchedule)).append("\n");
    sb.append("    entryFeeCurrent: ").append(toIndentedString(entryFeeCurrent)).append("\n");
    sb.append("    entryFeeSelected: ").append(toIndentedString(entryFeeSelected)).append("\n");
    sb.append("    exitFeeCurrent: ").append(toIndentedString(exitFeeCurrent)).append("\n");
    sb.append("    exitFeeSelected: ").append(toIndentedString(exitFeeSelected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(topFundAssets);
    out.writeValue(totalAssetsCount);
    out.writeValue(tradingSchedule);
    out.writeValue(entryFeeCurrent);
    out.writeValue(entryFeeSelected);
    out.writeValue(exitFeeCurrent);
    out.writeValue(exitFeeSelected);
  }

  DashboardFundDetails(Parcel in) {
    topFundAssets = (List<FundAssetPercent>)in.readValue(FundAssetPercent.class.getClassLoader());
    totalAssetsCount = (Integer)in.readValue(null);
    tradingSchedule = (TradingScheduleInfo)in.readValue(TradingScheduleInfo.class.getClassLoader());
    entryFeeCurrent = (Double)in.readValue(null);
    entryFeeSelected = (Double)in.readValue(null);
    exitFeeCurrent = (Double)in.readValue(null);
    exitFeeSelected = (Double)in.readValue(null);
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<DashboardFundDetails> CREATOR = new Parcelable.Creator<DashboardFundDetails>() {
    public DashboardFundDetails createFromParcel(Parcel in) {
      return new DashboardFundDetails(in);
    }
    public DashboardFundDetails[] newArray(int size) {
      return new DashboardFundDetails[size];
    }
  };
}
