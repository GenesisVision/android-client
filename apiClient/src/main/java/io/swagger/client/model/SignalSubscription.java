/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * SignalSubscription
 */

public class SignalSubscription
{
	@SerializedName("hasSignalAccount")
	private Boolean hasSignalAccount = null;

	@SerializedName("hasActiveSubscription")
	private Boolean hasActiveSubscription = null;

	@SerializedName("mode")
	private ModeEnum mode = null;

	@SerializedName("percent")
	private Double percent = null;

	@SerializedName("openTolerancePercent")
	private Double openTolerancePercent = null;

	@SerializedName("fixedVolume")
	private Double fixedVolume = null;

	@SerializedName("fixedCurrency")
	private FixedCurrencyEnum fixedCurrency = null;

	public SignalSubscription hasSignalAccount(Boolean hasSignalAccount) {
		this.hasSignalAccount = hasSignalAccount;
		return this;
	}

	/**
	 * Get hasSignalAccount
	 *
	 * @return hasSignalAccount
	 **/
	@ApiModelProperty(value = "")
	public Boolean isHasSignalAccount() {
		return hasSignalAccount;
	}

	public void setHasSignalAccount(Boolean hasSignalAccount) {
		this.hasSignalAccount = hasSignalAccount;
	}

	public SignalSubscription hasActiveSubscription(Boolean hasActiveSubscription) {
		this.hasActiveSubscription = hasActiveSubscription;
		return this;
	}

	/**
	 * Get hasActiveSubscription
	 *
	 * @return hasActiveSubscription
	 **/
	@ApiModelProperty(value = "")
	public Boolean isHasActiveSubscription() {
		return hasActiveSubscription;
	}

	public void setHasActiveSubscription(Boolean hasActiveSubscription) {
		this.hasActiveSubscription = hasActiveSubscription;
	}

	public SignalSubscription mode(ModeEnum mode) {
		this.mode = mode;
		return this;
	}

	/**
	 * Get mode
	 *
	 * @return mode
	 **/
	@ApiModelProperty(value = "")
	public ModeEnum getMode() {
		return mode;
	}

	public void setMode(ModeEnum mode) {
		this.mode = mode;
	}

	public SignalSubscription percent(Double percent) {
		this.percent = percent;
		return this;
	}

	/**
	 * Get percent
	 *
	 * @return percent
	 **/
	@ApiModelProperty(value = "")
	public Double getPercent() {
		return percent;
	}

	public void setPercent(Double percent) {
		this.percent = percent;
	}

	public SignalSubscription openTolerancePercent(Double openTolerancePercent) {
		this.openTolerancePercent = openTolerancePercent;
		return this;
	}

	/**
	 * Get openTolerancePercent
	 *
	 * @return openTolerancePercent
	 **/
	@ApiModelProperty(value = "")
	public Double getOpenTolerancePercent() {
		return openTolerancePercent;
	}

	public void setOpenTolerancePercent(Double openTolerancePercent) {
		this.openTolerancePercent = openTolerancePercent;
	}

	public SignalSubscription fixedVolume(Double fixedVolume) {
		this.fixedVolume = fixedVolume;
		return this;
	}

	/**
	 * Get fixedVolume
	 *
	 * @return fixedVolume
	 **/
	@ApiModelProperty(value = "")
	public Double getFixedVolume() {
		return fixedVolume;
	}

	public void setFixedVolume(Double fixedVolume) {
		this.fixedVolume = fixedVolume;
	}

	public SignalSubscription fixedCurrency(FixedCurrencyEnum fixedCurrency) {
		this.fixedCurrency = fixedCurrency;
		return this;
	}

	/**
	 * Get fixedCurrency
	 *
	 * @return fixedCurrency
	 **/
	@ApiModelProperty(value = "")
	public FixedCurrencyEnum getFixedCurrency() {
		return fixedCurrency;
	}

	public void setFixedCurrency(FixedCurrencyEnum fixedCurrency) {
		this.fixedCurrency = fixedCurrency;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		SignalSubscription signalSubscription = (SignalSubscription) o;
		return Objects.equals(this.hasSignalAccount, signalSubscription.hasSignalAccount) &&
				Objects.equals(this.hasActiveSubscription, signalSubscription.hasActiveSubscription) &&
				Objects.equals(this.mode, signalSubscription.mode) &&
				Objects.equals(this.percent, signalSubscription.percent) &&
				Objects.equals(this.openTolerancePercent, signalSubscription.openTolerancePercent) &&
				Objects.equals(this.fixedVolume, signalSubscription.fixedVolume) &&
				Objects.equals(this.fixedCurrency, signalSubscription.fixedCurrency);
	}

	@Override
	public int hashCode() {
		return Objects.hash(hasSignalAccount, hasActiveSubscription, mode, percent, openTolerancePercent, fixedVolume, fixedCurrency);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class SignalSubscription {\n");

		sb.append("    hasSignalAccount: ").append(toIndentedString(hasSignalAccount)).append("\n");
		sb.append("    hasActiveSubscription: ").append(toIndentedString(hasActiveSubscription)).append("\n");
		sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
		sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
		sb.append("    openTolerancePercent: ").append(toIndentedString(openTolerancePercent)).append("\n");
		sb.append("    fixedVolume: ").append(toIndentedString(fixedVolume)).append("\n");
		sb.append("    fixedCurrency: ").append(toIndentedString(fixedCurrency)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}


	/**
	 * Gets or Sets mode
	 */
	@JsonAdapter(ModeEnum.Adapter.class)
	public enum ModeEnum
	{
		BYBALANCE("ByBalance"),

		PERCENT("Percent"),

		FIXED("Fixed");

		public static ModeEnum fromValue(String text) {
			for (ModeEnum b : ModeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		ModeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<ModeEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ModeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ModeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets fixedCurrency
	 */
	@JsonAdapter(FixedCurrencyEnum.Adapter.class)
	public enum FixedCurrencyEnum
	{
		BTC("BTC"),

		ETH("ETH"),

		USDT("USDT"),

		GVT("GVT"),

		UNDEFINED("Undefined"),

		ADA("ADA"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static FixedCurrencyEnum fromValue(String text) {
			for (FixedCurrencyEnum b : FixedCurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		FixedCurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<FixedCurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final FixedCurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public FixedCurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return FixedCurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

