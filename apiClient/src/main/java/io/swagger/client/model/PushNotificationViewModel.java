/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * PushNotificationViewModel
 */


public class PushNotificationViewModel implements Parcelable
{
  public static final Parcelable.Creator<PushNotificationViewModel> CREATOR = new Parcelable.Creator<PushNotificationViewModel>()
  {
    public PushNotificationViewModel createFromParcel(Parcel in) {
      return new PushNotificationViewModel(in);
    }

    public PushNotificationViewModel[] newArray(int size) {
      return new PushNotificationViewModel[size];
    }
  };

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("date")
  private DateTime date = null;

  @SerializedName("imageUrl")
  private String imageUrl = null;

  @SerializedName("isUnread")
  private Boolean isUnread = null;

  @SerializedName("location")
  private NotificationLocationViewModel location = null;

  @SerializedName("assetDetails")
  private AssetDetails assetDetails = null;

  @SerializedName("userDetails")
  private ProfilePublic userDetails = null;

  @SerializedName("platformAssetDetails")
  private BasePlatformAsset platformAssetDetails = null;

  @SerializedName("channel")
  private PushNotificationChannel channel = null;

  public PushNotificationViewModel() {
  }

  PushNotificationViewModel(Parcel in) {
    id = (UUID) in.readValue(UUID.class.getClassLoader());
    text = (String) in.readValue(null);
    type = (String) in.readValue(null);
    date = (DateTime) in.readValue(DateTime.class.getClassLoader());
    imageUrl = (String) in.readValue(null);
    isUnread = (Boolean) in.readValue(null);
    location = (NotificationLocationViewModel) in.readValue(NotificationLocationViewModel.class.getClassLoader());
    assetDetails = (AssetDetails) in.readValue(AssetDetails.class.getClassLoader());
    userDetails = (ProfilePublic) in.readValue(ProfilePublic.class.getClassLoader());
    platformAssetDetails = (BasePlatformAsset) in.readValue(BasePlatformAsset.class.getClassLoader());
    channel = (PushNotificationChannel) in.readValue(PushNotificationChannel.class.getClassLoader());
  }

  public PushNotificationViewModel id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public PushNotificationViewModel text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   *
   * @return text
   **/
  @Schema(description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public PushNotificationViewModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Notification type  &lt;br&gt;Platform&lt;br&gt;Profile&lt;br&gt;Asset&lt;br&gt;TradingAccount&lt;br&gt;User&lt;br&gt;Signal&lt;br&gt;Social&lt;br&gt;PlatformAsset  Enum: GenesisVision.Core.DataModel.Attributes.NotificationGroup
   *
   * @return type
   **/
  @Schema(description = "Notification type  <br>Platform<br>Profile<br>Asset<br>TradingAccount<br>User<br>Signal<br>Social<br>PlatformAsset  Enum: GenesisVision.Core.DataModel.Attributes.NotificationGroup")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PushNotificationViewModel date(DateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   *
   * @return date
   **/
  @Schema(description = "")
  public DateTime getDate() {
    return date;
  }

  public void setDate(DateTime date) {
    this.date = date;
  }

  public PushNotificationViewModel imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   *
   * @return imageUrl
   **/
  @Schema(description = "")
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public PushNotificationViewModel isUnread(Boolean isUnread) {
    this.isUnread = isUnread;
    return this;
  }

  /**
   * Get isUnread
   *
   * @return isUnread
   **/
  @Schema(description = "")
  public Boolean isIsUnread() {
    return isUnread;
  }

  public void setIsUnread(Boolean isUnread) {
    this.isUnread = isUnread;
  }

  public PushNotificationViewModel location(NotificationLocationViewModel location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   *
   * @return location
   **/
  @Schema(description = "")
  public NotificationLocationViewModel getLocation() {
    return location;
  }

  public void setLocation(NotificationLocationViewModel location) {
    this.location = location;
  }

  public PushNotificationViewModel assetDetails(AssetDetails assetDetails) {
    this.assetDetails = assetDetails;
    return this;
  }

  /**
   * Get assetDetails
   *
   * @return assetDetails
   **/
  @Schema(description = "")
  public AssetDetails getAssetDetails() {
    return assetDetails;
  }

  public void setAssetDetails(AssetDetails assetDetails) {
    this.assetDetails = assetDetails;
  }

  public PushNotificationViewModel userDetails(ProfilePublic userDetails) {
    this.userDetails = userDetails;
    return this;
  }

  /**
   * Get userDetails
   *
   * @return userDetails
   **/
  @Schema(description = "")
  public ProfilePublic getUserDetails() {
    return userDetails;
  }

  public void setUserDetails(ProfilePublic userDetails) {
    this.userDetails = userDetails;
  }

  public PushNotificationViewModel platformAssetDetails(BasePlatformAsset platformAssetDetails) {
    this.platformAssetDetails = platformAssetDetails;
    return this;
  }

  /**
   * Get platformAssetDetails
   *
   * @return platformAssetDetails
   **/
  @Schema(description = "")
  public BasePlatformAsset getPlatformAssetDetails() {
    return platformAssetDetails;
  }

  public void setPlatformAssetDetails(BasePlatformAsset platformAssetDetails) {
    this.platformAssetDetails = platformAssetDetails;
  }

  public PushNotificationViewModel channel(PushNotificationChannel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   *
   * @return channel
   **/
  @Schema(description = "")
  public PushNotificationChannel getChannel() {
    return channel;
  }

  public void setChannel(PushNotificationChannel channel) {
    this.channel = channel;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationViewModel pushNotificationViewModel = (PushNotificationViewModel) o;
    return Objects.equals(this.id, pushNotificationViewModel.id) &&
            Objects.equals(this.text, pushNotificationViewModel.text) &&
            Objects.equals(this.type, pushNotificationViewModel.type) &&
            Objects.equals(this.date, pushNotificationViewModel.date) &&
            Objects.equals(this.imageUrl, pushNotificationViewModel.imageUrl) &&
            Objects.equals(this.isUnread, pushNotificationViewModel.isUnread) &&
            Objects.equals(this.location, pushNotificationViewModel.location) &&
            Objects.equals(this.assetDetails, pushNotificationViewModel.assetDetails) &&
            Objects.equals(this.userDetails, pushNotificationViewModel.userDetails) &&
            Objects.equals(this.platformAssetDetails, pushNotificationViewModel.platformAssetDetails) &&
            Objects.equals(this.channel, pushNotificationViewModel.channel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, text, type, date, imageUrl, isUnread, location, assetDetails, userDetails, platformAssetDetails, channel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationViewModel {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isUnread: ").append(toIndentedString(isUnread)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    assetDetails: ").append(toIndentedString(assetDetails)).append("\n");
    sb.append("    userDetails: ").append(toIndentedString(userDetails)).append("\n");
    sb.append("    platformAssetDetails: ").append(toIndentedString(platformAssetDetails)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(id);
    out.writeValue(text);
    out.writeValue(type);
    out.writeValue(date);
    out.writeValue(imageUrl);
    out.writeValue(isUnread);
    out.writeValue(location);
    out.writeValue(assetDetails);
    out.writeValue(userDetails);
    out.writeValue(platformAssetDetails);
    out.writeValue(channel);
  }

  public int describeContents() {
    return 0;
  }
}
