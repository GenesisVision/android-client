/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinanceSymbolFilterType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawSymbolPriceFilter
 */


public class BinanceRawSymbolPriceFilter implements Parcelable {
  @SerializedName("filterType")
  private BinanceSymbolFilterType filterType = null;

  @SerializedName("minPrice")
  private Double minPrice = null;

  @SerializedName("maxPrice")
  private Double maxPrice = null;

  @SerializedName("tickSize")
  private Double tickSize = null;

  public BinanceRawSymbolPriceFilter() {
  }
  public BinanceRawSymbolPriceFilter filterType(BinanceSymbolFilterType filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @Schema(description = "")
  public BinanceSymbolFilterType getFilterType() {
    return filterType;
  }

  public void setFilterType(BinanceSymbolFilterType filterType) {
    this.filterType = filterType;
  }

  public BinanceRawSymbolPriceFilter minPrice(Double minPrice) {
    this.minPrice = minPrice;
    return this;
  }

   /**
   * Get minPrice
   * @return minPrice
  **/
  @Schema(description = "")
  public Double getMinPrice() {
    return minPrice;
  }

  public void setMinPrice(Double minPrice) {
    this.minPrice = minPrice;
  }

  public BinanceRawSymbolPriceFilter maxPrice(Double maxPrice) {
    this.maxPrice = maxPrice;
    return this;
  }

   /**
   * Get maxPrice
   * @return maxPrice
  **/
  @Schema(description = "")
  public Double getMaxPrice() {
    return maxPrice;
  }

  public void setMaxPrice(Double maxPrice) {
    this.maxPrice = maxPrice;
  }

  public BinanceRawSymbolPriceFilter tickSize(Double tickSize) {
    this.tickSize = tickSize;
    return this;
  }

   /**
   * Get tickSize
   * @return tickSize
  **/
  @Schema(description = "")
  public Double getTickSize() {
    return tickSize;
  }

  public void setTickSize(Double tickSize) {
    this.tickSize = tickSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawSymbolPriceFilter binanceRawSymbolPriceFilter = (BinanceRawSymbolPriceFilter) o;
    return Objects.equals(this.filterType, binanceRawSymbolPriceFilter.filterType) &&
        Objects.equals(this.minPrice, binanceRawSymbolPriceFilter.minPrice) &&
        Objects.equals(this.maxPrice, binanceRawSymbolPriceFilter.maxPrice) &&
        Objects.equals(this.tickSize, binanceRawSymbolPriceFilter.tickSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, minPrice, maxPrice, tickSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawSymbolPriceFilter {\n");
    
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    minPrice: ").append(toIndentedString(minPrice)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    tickSize: ").append(toIndentedString(tickSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(filterType);
    out.writeValue(minPrice);
    out.writeValue(maxPrice);
    out.writeValue(tickSize);
  }

  BinanceRawSymbolPriceFilter(Parcel in) {
    filterType = (BinanceSymbolFilterType)in.readValue(BinanceSymbolFilterType.class.getClassLoader());
    minPrice = (Double)in.readValue(null);
    maxPrice = (Double)in.readValue(null);
    tickSize = (Double)in.readValue(null);
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawSymbolPriceFilter> CREATOR = new Parcelable.Creator<BinanceRawSymbolPriceFilter>() {
    public BinanceRawSymbolPriceFilter createFromParcel(Parcel in) {
      return new BinanceRawSymbolPriceFilter(in);
    }
    public BinanceRawSymbolPriceFilter[] newArray(int size) {
      return new BinanceRawSymbolPriceFilter[size];
    }
  };
}
