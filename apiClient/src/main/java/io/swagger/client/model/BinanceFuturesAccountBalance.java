/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BinanceFuturesAccountBalance
 */


public class BinanceFuturesAccountBalance implements Parcelable
{
	public static final Parcelable.Creator<BinanceFuturesAccountBalance> CREATOR = new Parcelable.Creator<BinanceFuturesAccountBalance>()
	{
		public BinanceFuturesAccountBalance createFromParcel(Parcel in) {
			return new BinanceFuturesAccountBalance(in);
		}

		public BinanceFuturesAccountBalance[] newArray(int size) {
			return new BinanceFuturesAccountBalance[size];
		}
	};

	@SerializedName("accountAlias")
	private String accountAlias = null;

	@SerializedName("asset")
	private String asset = null;

	@SerializedName("walletBalance")
	private Double walletBalance = null;

	@SerializedName("crossWalletBalance")
	private Double crossWalletBalance = null;

	@SerializedName("crossUnrealizedPnl")
	private Double crossUnrealizedPnl = null;

	@SerializedName("availableBalance")
	private Double availableBalance = null;

	@SerializedName("maxWithdrawAmount")
	private Double maxWithdrawAmount = null;

	@SerializedName("marginAvailable")
	private Boolean marginAvailable = null;

	@SerializedName("logoUrl")
	private String logoUrl = null;

	public BinanceFuturesAccountBalance() {
	}

	BinanceFuturesAccountBalance(Parcel in) {
		accountAlias = (String) in.readValue(null);
		asset = (String) in.readValue(null);
		walletBalance = (Double) in.readValue(null);
		crossWalletBalance = (Double) in.readValue(null);
		crossUnrealizedPnl = (Double) in.readValue(null);
		availableBalance = (Double) in.readValue(null);
		maxWithdrawAmount = (Double) in.readValue(null);
		marginAvailable = (Boolean) in.readValue(null);
		logoUrl = (String) in.readValue(null);
	}

	public BinanceFuturesAccountBalance accountAlias(String accountAlias) {
		this.accountAlias = accountAlias;
		return this;
	}

	/**
	 * Get accountAlias
	 *
	 * @return accountAlias
	 **/
	@Schema(description = "")
	public String getAccountAlias() {
		return accountAlias;
	}

	public void setAccountAlias(String accountAlias) {
		this.accountAlias = accountAlias;
	}

	public BinanceFuturesAccountBalance asset(String asset) {
		this.asset = asset;
		return this;
	}

	/**
	 * Get asset
	 *
	 * @return asset
	 **/
	@Schema(description = "")
	public String getAsset() {
		return asset;
	}

	public void setAsset(String asset) {
		this.asset = asset;
	}

	public BinanceFuturesAccountBalance walletBalance(Double walletBalance) {
		this.walletBalance = walletBalance;
		return this;
	}

	/**
	 * Get walletBalance
	 *
	 * @return walletBalance
	 **/
	@Schema(description = "")
	public Double getWalletBalance() {
		return walletBalance;
	}

	public void setWalletBalance(Double walletBalance) {
		this.walletBalance = walletBalance;
	}

	public BinanceFuturesAccountBalance crossWalletBalance(Double crossWalletBalance) {
		this.crossWalletBalance = crossWalletBalance;
		return this;
	}

	/**
	 * Get crossWalletBalance
	 *
	 * @return crossWalletBalance
	 **/
	@Schema(description = "")
	public Double getCrossWalletBalance() {
		return crossWalletBalance;
	}

	public void setCrossWalletBalance(Double crossWalletBalance) {
		this.crossWalletBalance = crossWalletBalance;
	}

	public BinanceFuturesAccountBalance crossUnrealizedPnl(Double crossUnrealizedPnl) {
		this.crossUnrealizedPnl = crossUnrealizedPnl;
		return this;
	}

	/**
	 * Get crossUnrealizedPnl
	 *
	 * @return crossUnrealizedPnl
	 **/
	@Schema(description = "")
	public Double getCrossUnrealizedPnl() {
		return crossUnrealizedPnl;
	}

	public void setCrossUnrealizedPnl(Double crossUnrealizedPnl) {
		this.crossUnrealizedPnl = crossUnrealizedPnl;
	}

	public BinanceFuturesAccountBalance availableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
		return this;
	}

	/**
	 * Get availableBalance
	 *
	 * @return availableBalance
	 **/
	@Schema(description = "")
	public Double getAvailableBalance() {
		return availableBalance;
	}

	public void setAvailableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
	}

	public BinanceFuturesAccountBalance maxWithdrawAmount(Double maxWithdrawAmount) {
		this.maxWithdrawAmount = maxWithdrawAmount;
		return this;
	}

	/**
	 * Get maxWithdrawAmount
	 *
	 * @return maxWithdrawAmount
	 **/
	@Schema(description = "")
	public Double getMaxWithdrawAmount() {
		return maxWithdrawAmount;
	}

	public void setMaxWithdrawAmount(Double maxWithdrawAmount) {
		this.maxWithdrawAmount = maxWithdrawAmount;
	}

	public BinanceFuturesAccountBalance marginAvailable(Boolean marginAvailable) {
		this.marginAvailable = marginAvailable;
		return this;
	}

	/**
	 * Get marginAvailable
	 *
	 * @return marginAvailable
	 **/
	@Schema(description = "")
	public Boolean isMarginAvailable() {
		return marginAvailable;
	}

	public void setMarginAvailable(Boolean marginAvailable) {
		this.marginAvailable = marginAvailable;
	}

	public BinanceFuturesAccountBalance logoUrl(String logoUrl) {
		this.logoUrl = logoUrl;
		return this;
	}

	/**
	 * Get logoUrl
	 *
	 * @return logoUrl
	 **/
	@Schema(description = "")
	public String getLogoUrl() {
		return logoUrl;
	}

	public void setLogoUrl(String logoUrl) {
		this.logoUrl = logoUrl;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BinanceFuturesAccountBalance binanceFuturesAccountBalance = (BinanceFuturesAccountBalance) o;
		return Objects.equals(this.accountAlias, binanceFuturesAccountBalance.accountAlias) &&
				Objects.equals(this.asset, binanceFuturesAccountBalance.asset) &&
				Objects.equals(this.walletBalance, binanceFuturesAccountBalance.walletBalance) &&
				Objects.equals(this.crossWalletBalance, binanceFuturesAccountBalance.crossWalletBalance) &&
				Objects.equals(this.crossUnrealizedPnl, binanceFuturesAccountBalance.crossUnrealizedPnl) &&
				Objects.equals(this.availableBalance, binanceFuturesAccountBalance.availableBalance) &&
				Objects.equals(this.maxWithdrawAmount, binanceFuturesAccountBalance.maxWithdrawAmount) &&
				Objects.equals(this.marginAvailable, binanceFuturesAccountBalance.marginAvailable) &&
				Objects.equals(this.logoUrl, binanceFuturesAccountBalance.logoUrl);
	}

	@Override
	public int hashCode() {
		return Objects.hash(accountAlias, asset, walletBalance, crossWalletBalance, crossUnrealizedPnl, availableBalance, maxWithdrawAmount, marginAvailable, logoUrl);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BinanceFuturesAccountBalance {\n");

		sb.append("    accountAlias: ").append(toIndentedString(accountAlias)).append("\n");
		sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
		sb.append("    walletBalance: ").append(toIndentedString(walletBalance)).append("\n");
		sb.append("    crossWalletBalance: ").append(toIndentedString(crossWalletBalance)).append("\n");
		sb.append("    crossUnrealizedPnl: ").append(toIndentedString(crossUnrealizedPnl)).append("\n");
		sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
		sb.append("    maxWithdrawAmount: ").append(toIndentedString(maxWithdrawAmount)).append("\n");
		sb.append("    marginAvailable: ").append(toIndentedString(marginAvailable)).append("\n");
		sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(accountAlias);
		out.writeValue(asset);
		out.writeValue(walletBalance);
		out.writeValue(crossWalletBalance);
		out.writeValue(crossUnrealizedPnl);
		out.writeValue(availableBalance);
		out.writeValue(maxWithdrawAmount);
		out.writeValue(marginAvailable);
		out.writeValue(logoUrl);
	}

	public int describeContents() {
		return 0;
	}
}
