/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ProgramDailyPeriodDetails;
import io.swagger.client.model.ProgramType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * DashboardProgramDetails
 */


public class DashboardProgramDetails implements Parcelable {
  @SerializedName("level")
  private Integer level = null;

  @SerializedName("levelProgress")
  private Double levelProgress = null;

  @SerializedName("type")
  private ProgramType type = null;

  @SerializedName("managementFeeSelected")
  private Double managementFeeSelected = null;

  @SerializedName("managementFeeCurrent")
  private Double managementFeeCurrent = null;

  @SerializedName("successFeeSelected")
  private Double successFeeSelected = null;

  @SerializedName("successFeeCurrent")
  private Double successFeeCurrent = null;

  @SerializedName("stopOutLevelSelected")
  private Double stopOutLevelSelected = null;

  @SerializedName("stopOutLevelCurrent")
  private Double stopOutLevelCurrent = null;

  @SerializedName("totalAvailableInvestment")
  private Double totalAvailableInvestment = null;

  @SerializedName("dailyPeriodDetails")
  private ProgramDailyPeriodDetails dailyPeriodDetails = null;

  public DashboardProgramDetails() {
  }
  public DashboardProgramDetails level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @Schema(description = "")
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }

  public DashboardProgramDetails levelProgress(Double levelProgress) {
    this.levelProgress = levelProgress;
    return this;
  }

   /**
   * Get levelProgress
   * @return levelProgress
  **/
  @Schema(description = "")
  public Double getLevelProgress() {
    return levelProgress;
  }

  public void setLevelProgress(Double levelProgress) {
    this.levelProgress = levelProgress;
  }

  public DashboardProgramDetails type(ProgramType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public ProgramType getType() {
    return type;
  }

  public void setType(ProgramType type) {
    this.type = type;
  }

  public DashboardProgramDetails managementFeeSelected(Double managementFeeSelected) {
    this.managementFeeSelected = managementFeeSelected;
    return this;
  }

   /**
   * Get managementFeeSelected
   * @return managementFeeSelected
  **/
  @Schema(description = "")
  public Double getManagementFeeSelected() {
    return managementFeeSelected;
  }

  public void setManagementFeeSelected(Double managementFeeSelected) {
    this.managementFeeSelected = managementFeeSelected;
  }

  public DashboardProgramDetails managementFeeCurrent(Double managementFeeCurrent) {
    this.managementFeeCurrent = managementFeeCurrent;
    return this;
  }

   /**
   * Get managementFeeCurrent
   * @return managementFeeCurrent
  **/
  @Schema(description = "")
  public Double getManagementFeeCurrent() {
    return managementFeeCurrent;
  }

  public void setManagementFeeCurrent(Double managementFeeCurrent) {
    this.managementFeeCurrent = managementFeeCurrent;
  }

  public DashboardProgramDetails successFeeSelected(Double successFeeSelected) {
    this.successFeeSelected = successFeeSelected;
    return this;
  }

   /**
   * Get successFeeSelected
   * @return successFeeSelected
  **/
  @Schema(description = "")
  public Double getSuccessFeeSelected() {
    return successFeeSelected;
  }

  public void setSuccessFeeSelected(Double successFeeSelected) {
    this.successFeeSelected = successFeeSelected;
  }

  public DashboardProgramDetails successFeeCurrent(Double successFeeCurrent) {
    this.successFeeCurrent = successFeeCurrent;
    return this;
  }

   /**
   * Get successFeeCurrent
   * @return successFeeCurrent
  **/
  @Schema(description = "")
  public Double getSuccessFeeCurrent() {
    return successFeeCurrent;
  }

  public void setSuccessFeeCurrent(Double successFeeCurrent) {
    this.successFeeCurrent = successFeeCurrent;
  }

  public DashboardProgramDetails stopOutLevelSelected(Double stopOutLevelSelected) {
    this.stopOutLevelSelected = stopOutLevelSelected;
    return this;
  }

   /**
   * Get stopOutLevelSelected
   * @return stopOutLevelSelected
  **/
  @Schema(description = "")
  public Double getStopOutLevelSelected() {
    return stopOutLevelSelected;
  }

  public void setStopOutLevelSelected(Double stopOutLevelSelected) {
    this.stopOutLevelSelected = stopOutLevelSelected;
  }

  public DashboardProgramDetails stopOutLevelCurrent(Double stopOutLevelCurrent) {
    this.stopOutLevelCurrent = stopOutLevelCurrent;
    return this;
  }

   /**
   * Get stopOutLevelCurrent
   * @return stopOutLevelCurrent
  **/
  @Schema(description = "")
  public Double getStopOutLevelCurrent() {
    return stopOutLevelCurrent;
  }

  public void setStopOutLevelCurrent(Double stopOutLevelCurrent) {
    this.stopOutLevelCurrent = stopOutLevelCurrent;
  }

  public DashboardProgramDetails totalAvailableInvestment(Double totalAvailableInvestment) {
    this.totalAvailableInvestment = totalAvailableInvestment;
    return this;
  }

   /**
   * Get totalAvailableInvestment
   * @return totalAvailableInvestment
  **/
  @Schema(description = "")
  public Double getTotalAvailableInvestment() {
    return totalAvailableInvestment;
  }

  public void setTotalAvailableInvestment(Double totalAvailableInvestment) {
    this.totalAvailableInvestment = totalAvailableInvestment;
  }

  public DashboardProgramDetails dailyPeriodDetails(ProgramDailyPeriodDetails dailyPeriodDetails) {
    this.dailyPeriodDetails = dailyPeriodDetails;
    return this;
  }

   /**
   * Get dailyPeriodDetails
   * @return dailyPeriodDetails
  **/
  @Schema(description = "")
  public ProgramDailyPeriodDetails getDailyPeriodDetails() {
    return dailyPeriodDetails;
  }

  public void setDailyPeriodDetails(ProgramDailyPeriodDetails dailyPeriodDetails) {
    this.dailyPeriodDetails = dailyPeriodDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardProgramDetails dashboardProgramDetails = (DashboardProgramDetails) o;
    return Objects.equals(this.level, dashboardProgramDetails.level) &&
        Objects.equals(this.levelProgress, dashboardProgramDetails.levelProgress) &&
        Objects.equals(this.type, dashboardProgramDetails.type) &&
        Objects.equals(this.managementFeeSelected, dashboardProgramDetails.managementFeeSelected) &&
        Objects.equals(this.managementFeeCurrent, dashboardProgramDetails.managementFeeCurrent) &&
        Objects.equals(this.successFeeSelected, dashboardProgramDetails.successFeeSelected) &&
        Objects.equals(this.successFeeCurrent, dashboardProgramDetails.successFeeCurrent) &&
        Objects.equals(this.stopOutLevelSelected, dashboardProgramDetails.stopOutLevelSelected) &&
        Objects.equals(this.stopOutLevelCurrent, dashboardProgramDetails.stopOutLevelCurrent) &&
        Objects.equals(this.totalAvailableInvestment, dashboardProgramDetails.totalAvailableInvestment) &&
        Objects.equals(this.dailyPeriodDetails, dashboardProgramDetails.dailyPeriodDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(level, levelProgress, type, managementFeeSelected, managementFeeCurrent, successFeeSelected, successFeeCurrent, stopOutLevelSelected, stopOutLevelCurrent, totalAvailableInvestment, dailyPeriodDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardProgramDetails {\n");
    
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    levelProgress: ").append(toIndentedString(levelProgress)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    managementFeeSelected: ").append(toIndentedString(managementFeeSelected)).append("\n");
    sb.append("    managementFeeCurrent: ").append(toIndentedString(managementFeeCurrent)).append("\n");
    sb.append("    successFeeSelected: ").append(toIndentedString(successFeeSelected)).append("\n");
    sb.append("    successFeeCurrent: ").append(toIndentedString(successFeeCurrent)).append("\n");
    sb.append("    stopOutLevelSelected: ").append(toIndentedString(stopOutLevelSelected)).append("\n");
    sb.append("    stopOutLevelCurrent: ").append(toIndentedString(stopOutLevelCurrent)).append("\n");
    sb.append("    totalAvailableInvestment: ").append(toIndentedString(totalAvailableInvestment)).append("\n");
    sb.append("    dailyPeriodDetails: ").append(toIndentedString(dailyPeriodDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(level);
    out.writeValue(levelProgress);
    out.writeValue(type);
    out.writeValue(managementFeeSelected);
    out.writeValue(managementFeeCurrent);
    out.writeValue(successFeeSelected);
    out.writeValue(successFeeCurrent);
    out.writeValue(stopOutLevelSelected);
    out.writeValue(stopOutLevelCurrent);
    out.writeValue(totalAvailableInvestment);
    out.writeValue(dailyPeriodDetails);
  }

  DashboardProgramDetails(Parcel in) {
    level = (Integer)in.readValue(null);
    levelProgress = (Double)in.readValue(null);
    type = (ProgramType)in.readValue(ProgramType.class.getClassLoader());
    managementFeeSelected = (Double)in.readValue(null);
    managementFeeCurrent = (Double)in.readValue(null);
    successFeeSelected = (Double)in.readValue(null);
    successFeeCurrent = (Double)in.readValue(null);
    stopOutLevelSelected = (Double)in.readValue(null);
    stopOutLevelCurrent = (Double)in.readValue(null);
    totalAvailableInvestment = (Double)in.readValue(null);
    dailyPeriodDetails = (ProgramDailyPeriodDetails)in.readValue(ProgramDailyPeriodDetails.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<DashboardProgramDetails> CREATOR = new Parcelable.Creator<DashboardProgramDetails>() {
    public DashboardProgramDetails createFromParcel(Parcel in) {
      return new DashboardProgramDetails(in);
    }
    public DashboardProgramDetails[] newArray(int size) {
      return new DashboardProgramDetails[size];
    }
  };
}
