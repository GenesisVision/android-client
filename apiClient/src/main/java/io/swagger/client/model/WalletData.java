/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * WalletData
 */

public class WalletData
{
	@SerializedName("id")
	private UUID id = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("rateToGVT")
	private Double rateToGVT = null;

	@SerializedName("isDepositEnabled")
	private Boolean isDepositEnabled = null;

	@SerializedName("isWithdrawalEnabled")
	private Boolean isWithdrawalEnabled = null;

	@SerializedName("withdrawalCommission")
	private Double withdrawalCommission = null;

	@SerializedName("depositAddress")
	private String depositAddress = null;

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("available")
	private Double available = null;

	@SerializedName("invested")
	private Double invested = null;

	@SerializedName("pending")
	private Double pending = null;

	@SerializedName("total")
	private Double total = null;

	@SerializedName("currencyCcy")
	private CurrencyCcyEnum currencyCcy = null;

	@SerializedName("availableCcy")
	private Double availableCcy = null;

	@SerializedName("investedCcy")
	private Double investedCcy = null;

	@SerializedName("pendingCcy")
	private Double pendingCcy = null;

	@SerializedName("totalCcy")
	private Double totalCcy = null;

	public WalletData id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@ApiModelProperty(value = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public WalletData title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@ApiModelProperty(value = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public WalletData logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@ApiModelProperty(value = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public WalletData rateToGVT(Double rateToGVT) {
		this.rateToGVT = rateToGVT;
		return this;
	}

	/**
	 * Get rateToGVT
	 *
	 * @return rateToGVT
	 **/
	@ApiModelProperty(value = "")
	public Double getRateToGVT() {
		return rateToGVT;
	}

	public void setRateToGVT(Double rateToGVT) {
		this.rateToGVT = rateToGVT;
	}

	public WalletData isDepositEnabled(Boolean isDepositEnabled) {
		this.isDepositEnabled = isDepositEnabled;
		return this;
	}

	/**
	 * Get isDepositEnabled
	 *
	 * @return isDepositEnabled
	 **/
	@ApiModelProperty(value = "")
	public Boolean isIsDepositEnabled() {
		return isDepositEnabled;
	}

	public void setIsDepositEnabled(Boolean isDepositEnabled) {
		this.isDepositEnabled = isDepositEnabled;
	}

	public WalletData isWithdrawalEnabled(Boolean isWithdrawalEnabled) {
		this.isWithdrawalEnabled = isWithdrawalEnabled;
		return this;
	}

	/**
	 * Get isWithdrawalEnabled
	 *
	 * @return isWithdrawalEnabled
	 **/
	@ApiModelProperty(value = "")
	public Boolean isIsWithdrawalEnabled() {
		return isWithdrawalEnabled;
	}

	public void setIsWithdrawalEnabled(Boolean isWithdrawalEnabled) {
		this.isWithdrawalEnabled = isWithdrawalEnabled;
	}

	public WalletData withdrawalCommission(Double withdrawalCommission) {
		this.withdrawalCommission = withdrawalCommission;
		return this;
	}

	/**
	 * Get withdrawalCommission
	 *
	 * @return withdrawalCommission
	 **/
	@ApiModelProperty(value = "")
	public Double getWithdrawalCommission() {
		return withdrawalCommission;
	}

	public void setWithdrawalCommission(Double withdrawalCommission) {
		this.withdrawalCommission = withdrawalCommission;
	}

	public WalletData depositAddress(String depositAddress) {
		this.depositAddress = depositAddress;
		return this;
	}

	/**
	 * Get depositAddress
	 *
	 * @return depositAddress
	 **/
	@ApiModelProperty(value = "")
	public String getDepositAddress() {
		return depositAddress;
	}

	public void setDepositAddress(String depositAddress) {
		this.depositAddress = depositAddress;
	}

	public WalletData currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@ApiModelProperty(value = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public WalletData available(Double available) {
		this.available = available;
		return this;
	}

	/**
	 * Get available
	 *
	 * @return available
	 **/
	@ApiModelProperty(value = "")
	public Double getAvailable() {
		return available;
	}

	public void setAvailable(Double available) {
		this.available = available;
	}

	public WalletData invested(Double invested) {
		this.invested = invested;
		return this;
	}

	/**
	 * Get invested
	 *
	 * @return invested
	 **/
	@ApiModelProperty(value = "")
	public Double getInvested() {
		return invested;
	}

	public void setInvested(Double invested) {
		this.invested = invested;
	}

	public WalletData pending(Double pending) {
		this.pending = pending;
		return this;
	}

	/**
	 * Get pending
	 *
	 * @return pending
	 **/
	@ApiModelProperty(value = "")
	public Double getPending() {
		return pending;
	}

	public void setPending(Double pending) {
		this.pending = pending;
	}

	/**
	 * Get total
	 *
	 * @return total
	 **/
	@ApiModelProperty(value = "")
	public Double getTotal() {
		return total;
	}

	public WalletData currencyCcy(CurrencyCcyEnum currencyCcy) {
		this.currencyCcy = currencyCcy;
		return this;
	}

	/**
	 * Get currencyCcy
	 *
	 * @return currencyCcy
	 **/
	@ApiModelProperty(value = "")
	public CurrencyCcyEnum getCurrencyCcy() {
		return currencyCcy;
	}

	public void setCurrencyCcy(CurrencyCcyEnum currencyCcy) {
		this.currencyCcy = currencyCcy;
	}

	public WalletData availableCcy(Double availableCcy) {
		this.availableCcy = availableCcy;
		return this;
	}

	/**
	 * Get availableCcy
	 *
	 * @return availableCcy
	 **/
	@ApiModelProperty(value = "")
	public Double getAvailableCcy() {
		return availableCcy;
	}

	public void setAvailableCcy(Double availableCcy) {
		this.availableCcy = availableCcy;
	}

	public WalletData investedCcy(Double investedCcy) {
		this.investedCcy = investedCcy;
		return this;
	}

	/**
	 * Get investedCcy
	 *
	 * @return investedCcy
	 **/
	@ApiModelProperty(value = "")
	public Double getInvestedCcy() {
		return investedCcy;
	}

	public void setInvestedCcy(Double investedCcy) {
		this.investedCcy = investedCcy;
	}

	public WalletData pendingCcy(Double pendingCcy) {
		this.pendingCcy = pendingCcy;
		return this;
	}

	/**
	 * Get pendingCcy
	 *
	 * @return pendingCcy
	 **/
	@ApiModelProperty(value = "")
	public Double getPendingCcy() {
		return pendingCcy;
	}

	public void setPendingCcy(Double pendingCcy) {
		this.pendingCcy = pendingCcy;
	}

	/**
	 * Get totalCcy
	 *
	 * @return totalCcy
	 **/
	@ApiModelProperty(value = "")
	public Double getTotalCcy() {
		return totalCcy;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WalletData walletData = (WalletData) o;
		return Objects.equals(this.id, walletData.id) &&
				Objects.equals(this.title, walletData.title) &&
				Objects.equals(this.logo, walletData.logo) &&
				Objects.equals(this.rateToGVT, walletData.rateToGVT) &&
				Objects.equals(this.isDepositEnabled, walletData.isDepositEnabled) &&
				Objects.equals(this.isWithdrawalEnabled, walletData.isWithdrawalEnabled) &&
				Objects.equals(this.withdrawalCommission, walletData.withdrawalCommission) &&
				Objects.equals(this.depositAddress, walletData.depositAddress) &&
				Objects.equals(this.currency, walletData.currency) &&
				Objects.equals(this.available, walletData.available) &&
				Objects.equals(this.invested, walletData.invested) &&
				Objects.equals(this.pending, walletData.pending) &&
				Objects.equals(this.total, walletData.total) &&
				Objects.equals(this.currencyCcy, walletData.currencyCcy) &&
				Objects.equals(this.availableCcy, walletData.availableCcy) &&
				Objects.equals(this.investedCcy, walletData.investedCcy) &&
				Objects.equals(this.pendingCcy, walletData.pendingCcy) &&
				Objects.equals(this.totalCcy, walletData.totalCcy);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, title, logo, rateToGVT, isDepositEnabled, isWithdrawalEnabled, withdrawalCommission, depositAddress, currency, available, invested, pending, total, currencyCcy, availableCcy, investedCcy, pendingCcy, totalCcy);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WalletData {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    rateToGVT: ").append(toIndentedString(rateToGVT)).append("\n");
		sb.append("    isDepositEnabled: ").append(toIndentedString(isDepositEnabled)).append("\n");
		sb.append("    isWithdrawalEnabled: ").append(toIndentedString(isWithdrawalEnabled)).append("\n");
		sb.append("    withdrawalCommission: ").append(toIndentedString(withdrawalCommission)).append("\n");
		sb.append("    depositAddress: ").append(toIndentedString(depositAddress)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    available: ").append(toIndentedString(available)).append("\n");
		sb.append("    invested: ").append(toIndentedString(invested)).append("\n");
		sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
		sb.append("    total: ").append(toIndentedString(total)).append("\n");
		sb.append("    currencyCcy: ").append(toIndentedString(currencyCcy)).append("\n");
		sb.append("    availableCcy: ").append(toIndentedString(availableCcy)).append("\n");
		sb.append("    investedCcy: ").append(toIndentedString(investedCcy)).append("\n");
		sb.append("    pendingCcy: ").append(toIndentedString(pendingCcy)).append("\n");
		sb.append("    totalCcy: ").append(toIndentedString(totalCcy)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}


	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USDT("USDT"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets currencyCcy
	 */
	@JsonAdapter(CurrencyCcyEnum.Adapter.class)
	public enum CurrencyCcyEnum
	{
		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USDT("USDT"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyCcyEnum fromValue(String text) {
			for (CurrencyCcyEnum b : CurrencyCcyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyCcyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyCcyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyCcyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyCcyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyCcyEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

