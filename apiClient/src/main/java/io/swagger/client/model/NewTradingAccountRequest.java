/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * NewTradingAccountRequest
 */


public class NewTradingAccountRequest implements Parcelable
{
	public static final Parcelable.Creator<NewTradingAccountRequest> CREATOR = new Parcelable.Creator<NewTradingAccountRequest>()
	{
		public NewTradingAccountRequest createFromParcel(Parcel in) {
			return new NewTradingAccountRequest(in);
		}

		public NewTradingAccountRequest[] newArray(int size) {
			return new NewTradingAccountRequest[size];
		}
	};

	@SerializedName("depositAmount")
	private Double depositAmount = null;

	@SerializedName("depositWalletId")
	private UUID depositWalletId = null;

	@SerializedName("currency")
	private Currency currency = null;

	@SerializedName("leverage")
	private Integer leverage = null;

	@SerializedName("brokerAccountTypeId")
	private UUID brokerAccountTypeId = null;

	public NewTradingAccountRequest() {
	}

	NewTradingAccountRequest(Parcel in) {
		depositAmount = (Double) in.readValue(null);
		depositWalletId = (UUID) in.readValue(UUID.class.getClassLoader());
		currency = (Currency) in.readValue(Currency.class.getClassLoader());
		leverage = (Integer) in.readValue(null);
		brokerAccountTypeId = (UUID) in.readValue(UUID.class.getClassLoader());
	}

	public NewTradingAccountRequest depositAmount(Double depositAmount) {
		this.depositAmount = depositAmount;
		return this;
	}

	/**
	 * Get depositAmount
	 *
	 * @return depositAmount
	 **/
	@Schema(description = "")
	public Double getDepositAmount() {
		return depositAmount;
	}

	public void setDepositAmount(Double depositAmount) {
		this.depositAmount = depositAmount;
	}

	public NewTradingAccountRequest depositWalletId(UUID depositWalletId) {
		this.depositWalletId = depositWalletId;
		return this;
	}

	/**
	 * Get depositWalletId
	 *
	 * @return depositWalletId
	 **/
	@Schema(description = "")
	public UUID getDepositWalletId() {
		return depositWalletId;
	}

	public void setDepositWalletId(UUID depositWalletId) {
		this.depositWalletId = depositWalletId;
	}

	public NewTradingAccountRequest currency(Currency currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public Currency getCurrency() {
		return currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	public NewTradingAccountRequest leverage(Integer leverage) {
		this.leverage = leverage;
		return this;
	}

	/**
	 * Get leverage
	 *
	 * @return leverage
	 **/
	@Schema(description = "")
	public Integer getLeverage() {
		return leverage;
	}

	public void setLeverage(Integer leverage) {
		this.leverage = leverage;
	}

	public NewTradingAccountRequest brokerAccountTypeId(UUID brokerAccountTypeId) {
		this.brokerAccountTypeId = brokerAccountTypeId;
		return this;
	}

	/**
	 * Get brokerAccountTypeId
	 *
	 * @return brokerAccountTypeId
	 **/
	@Schema(description = "")
	public UUID getBrokerAccountTypeId() {
		return brokerAccountTypeId;
	}

	public void setBrokerAccountTypeId(UUID brokerAccountTypeId) {
		this.brokerAccountTypeId = brokerAccountTypeId;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		NewTradingAccountRequest newTradingAccountRequest = (NewTradingAccountRequest) o;
		return Objects.equals(this.depositAmount, newTradingAccountRequest.depositAmount) &&
				Objects.equals(this.depositWalletId, newTradingAccountRequest.depositWalletId) &&
				Objects.equals(this.currency, newTradingAccountRequest.currency) &&
				Objects.equals(this.leverage, newTradingAccountRequest.leverage) &&
				Objects.equals(this.brokerAccountTypeId, newTradingAccountRequest.brokerAccountTypeId);
	}

	@Override
	public int hashCode() {
		return Objects.hash(depositAmount, depositWalletId, currency, leverage, brokerAccountTypeId);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class NewTradingAccountRequest {\n");

		sb.append("    depositAmount: ").append(toIndentedString(depositAmount)).append("\n");
		sb.append("    depositWalletId: ").append(toIndentedString(depositWalletId)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
		sb.append("    brokerAccountTypeId: ").append(toIndentedString(brokerAccountTypeId)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(depositAmount);
		out.writeValue(depositWalletId);
		out.writeValue(currency);
		out.writeValue(leverage);
		out.writeValue(brokerAccountTypeId);
	}

	public int describeContents() {
		return 0;
	}
}
