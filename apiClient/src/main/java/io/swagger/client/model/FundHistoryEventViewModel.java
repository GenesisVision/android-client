/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.FundAssetPartWithIcon;
import io.swagger.client.model.FundHistoryEventType;
import io.swagger.client.model.FundTradingEventViewModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * FundHistoryEventViewModel
 */


public class FundHistoryEventViewModel implements Parcelable {
  @SerializedName("date")
  private DateTime date = null;

  @SerializedName("type")
  private FundHistoryEventType type = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("logoUrl")
  private String logoUrl = null;

  @SerializedName("trades")
  private List<FundTradingEventViewModel> trades = null;

  @SerializedName("newAssets")
  private List<FundAssetPartWithIcon> newAssets = null;

  public FundHistoryEventViewModel() {
  }
  public FundHistoryEventViewModel date(DateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @Schema(description = "")
  public DateTime getDate() {
    return date;
  }

  public void setDate(DateTime date) {
    this.date = date;
  }

  public FundHistoryEventViewModel type(FundHistoryEventType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public FundHistoryEventType getType() {
    return type;
  }

  public void setType(FundHistoryEventType type) {
    this.type = type;
  }

  public FundHistoryEventViewModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public FundHistoryEventViewModel logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * Get logoUrl
   * @return logoUrl
  **/
  @Schema(description = "")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public FundHistoryEventViewModel trades(List<FundTradingEventViewModel> trades) {
    this.trades = trades;
    return this;
  }

  public FundHistoryEventViewModel addTradesItem(FundTradingEventViewModel tradesItem) {
    if (this.trades == null) {
      this.trades = new ArrayList<FundTradingEventViewModel>();
    }
    this.trades.add(tradesItem);
    return this;
  }

   /**
   * Get trades
   * @return trades
  **/
  @Schema(description = "")
  public List<FundTradingEventViewModel> getTrades() {
    return trades;
  }

  public void setTrades(List<FundTradingEventViewModel> trades) {
    this.trades = trades;
  }

  public FundHistoryEventViewModel newAssets(List<FundAssetPartWithIcon> newAssets) {
    this.newAssets = newAssets;
    return this;
  }

  public FundHistoryEventViewModel addNewAssetsItem(FundAssetPartWithIcon newAssetsItem) {
    if (this.newAssets == null) {
      this.newAssets = new ArrayList<FundAssetPartWithIcon>();
    }
    this.newAssets.add(newAssetsItem);
    return this;
  }

   /**
   * Reallocation/fund creation
   * @return newAssets
  **/
  @Schema(description = "Reallocation/fund creation")
  public List<FundAssetPartWithIcon> getNewAssets() {
    return newAssets;
  }

  public void setNewAssets(List<FundAssetPartWithIcon> newAssets) {
    this.newAssets = newAssets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundHistoryEventViewModel fundHistoryEventViewModel = (FundHistoryEventViewModel) o;
    return Objects.equals(this.date, fundHistoryEventViewModel.date) &&
        Objects.equals(this.type, fundHistoryEventViewModel.type) &&
        Objects.equals(this.description, fundHistoryEventViewModel.description) &&
        Objects.equals(this.logoUrl, fundHistoryEventViewModel.logoUrl) &&
        Objects.equals(this.trades, fundHistoryEventViewModel.trades) &&
        Objects.equals(this.newAssets, fundHistoryEventViewModel.newAssets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, type, description, logoUrl, trades, newAssets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundHistoryEventViewModel {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    trades: ").append(toIndentedString(trades)).append("\n");
    sb.append("    newAssets: ").append(toIndentedString(newAssets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(date);
    out.writeValue(type);
    out.writeValue(description);
    out.writeValue(logoUrl);
    out.writeValue(trades);
    out.writeValue(newAssets);
  }

  FundHistoryEventViewModel(Parcel in) {
    date = (DateTime)in.readValue(DateTime.class.getClassLoader());
    type = (FundHistoryEventType)in.readValue(FundHistoryEventType.class.getClassLoader());
    description = (String)in.readValue(null);
    logoUrl = (String)in.readValue(null);
    trades = (List<FundTradingEventViewModel>)in.readValue(FundTradingEventViewModel.class.getClassLoader());
    newAssets = (List<FundAssetPartWithIcon>)in.readValue(FundAssetPartWithIcon.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<FundHistoryEventViewModel> CREATOR = new Parcelable.Creator<FundHistoryEventViewModel>() {
    public FundHistoryEventViewModel createFromParcel(Parcel in) {
      return new FundHistoryEventViewModel(in);
    }
    public FundHistoryEventViewModel[] newArray(int size) {
      return new FundHistoryEventViewModel[size];
    }
  };
}
