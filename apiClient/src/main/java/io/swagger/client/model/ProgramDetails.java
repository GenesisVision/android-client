/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import org.joda.time.DateTime;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * ProgramDetails
 */

public class ProgramDetails
{
	@SerializedName("id")
	private UUID id = null;

	@SerializedName("avatar")
	private String avatar = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("level")
	private Integer level = null;

	@SerializedName("periodDuration")
	private Integer periodDuration = null;

	@SerializedName("periodDateStart")
	private DateTime periodDateStart = null;

	@SerializedName("periodDateEnd")
	private DateTime periodDateEnd = null;

	@SerializedName("availableForInvestment")
	private Double availableForInvestment = null;

	@SerializedName("manager")
	private ManagerProfile manager = null;

	@SerializedName("statistic")
	private ProgramDetailsListStatistic statistic = null;

	@SerializedName("chart")
	private List<ChartSimple> chart = null;

	@SerializedName("personalProgramDetails")
	private PersonalProgramDetailsList personalProgramDetails = null;

	public ProgramDetails id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@ApiModelProperty(value = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public ProgramDetails avatar(String avatar) {
		this.avatar = avatar;
		return this;
	}

	/**
	 * Get avatar
	 *
	 * @return avatar
	 **/
	@ApiModelProperty(value = "")
	public String getAvatar() {
		return avatar;
	}

	public void setAvatar(String avatar) {
		this.avatar = avatar;
	}

	public ProgramDetails title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@ApiModelProperty(value = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public ProgramDetails description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@ApiModelProperty(value = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public ProgramDetails currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@ApiModelProperty(value = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public ProgramDetails level(Integer level) {
		this.level = level;
		return this;
	}

	/**
	 * Get level
	 *
	 * @return level
	 **/
	@ApiModelProperty(value = "")
	public Integer getLevel() {
		return level;
	}

	public void setLevel(Integer level) {
		this.level = level;
	}

	public ProgramDetails periodDuration(Integer periodDuration) {
		this.periodDuration = periodDuration;
		return this;
	}

	/**
	 * Get periodDuration
	 *
	 * @return periodDuration
	 **/
	@ApiModelProperty(value = "")
	public Integer getPeriodDuration() {
		return periodDuration;
	}

	public void setPeriodDuration(Integer periodDuration) {
		this.periodDuration = periodDuration;
	}

	public ProgramDetails periodDateStart(DateTime periodDateStart) {
		this.periodDateStart = periodDateStart;
		return this;
	}

	/**
	 * Get periodDateStart
	 *
	 * @return periodDateStart
	 **/
	@ApiModelProperty(value = "")
	public DateTime getPeriodDateStart() {
		return periodDateStart;
	}

	public void setPeriodDateStart(DateTime periodDateStart) {
		this.periodDateStart = periodDateStart;
	}

	public ProgramDetails periodDateEnd(DateTime periodDateEnd) {
		this.periodDateEnd = periodDateEnd;
		return this;
	}

	/**
	 * Get periodDateEnd
	 *
	 * @return periodDateEnd
	 **/
	@ApiModelProperty(value = "")
	public DateTime getPeriodDateEnd() {
		return periodDateEnd;
	}

	public void setPeriodDateEnd(DateTime periodDateEnd) {
		this.periodDateEnd = periodDateEnd;
	}

	public ProgramDetails availableForInvestment(Double availableForInvestment) {
		this.availableForInvestment = availableForInvestment;
		return this;
	}

	/**
	 * Get availableForInvestment
	 *
	 * @return availableForInvestment
	 **/
	@ApiModelProperty(value = "")
	public Double getAvailableForInvestment() {
		return availableForInvestment;
	}

	public void setAvailableForInvestment(Double availableForInvestment) {
		this.availableForInvestment = availableForInvestment;
	}

	public ProgramDetails manager(ManagerProfile manager) {
		this.manager = manager;
		return this;
	}

	/**
	 * Get manager
	 *
	 * @return manager
	 **/
	@ApiModelProperty(value = "")
	public ManagerProfile getManager() {
		return manager;
	}

	public void setManager(ManagerProfile manager) {
		this.manager = manager;
	}

	public ProgramDetails statistic(ProgramDetailsListStatistic statistic) {
		this.statistic = statistic;
		return this;
	}

	/**
	 * Get statistic
	 *
	 * @return statistic
	 **/
	@ApiModelProperty(value = "")
	public ProgramDetailsListStatistic getStatistic() {
		return statistic;
	}

	public void setStatistic(ProgramDetailsListStatistic statistic) {
		this.statistic = statistic;
	}

	public ProgramDetails chart(List<ChartSimple> chart) {
		this.chart = chart;
		return this;
	}

	public ProgramDetails addChartItem(ChartSimple chartItem) {
		if (this.chart == null) {
			this.chart = new ArrayList<ChartSimple>();
		}
		this.chart.add(chartItem);
		return this;
	}

	/**
	 * Get chart
	 *
	 * @return chart
	 **/
	@ApiModelProperty(value = "")
	public List<ChartSimple> getChart() {
		return chart;
	}

	public void setChart(List<ChartSimple> chart) {
		this.chart = chart;
	}

	public ProgramDetails personalProgramDetails(PersonalProgramDetailsList personalProgramDetails) {
		this.personalProgramDetails = personalProgramDetails;
		return this;
	}

	/**
	 * Fields for authorized user
	 *
	 * @return personalProgramDetails
	 **/
	@ApiModelProperty(value = "Fields for authorized user")
	public PersonalProgramDetailsList getPersonalProgramDetails() {
		return personalProgramDetails;
	}

	public void setPersonalProgramDetails(PersonalProgramDetailsList personalProgramDetails) {
		this.personalProgramDetails = personalProgramDetails;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProgramDetails programDetails = (ProgramDetails) o;
		return Objects.equals(this.id, programDetails.id) &&
				Objects.equals(this.avatar, programDetails.avatar) &&
				Objects.equals(this.title, programDetails.title) &&
				Objects.equals(this.description, programDetails.description) &&
				Objects.equals(this.currency, programDetails.currency) &&
				Objects.equals(this.level, programDetails.level) &&
				Objects.equals(this.periodDuration, programDetails.periodDuration) &&
				Objects.equals(this.periodDateStart, programDetails.periodDateStart) &&
				Objects.equals(this.periodDateEnd, programDetails.periodDateEnd) &&
				Objects.equals(this.availableForInvestment, programDetails.availableForInvestment) &&
				Objects.equals(this.manager, programDetails.manager) &&
				Objects.equals(this.statistic, programDetails.statistic) &&
				Objects.equals(this.chart, programDetails.chart) &&
				Objects.equals(this.personalProgramDetails, programDetails.personalProgramDetails);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, avatar, title, description, currency, level, periodDuration, periodDateStart, periodDateEnd, availableForInvestment, manager, statistic, chart, personalProgramDetails);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProgramDetails {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    level: ").append(toIndentedString(level)).append("\n");
		sb.append("    periodDuration: ").append(toIndentedString(periodDuration)).append("\n");
		sb.append("    periodDateStart: ").append(toIndentedString(periodDateStart)).append("\n");
		sb.append("    periodDateEnd: ").append(toIndentedString(periodDateEnd)).append("\n");
		sb.append("    availableForInvestment: ").append(toIndentedString(availableForInvestment)).append("\n");
		sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
		sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
		sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
		sb.append("    personalProgramDetails: ").append(toIndentedString(personalProgramDetails)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

