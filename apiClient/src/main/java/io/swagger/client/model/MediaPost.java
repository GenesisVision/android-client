/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * MediaPost
 */


public class MediaPost implements Parcelable
{
	public static final Parcelable.Creator<MediaPost> CREATOR = new Parcelable.Creator<MediaPost>()
	{
		public MediaPost createFromParcel(Parcel in) {
			return new MediaPost(in);
		}

		public MediaPost[] newArray(int size) {
			return new MediaPost[size];
		}
	};

	@SerializedName("id")
	private UUID id = null;

	@SerializedName("url")
	private String url = null;

	@SerializedName("type")
	private SocialLinkType type = null;

	@SerializedName("author")
	private String author = null;

	@SerializedName("authorUrl")
	private String authorUrl = null;

	@SerializedName("authorLogoUrl")
	private String authorLogoUrl = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("text")
	private String text = null;

	@SerializedName("date")
	private DateTime date = null;

	@SerializedName("likesCount")
	private Integer likesCount = null;

	@SerializedName("rePostsCount")
	private Integer rePostsCount = null;

	@SerializedName("commentsCount")
	private Integer commentsCount = null;

	@SerializedName("image")
	private PostImage image = null;

	public MediaPost() {
	}

	MediaPost(Parcel in) {
		id = (UUID) in.readValue(UUID.class.getClassLoader());
		url = (String) in.readValue(null);
		type = (SocialLinkType) in.readValue(SocialLinkType.class.getClassLoader());
		author = (String) in.readValue(null);
		authorUrl = (String) in.readValue(null);
		authorLogoUrl = (String) in.readValue(null);
		title = (String) in.readValue(null);
		text = (String) in.readValue(null);
		date = (DateTime) in.readValue(DateTime.class.getClassLoader());
		likesCount = (Integer) in.readValue(null);
		rePostsCount = (Integer) in.readValue(null);
		commentsCount = (Integer) in.readValue(null);
		image = (PostImage) in.readValue(PostImage.class.getClassLoader());
	}

	public MediaPost id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@Schema(description = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public MediaPost url(String url) {
		this.url = url;
		return this;
	}

	/**
	 * Get url
	 *
	 * @return url
	 **/
	@Schema(description = "")
	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public MediaPost type(SocialLinkType type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 *
	 * @return type
	 **/
	@Schema(description = "")
	public SocialLinkType getType() {
		return type;
	}

	public void setType(SocialLinkType type) {
		this.type = type;
	}

	public MediaPost author(String author) {
		this.author = author;
		return this;
	}

	/**
	 * Get author
	 *
	 * @return author
	 **/
	@Schema(description = "")
	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public MediaPost authorUrl(String authorUrl) {
		this.authorUrl = authorUrl;
		return this;
	}

	/**
	 * Get authorUrl
	 *
	 * @return authorUrl
	 **/
	@Schema(description = "")
	public String getAuthorUrl() {
		return authorUrl;
	}

	public void setAuthorUrl(String authorUrl) {
		this.authorUrl = authorUrl;
	}

	public MediaPost authorLogoUrl(String authorLogoUrl) {
		this.authorLogoUrl = authorLogoUrl;
		return this;
	}

	/**
	 * Get authorLogoUrl
	 *
	 * @return authorLogoUrl
	 **/
	@Schema(description = "")
	public String getAuthorLogoUrl() {
		return authorLogoUrl;
	}

	public void setAuthorLogoUrl(String authorLogoUrl) {
		this.authorLogoUrl = authorLogoUrl;
	}

	public MediaPost title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@Schema(description = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public MediaPost text(String text) {
		this.text = text;
		return this;
	}

	/**
	 * Get text
	 *
	 * @return text
	 **/
	@Schema(description = "")
	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public MediaPost date(DateTime date) {
		this.date = date;
		return this;
	}

	/**
	 * Get date
	 *
	 * @return date
	 **/
	@Schema(description = "")
	public DateTime getDate() {
		return date;
	}

	public void setDate(DateTime date) {
		this.date = date;
	}

	public MediaPost likesCount(Integer likesCount) {
		this.likesCount = likesCount;
		return this;
	}

	/**
	 * Get likesCount
	 *
	 * @return likesCount
	 **/
	@Schema(description = "")
	public Integer getLikesCount() {
		return likesCount;
	}

	public void setLikesCount(Integer likesCount) {
		this.likesCount = likesCount;
	}

	public MediaPost rePostsCount(Integer rePostsCount) {
		this.rePostsCount = rePostsCount;
		return this;
	}

	/**
	 * Get rePostsCount
	 *
	 * @return rePostsCount
	 **/
	@Schema(description = "")
	public Integer getRePostsCount() {
		return rePostsCount;
	}

	public void setRePostsCount(Integer rePostsCount) {
		this.rePostsCount = rePostsCount;
	}

	public MediaPost commentsCount(Integer commentsCount) {
		this.commentsCount = commentsCount;
		return this;
	}

	/**
	 * Get commentsCount
	 *
	 * @return commentsCount
	 **/
	@Schema(description = "")
	public Integer getCommentsCount() {
		return commentsCount;
	}

	public void setCommentsCount(Integer commentsCount) {
		this.commentsCount = commentsCount;
	}

	public MediaPost image(PostImage image) {
		this.image = image;
		return this;
	}

	/**
	 * Get image
	 *
	 * @return image
	 **/
	@Schema(description = "")
	public PostImage getImage() {
		return image;
	}

	public void setImage(PostImage image) {
		this.image = image;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		MediaPost mediaPost = (MediaPost) o;
		return Objects.equals(this.id, mediaPost.id) &&
				Objects.equals(this.url, mediaPost.url) &&
				Objects.equals(this.type, mediaPost.type) &&
				Objects.equals(this.author, mediaPost.author) &&
				Objects.equals(this.authorUrl, mediaPost.authorUrl) &&
				Objects.equals(this.authorLogoUrl, mediaPost.authorLogoUrl) &&
				Objects.equals(this.title, mediaPost.title) &&
				Objects.equals(this.text, mediaPost.text) &&
				Objects.equals(this.date, mediaPost.date) &&
				Objects.equals(this.likesCount, mediaPost.likesCount) &&
				Objects.equals(this.rePostsCount, mediaPost.rePostsCount) &&
				Objects.equals(this.commentsCount, mediaPost.commentsCount) &&
				Objects.equals(this.image, mediaPost.image);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, url, type, author, authorUrl, authorLogoUrl, title, text, date, likesCount, rePostsCount, commentsCount, image);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class MediaPost {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    url: ").append(toIndentedString(url)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    author: ").append(toIndentedString(author)).append("\n");
		sb.append("    authorUrl: ").append(toIndentedString(authorUrl)).append("\n");
		sb.append("    authorLogoUrl: ").append(toIndentedString(authorLogoUrl)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    text: ").append(toIndentedString(text)).append("\n");
		sb.append("    date: ").append(toIndentedString(date)).append("\n");
		sb.append("    likesCount: ").append(toIndentedString(likesCount)).append("\n");
		sb.append("    rePostsCount: ").append(toIndentedString(rePostsCount)).append("\n");
		sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
		sb.append("    image: ").append(toIndentedString(image)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(id);
		out.writeValue(url);
		out.writeValue(type);
		out.writeValue(author);
		out.writeValue(authorUrl);
		out.writeValue(authorLogoUrl);
		out.writeValue(title);
		out.writeValue(text);
		out.writeValue(date);
		out.writeValue(likesCount);
		out.writeValue(rePostsCount);
		out.writeValue(commentsCount);
		out.writeValue(image);
	}

	public int describeContents() {
		return 0;
	}
}
