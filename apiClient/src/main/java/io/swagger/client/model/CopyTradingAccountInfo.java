/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * CopyTradingAccountInfo
 */

public class CopyTradingAccountInfo
{
	@SerializedName("id")
	private UUID id = null;

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("balance")
	private Double balance = null;

	@SerializedName("equity")
	private Double equity = null;

	@SerializedName("freeMargin")
	private Double freeMargin = null;

	@SerializedName("marginLevel")
	private Double marginLevel = null;

	@SerializedName("available")
	private Double available = null;

	public CopyTradingAccountInfo id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@ApiModelProperty(value = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public CopyTradingAccountInfo currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@ApiModelProperty(value = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public CopyTradingAccountInfo logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@ApiModelProperty(value = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public CopyTradingAccountInfo title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@ApiModelProperty(value = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public CopyTradingAccountInfo balance(Double balance) {
		this.balance = balance;
		return this;
	}

	/**
	 * Get balance
	 *
	 * @return balance
	 **/
	@ApiModelProperty(value = "")
	public Double getBalance() {
		return balance;
	}

	public void setBalance(Double balance) {
		this.balance = balance;
	}

	public CopyTradingAccountInfo equity(Double equity) {
		this.equity = equity;
		return this;
	}

	/**
	 * Get equity
	 *
	 * @return equity
	 **/
	@ApiModelProperty(value = "")
	public Double getEquity() {
		return equity;
	}

	public void setEquity(Double equity) {
		this.equity = equity;
	}

	public CopyTradingAccountInfo freeMargin(Double freeMargin) {
		this.freeMargin = freeMargin;
		return this;
	}

	/**
	 * Get freeMargin
	 *
	 * @return freeMargin
	 **/
	@ApiModelProperty(value = "")
	public Double getFreeMargin() {
		return freeMargin;
	}

	public void setFreeMargin(Double freeMargin) {
		this.freeMargin = freeMargin;
	}

	public CopyTradingAccountInfo marginLevel(Double marginLevel) {
		this.marginLevel = marginLevel;
		return this;
	}

	/**
	 * Get marginLevel
	 *
	 * @return marginLevel
	 **/
	@ApiModelProperty(value = "")
	public Double getMarginLevel() {
		return marginLevel;
	}

	public void setMarginLevel(Double marginLevel) {
		this.marginLevel = marginLevel;
	}

	/**
	 * Get available
	 *
	 * @return available
	 **/
	@ApiModelProperty(value = "")
	public Double getAvailable() {
		return available;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		CopyTradingAccountInfo copyTradingAccountInfo = (CopyTradingAccountInfo) o;
		return Objects.equals(this.id, copyTradingAccountInfo.id) &&
				Objects.equals(this.currency, copyTradingAccountInfo.currency) &&
				Objects.equals(this.logo, copyTradingAccountInfo.logo) &&
				Objects.equals(this.title, copyTradingAccountInfo.title) &&
				Objects.equals(this.balance, copyTradingAccountInfo.balance) &&
				Objects.equals(this.equity, copyTradingAccountInfo.equity) &&
				Objects.equals(this.freeMargin, copyTradingAccountInfo.freeMargin) &&
				Objects.equals(this.marginLevel, copyTradingAccountInfo.marginLevel) &&
				Objects.equals(this.available, copyTradingAccountInfo.available);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, currency, logo, title, balance, equity, freeMargin, marginLevel, available);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CopyTradingAccountInfo {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
		sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
		sb.append("    freeMargin: ").append(toIndentedString(freeMargin)).append("\n");
		sb.append("    marginLevel: ").append(toIndentedString(marginLevel)).append("\n");
		sb.append("    available: ").append(toIndentedString(available)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		BTC("BTC"),

		ETH("ETH"),

		USDT("USDT"),

		GVT("GVT"),

		UNDEFINED("Undefined"),

		ADA("ADA"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

