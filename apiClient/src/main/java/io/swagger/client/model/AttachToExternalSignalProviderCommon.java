/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * AttachToExternalSignalProviderCommon
 */


public class AttachToExternalSignalProviderCommon implements Parcelable
{
	public static final Parcelable.Creator<AttachToExternalSignalProviderCommon> CREATOR = new Parcelable.Creator<AttachToExternalSignalProviderCommon>()
	{
		public AttachToExternalSignalProviderCommon createFromParcel(Parcel in) {
			return new AttachToExternalSignalProviderCommon(in);
		}

		public AttachToExternalSignalProviderCommon[] newArray(int size) {
			return new AttachToExternalSignalProviderCommon[size];
		}
	};

	@SerializedName("mode")
	private SubscriptionMode mode = null;

	@SerializedName("percent")
	private Double percent = null;

	@SerializedName("openTolerancePercent")
	private Double openTolerancePercent = null;

	@SerializedName("fixedVolume")
	private Double fixedVolume = null;

	@SerializedName("fixedCurrency")
	private Currency fixedCurrency = null;

	@SerializedName("initialDepositCurrency")
	private Currency initialDepositCurrency = null;

	@SerializedName("initialDepositAmount")
	private Double initialDepositAmount = null;

	public AttachToExternalSignalProviderCommon() {
	}

	AttachToExternalSignalProviderCommon(Parcel in) {
		mode = (SubscriptionMode) in.readValue(SubscriptionMode.class.getClassLoader());
		percent = (Double) in.readValue(null);
		openTolerancePercent = (Double) in.readValue(null);
		fixedVolume = (Double) in.readValue(null);
		fixedCurrency = (Currency) in.readValue(Currency.class.getClassLoader());
		initialDepositCurrency = (Currency) in.readValue(Currency.class.getClassLoader());
		initialDepositAmount = (Double) in.readValue(null);
	}

	public AttachToExternalSignalProviderCommon mode(SubscriptionMode mode) {
		this.mode = mode;
		return this;
	}

	/**
	 * Get mode
	 *
	 * @return mode
	 **/
	@Schema(description = "")
	public SubscriptionMode getMode() {
		return mode;
	}

	public void setMode(SubscriptionMode mode) {
		this.mode = mode;
	}

	public AttachToExternalSignalProviderCommon percent(Double percent) {
		this.percent = percent;
		return this;
	}

	/**
	 * Get percent
	 *
	 * @return percent
	 **/
	@Schema(description = "")
	public Double getPercent() {
		return percent;
	}

	public void setPercent(Double percent) {
		this.percent = percent;
	}

	public AttachToExternalSignalProviderCommon openTolerancePercent(Double openTolerancePercent) {
		this.openTolerancePercent = openTolerancePercent;
		return this;
	}

	/**
	 * Get openTolerancePercent
	 *
	 * @return openTolerancePercent
	 **/
	@Schema(description = "")
	public Double getOpenTolerancePercent() {
		return openTolerancePercent;
	}

	public void setOpenTolerancePercent(Double openTolerancePercent) {
		this.openTolerancePercent = openTolerancePercent;
	}

	public AttachToExternalSignalProviderCommon fixedVolume(Double fixedVolume) {
		this.fixedVolume = fixedVolume;
		return this;
	}

	/**
	 * Get fixedVolume
	 *
	 * @return fixedVolume
	 **/
	@Schema(description = "")
	public Double getFixedVolume() {
		return fixedVolume;
	}

	public void setFixedVolume(Double fixedVolume) {
		this.fixedVolume = fixedVolume;
	}

	public AttachToExternalSignalProviderCommon fixedCurrency(Currency fixedCurrency) {
		this.fixedCurrency = fixedCurrency;
		return this;
	}

	/**
	 * Get fixedCurrency
	 *
	 * @return fixedCurrency
	 **/
	@Schema(description = "")
	public Currency getFixedCurrency() {
		return fixedCurrency;
	}

	public void setFixedCurrency(Currency fixedCurrency) {
		this.fixedCurrency = fixedCurrency;
	}

	public AttachToExternalSignalProviderCommon initialDepositCurrency(Currency initialDepositCurrency) {
		this.initialDepositCurrency = initialDepositCurrency;
		return this;
	}

	/**
	 * Get initialDepositCurrency
	 *
	 * @return initialDepositCurrency
	 **/
	@Schema(description = "")
	public Currency getInitialDepositCurrency() {
		return initialDepositCurrency;
	}

	public void setInitialDepositCurrency(Currency initialDepositCurrency) {
		this.initialDepositCurrency = initialDepositCurrency;
	}

	public AttachToExternalSignalProviderCommon initialDepositAmount(Double initialDepositAmount) {
		this.initialDepositAmount = initialDepositAmount;
		return this;
	}

	/**
	 * Get initialDepositAmount
	 *
	 * @return initialDepositAmount
	 **/
	@Schema(description = "")
	public Double getInitialDepositAmount() {
		return initialDepositAmount;
	}

	public void setInitialDepositAmount(Double initialDepositAmount) {
		this.initialDepositAmount = initialDepositAmount;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AttachToExternalSignalProviderCommon attachToExternalSignalProviderCommon = (AttachToExternalSignalProviderCommon) o;
		return Objects.equals(this.mode, attachToExternalSignalProviderCommon.mode) &&
				Objects.equals(this.percent, attachToExternalSignalProviderCommon.percent) &&
				Objects.equals(this.openTolerancePercent, attachToExternalSignalProviderCommon.openTolerancePercent) &&
				Objects.equals(this.fixedVolume, attachToExternalSignalProviderCommon.fixedVolume) &&
				Objects.equals(this.fixedCurrency, attachToExternalSignalProviderCommon.fixedCurrency) &&
				Objects.equals(this.initialDepositCurrency, attachToExternalSignalProviderCommon.initialDepositCurrency) &&
				Objects.equals(this.initialDepositAmount, attachToExternalSignalProviderCommon.initialDepositAmount);
	}

	@Override
	public int hashCode() {
		return Objects.hash(mode, percent, openTolerancePercent, fixedVolume, fixedCurrency, initialDepositCurrency, initialDepositAmount);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AttachToExternalSignalProviderCommon {\n");

		sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
		sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
		sb.append("    openTolerancePercent: ").append(toIndentedString(openTolerancePercent)).append("\n");
		sb.append("    fixedVolume: ").append(toIndentedString(fixedVolume)).append("\n");
		sb.append("    fixedCurrency: ").append(toIndentedString(fixedCurrency)).append("\n");
		sb.append("    initialDepositCurrency: ").append(toIndentedString(initialDepositCurrency)).append("\n");
		sb.append("    initialDepositAmount: ").append(toIndentedString(initialDepositAmount)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(mode);
		out.writeValue(percent);
		out.writeValue(openTolerancePercent);
		out.writeValue(fixedVolume);
		out.writeValue(fixedCurrency);
		out.writeValue(initialDepositCurrency);
		out.writeValue(initialDepositAmount);
	}

	public int describeContents() {
		return 0;
	}
}
