/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.TradesDelay;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * ProgramUpdate
 */


public class ProgramUpdate implements Parcelable {
  @SerializedName("title")
  private String title = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("logo")
  private String logo = null;

  @SerializedName("entryFee")
  private Double entryFee = null;

  @SerializedName("exitFee")
  private Double exitFee = null;

  @SerializedName("successFee")
  private Double successFee = null;

  @SerializedName("stopOutLevel")
  private Double stopOutLevel = null;

  @SerializedName("investmentLimit")
  private Double investmentLimit = null;

  @SerializedName("tradesDelay")
  private TradesDelay tradesDelay = null;

  @SerializedName("hourProcessing")
  private Integer hourProcessing = null;

  @SerializedName("isProcessingRealTime")
  private Boolean isProcessingRealTime = null;

  public ProgramUpdate() {
  }
  public ProgramUpdate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ProgramUpdate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProgramUpdate logo(String logo) {
    this.logo = logo;
    return this;
  }

   /**
   * Get logo
   * @return logo
  **/
  @Schema(description = "")
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public ProgramUpdate entryFee(Double entryFee) {
    this.entryFee = entryFee;
    return this;
  }

   /**
   * Get entryFee
   * @return entryFee
  **/
  @Schema(description = "")
  public Double getEntryFee() {
    return entryFee;
  }

  public void setEntryFee(Double entryFee) {
    this.entryFee = entryFee;
  }

  public ProgramUpdate exitFee(Double exitFee) {
    this.exitFee = exitFee;
    return this;
  }

   /**
   * Get exitFee
   * @return exitFee
  **/
  @Schema(description = "")
  public Double getExitFee() {
    return exitFee;
  }

  public void setExitFee(Double exitFee) {
    this.exitFee = exitFee;
  }

  public ProgramUpdate successFee(Double successFee) {
    this.successFee = successFee;
    return this;
  }

   /**
   * Get successFee
   * @return successFee
  **/
  @Schema(description = "")
  public Double getSuccessFee() {
    return successFee;
  }

  public void setSuccessFee(Double successFee) {
    this.successFee = successFee;
  }

  public ProgramUpdate stopOutLevel(Double stopOutLevel) {
    this.stopOutLevel = stopOutLevel;
    return this;
  }

   /**
   * Get stopOutLevel
   * @return stopOutLevel
  **/
  @Schema(description = "")
  public Double getStopOutLevel() {
    return stopOutLevel;
  }

  public void setStopOutLevel(Double stopOutLevel) {
    this.stopOutLevel = stopOutLevel;
  }

  public ProgramUpdate investmentLimit(Double investmentLimit) {
    this.investmentLimit = investmentLimit;
    return this;
  }

   /**
   * Get investmentLimit
   * @return investmentLimit
  **/
  @Schema(description = "")
  public Double getInvestmentLimit() {
    return investmentLimit;
  }

  public void setInvestmentLimit(Double investmentLimit) {
    this.investmentLimit = investmentLimit;
  }

  public ProgramUpdate tradesDelay(TradesDelay tradesDelay) {
    this.tradesDelay = tradesDelay;
    return this;
  }

   /**
   * Get tradesDelay
   * @return tradesDelay
  **/
  @Schema(description = "")
  public TradesDelay getTradesDelay() {
    return tradesDelay;
  }

  public void setTradesDelay(TradesDelay tradesDelay) {
    this.tradesDelay = tradesDelay;
  }

  public ProgramUpdate hourProcessing(Integer hourProcessing) {
    this.hourProcessing = hourProcessing;
    return this;
  }

   /**
   * Get hourProcessing
   * @return hourProcessing
  **/
  @Schema(description = "")
  public Integer getHourProcessing() {
    return hourProcessing;
  }

  public void setHourProcessing(Integer hourProcessing) {
    this.hourProcessing = hourProcessing;
  }

  public ProgramUpdate isProcessingRealTime(Boolean isProcessingRealTime) {
    this.isProcessingRealTime = isProcessingRealTime;
    return this;
  }

   /**
   * Get isProcessingRealTime
   * @return isProcessingRealTime
  **/
  @Schema(description = "")
  public Boolean isIsProcessingRealTime() {
    return isProcessingRealTime;
  }

  public void setIsProcessingRealTime(Boolean isProcessingRealTime) {
    this.isProcessingRealTime = isProcessingRealTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgramUpdate programUpdate = (ProgramUpdate) o;
    return Objects.equals(this.title, programUpdate.title) &&
        Objects.equals(this.description, programUpdate.description) &&
        Objects.equals(this.logo, programUpdate.logo) &&
        Objects.equals(this.entryFee, programUpdate.entryFee) &&
        Objects.equals(this.exitFee, programUpdate.exitFee) &&
        Objects.equals(this.successFee, programUpdate.successFee) &&
        Objects.equals(this.stopOutLevel, programUpdate.stopOutLevel) &&
        Objects.equals(this.investmentLimit, programUpdate.investmentLimit) &&
        Objects.equals(this.tradesDelay, programUpdate.tradesDelay) &&
        Objects.equals(this.hourProcessing, programUpdate.hourProcessing) &&
        Objects.equals(this.isProcessingRealTime, programUpdate.isProcessingRealTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, logo, entryFee, exitFee, successFee, stopOutLevel, investmentLimit, tradesDelay, hourProcessing, isProcessingRealTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgramUpdate {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    entryFee: ").append(toIndentedString(entryFee)).append("\n");
    sb.append("    exitFee: ").append(toIndentedString(exitFee)).append("\n");
    sb.append("    successFee: ").append(toIndentedString(successFee)).append("\n");
    sb.append("    stopOutLevel: ").append(toIndentedString(stopOutLevel)).append("\n");
    sb.append("    investmentLimit: ").append(toIndentedString(investmentLimit)).append("\n");
    sb.append("    tradesDelay: ").append(toIndentedString(tradesDelay)).append("\n");
    sb.append("    hourProcessing: ").append(toIndentedString(hourProcessing)).append("\n");
    sb.append("    isProcessingRealTime: ").append(toIndentedString(isProcessingRealTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(title);
    out.writeValue(description);
    out.writeValue(logo);
    out.writeValue(entryFee);
    out.writeValue(exitFee);
    out.writeValue(successFee);
    out.writeValue(stopOutLevel);
    out.writeValue(investmentLimit);
    out.writeValue(tradesDelay);
    out.writeValue(hourProcessing);
    out.writeValue(isProcessingRealTime);
  }

  ProgramUpdate(Parcel in) {
    title = (String)in.readValue(null);
    description = (String)in.readValue(null);
    logo = (String)in.readValue(null);
    entryFee = (Double)in.readValue(null);
    exitFee = (Double)in.readValue(null);
    successFee = (Double)in.readValue(null);
    stopOutLevel = (Double)in.readValue(null);
    investmentLimit = (Double)in.readValue(null);
    tradesDelay = (TradesDelay)in.readValue(TradesDelay.class.getClassLoader());
    hourProcessing = (Integer)in.readValue(null);
    isProcessingRealTime = (Boolean)in.readValue(null);
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<ProgramUpdate> CREATOR = new Parcelable.Creator<ProgramUpdate>() {
    public ProgramUpdate createFromParcel(Parcel in) {
      return new ProgramUpdate(in);
    }
    public ProgramUpdate[] newArray(int size) {
      return new ProgramUpdate[size];
    }
  };
}
