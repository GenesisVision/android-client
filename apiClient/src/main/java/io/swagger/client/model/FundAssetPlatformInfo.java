/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * FundAssetPlatformInfo
 */


public class FundAssetPlatformInfo implements Parcelable
{
	public static final Parcelable.Creator<FundAssetPlatformInfo> CREATOR = new Parcelable.Creator<FundAssetPlatformInfo>()
	{
		public FundAssetPlatformInfo createFromParcel(Parcel in) {
			return new FundAssetPlatformInfo(in);
		}

		public FundAssetPlatformInfo[] newArray(int size) {
			return new FundAssetPlatformInfo[size];
		}
	};

	@SerializedName("facets")
	private List<AssetFacet> facets = null;

	@SerializedName("assets")
	private List<PlatformAsset> assets = null;

	@SerializedName("minInvestAmountIntoFund")
	private List<AmountWithCurrency> minInvestAmountIntoFund = null;

	@SerializedName("createFundInfo")
	private FundCreateAssetPlatformInfo createFundInfo = null;

	public FundAssetPlatformInfo() {
	}

	FundAssetPlatformInfo(Parcel in) {
		facets = (List<AssetFacet>) in.readValue(AssetFacet.class.getClassLoader());
		assets = (List<PlatformAsset>) in.readValue(PlatformAsset.class.getClassLoader());
		minInvestAmountIntoFund = (List<AmountWithCurrency>) in.readValue(AmountWithCurrency.class.getClassLoader());
		createFundInfo = (FundCreateAssetPlatformInfo) in.readValue(FundCreateAssetPlatformInfo.class.getClassLoader());
	}

	public FundAssetPlatformInfo facets(List<AssetFacet> facets) {
		this.facets = facets;
		return this;
	}

	public FundAssetPlatformInfo addFacetsItem(AssetFacet facetsItem) {
		if (this.facets == null) {
			this.facets = new ArrayList<AssetFacet>();
		}
		this.facets.add(facetsItem);
		return this;
	}

	/**
	 * Get facets
	 *
	 * @return facets
	 **/
	@Schema(description = "")
	public List<AssetFacet> getFacets() {
		return facets;
	}

	public void setFacets(List<AssetFacet> facets) {
		this.facets = facets;
	}

	public FundAssetPlatformInfo assets(List<PlatformAsset> assets) {
		this.assets = assets;
		return this;
	}

	public FundAssetPlatformInfo addAssetsItem(PlatformAsset assetsItem) {
		if (this.assets == null) {
			this.assets = new ArrayList<PlatformAsset>();
		}
		this.assets.add(assetsItem);
		return this;
	}

	/**
	 * Get assets
	 *
	 * @return assets
	 **/
	@Schema(description = "")
	public List<PlatformAsset> getAssets() {
		return assets;
	}

	public void setAssets(List<PlatformAsset> assets) {
		this.assets = assets;
	}

	public FundAssetPlatformInfo minInvestAmountIntoFund(List<AmountWithCurrency> minInvestAmountIntoFund) {
		this.minInvestAmountIntoFund = minInvestAmountIntoFund;
		return this;
	}

	public FundAssetPlatformInfo addMinInvestAmountIntoFundItem(AmountWithCurrency minInvestAmountIntoFundItem) {
		if (this.minInvestAmountIntoFund == null) {
			this.minInvestAmountIntoFund = new ArrayList<AmountWithCurrency>();
		}
		this.minInvestAmountIntoFund.add(minInvestAmountIntoFundItem);
		return this;
	}

	/**
	 * Get minInvestAmountIntoFund
	 *
	 * @return minInvestAmountIntoFund
	 **/
	@Schema(description = "")
	public List<AmountWithCurrency> getMinInvestAmountIntoFund() {
		return minInvestAmountIntoFund;
	}

	public void setMinInvestAmountIntoFund(List<AmountWithCurrency> minInvestAmountIntoFund) {
		this.minInvestAmountIntoFund = minInvestAmountIntoFund;
	}

	public FundAssetPlatformInfo createFundInfo(FundCreateAssetPlatformInfo createFundInfo) {
		this.createFundInfo = createFundInfo;
		return this;
	}

	/**
	 * Get createFundInfo
	 *
	 * @return createFundInfo
	 **/
	@Schema(description = "")
	public FundCreateAssetPlatformInfo getCreateFundInfo() {
		return createFundInfo;
	}

	public void setCreateFundInfo(FundCreateAssetPlatformInfo createFundInfo) {
		this.createFundInfo = createFundInfo;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		FundAssetPlatformInfo fundAssetPlatformInfo = (FundAssetPlatformInfo) o;
		return Objects.equals(this.facets, fundAssetPlatformInfo.facets) &&
				Objects.equals(this.assets, fundAssetPlatformInfo.assets) &&
				Objects.equals(this.minInvestAmountIntoFund, fundAssetPlatformInfo.minInvestAmountIntoFund) &&
				Objects.equals(this.createFundInfo, fundAssetPlatformInfo.createFundInfo);
	}

	@Override
	public int hashCode() {
		return Objects.hash(facets, assets, minInvestAmountIntoFund, createFundInfo);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class FundAssetPlatformInfo {\n");

		sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
		sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
		sb.append("    minInvestAmountIntoFund: ").append(toIndentedString(minInvestAmountIntoFund)).append("\n");
		sb.append("    createFundInfo: ").append(toIndentedString(createFundInfo)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(facets);
		out.writeValue(assets);
		out.writeValue(minInvestAmountIntoFund);
		out.writeValue(createFundInfo);
	}

	public int describeContents() {
		return 0;
	}
}
