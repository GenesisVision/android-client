/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * TransactionDetatils
 */

public class TransactionDetatils
{
	@SerializedName("currencyFrom")
	private CurrencyFromEnum currencyFrom = null;

	@SerializedName("currencyTo")
	private CurrencyToEnum currencyTo = null;

	@SerializedName("type")
	private TypeEnum type = null;

	@SerializedName("programId")
	private UUID programId = null;

	@SerializedName("foundId")
	private UUID foundId = null;

	@SerializedName("name")
	private String name = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("entryFee")
	private Double entryFee = null;

	@SerializedName("gvCommission")
	private Double gvCommission = null;

	@SerializedName("exitFee")
	private Double exitFee = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("descriptionUrl")
	private String descriptionUrl = null;

	@SerializedName("fromAddress")
	private String fromAddress = null;

	@SerializedName("amountFrom")
	private Double amountFrom = null;

	@SerializedName("amountTo")
	private Double amountTo = null;

	@SerializedName("rateValue")
	private Double rateValue = null;

	public TransactionDetatils currencyFrom(CurrencyFromEnum currencyFrom) {
		this.currencyFrom = currencyFrom;
		return this;
	}

	/**
	 * Get currencyFrom
	 *
	 * @return currencyFrom
	 **/
	@ApiModelProperty(value = "")
	public CurrencyFromEnum getCurrencyFrom() {
		return currencyFrom;
	}

	public void setCurrencyFrom(CurrencyFromEnum currencyFrom) {
		this.currencyFrom = currencyFrom;
	}

	public TransactionDetatils currencyTo(CurrencyToEnum currencyTo) {
		this.currencyTo = currencyTo;
		return this;
	}

	/**
	 * Get currencyTo
	 *
	 * @return currencyTo
	 **/
	@ApiModelProperty(value = "")
	public CurrencyToEnum getCurrencyTo() {
		return currencyTo;
	}

	public void setCurrencyTo(CurrencyToEnum currencyTo) {
		this.currencyTo = currencyTo;
	}

	public TransactionDetatils type(TypeEnum type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 *
	 * @return type
	 **/
	@ApiModelProperty(value = "")
	public TypeEnum getType() {
		return type;
	}

	public void setType(TypeEnum type) {
		this.type = type;
	}

	public TransactionDetatils programId(UUID programId) {
		this.programId = programId;
		return this;
	}

	/**
	 * Get programId
	 *
	 * @return programId
	 **/
	@ApiModelProperty(value = "")
	public UUID getProgramId() {
		return programId;
	}

	public void setProgramId(UUID programId) {
		this.programId = programId;
	}

	public TransactionDetatils foundId(UUID foundId) {
		this.foundId = foundId;
		return this;
	}

	/**
	 * Get foundId
	 *
	 * @return foundId
	 **/
	@ApiModelProperty(value = "")
	public UUID getFoundId() {
		return foundId;
	}

	public void setFoundId(UUID foundId) {
		this.foundId = foundId;
	}

	public TransactionDetatils name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get name
	 *
	 * @return name
	 **/
	@ApiModelProperty(value = "")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public TransactionDetatils logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@ApiModelProperty(value = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public TransactionDetatils entryFee(Double entryFee) {
		this.entryFee = entryFee;
		return this;
	}

	/**
	 * Get entryFee
	 *
	 * @return entryFee
	 **/
	@ApiModelProperty(value = "")
	public Double getEntryFee() {
		return entryFee;
	}

	public void setEntryFee(Double entryFee) {
		this.entryFee = entryFee;
	}

	public TransactionDetatils gvCommission(Double gvCommission) {
		this.gvCommission = gvCommission;
		return this;
	}

	/**
	 * Get gvCommission
	 *
	 * @return gvCommission
	 **/
	@ApiModelProperty(value = "")
	public Double getGvCommission() {
		return gvCommission;
	}

	public void setGvCommission(Double gvCommission) {
		this.gvCommission = gvCommission;
	}

	public TransactionDetatils exitFee(Double exitFee) {
		this.exitFee = exitFee;
		return this;
	}

	/**
	 * Get exitFee
	 *
	 * @return exitFee
	 **/
	@ApiModelProperty(value = "")
	public Double getExitFee() {
		return exitFee;
	}

	public void setExitFee(Double exitFee) {
		this.exitFee = exitFee;
	}

	public TransactionDetatils description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@ApiModelProperty(value = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public TransactionDetatils descriptionUrl(String descriptionUrl) {
		this.descriptionUrl = descriptionUrl;
		return this;
	}

	/**
	 * Get descriptionUrl
	 *
	 * @return descriptionUrl
	 **/
	@ApiModelProperty(value = "")
	public String getDescriptionUrl() {
		return descriptionUrl;
	}

	public void setDescriptionUrl(String descriptionUrl) {
		this.descriptionUrl = descriptionUrl;
	}

	public TransactionDetatils fromAddress(String fromAddress) {
		this.fromAddress = fromAddress;
		return this;
	}

	/**
	 * Get fromAddress
	 *
	 * @return fromAddress
	 **/
	@ApiModelProperty(value = "")
	public String getFromAddress() {
		return fromAddress;
	}

	public void setFromAddress(String fromAddress) {
		this.fromAddress = fromAddress;
	}

	public TransactionDetatils amountFrom(Double amountFrom) {
		this.amountFrom = amountFrom;
		return this;
	}

	/**
	 * Get amountFrom
	 *
	 * @return amountFrom
	 **/
	@ApiModelProperty(value = "")
	public Double getAmountFrom() {
		return amountFrom;
	}

	public void setAmountFrom(Double amountFrom) {
		this.amountFrom = amountFrom;
	}

	public TransactionDetatils amountTo(Double amountTo) {
		this.amountTo = amountTo;
		return this;
	}

	/**
	 * Get amountTo
	 *
	 * @return amountTo
	 **/
	@ApiModelProperty(value = "")
	public Double getAmountTo() {
		return amountTo;
	}

	public void setAmountTo(Double amountTo) {
		this.amountTo = amountTo;
	}

	public TransactionDetatils rateValue(Double rateValue) {
		this.rateValue = rateValue;
		return this;
	}

	/**
	 * Get rateValue
	 *
	 * @return rateValue
	 **/
	@ApiModelProperty(value = "")
	public Double getRateValue() {
		return rateValue;
	}

	public void setRateValue(Double rateValue) {
		this.rateValue = rateValue;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		TransactionDetatils transactionDetatils = (TransactionDetatils) o;
		return Objects.equals(this.currencyFrom, transactionDetatils.currencyFrom) &&
				Objects.equals(this.currencyTo, transactionDetatils.currencyTo) &&
				Objects.equals(this.type, transactionDetatils.type) &&
				Objects.equals(this.programId, transactionDetatils.programId) &&
				Objects.equals(this.foundId, transactionDetatils.foundId) &&
				Objects.equals(this.name, transactionDetatils.name) &&
				Objects.equals(this.logo, transactionDetatils.logo) &&
				Objects.equals(this.entryFee, transactionDetatils.entryFee) &&
				Objects.equals(this.gvCommission, transactionDetatils.gvCommission) &&
				Objects.equals(this.exitFee, transactionDetatils.exitFee) &&
				Objects.equals(this.description, transactionDetatils.description) &&
				Objects.equals(this.descriptionUrl, transactionDetatils.descriptionUrl) &&
				Objects.equals(this.fromAddress, transactionDetatils.fromAddress) &&
				Objects.equals(this.amountFrom, transactionDetatils.amountFrom) &&
				Objects.equals(this.amountTo, transactionDetatils.amountTo) &&
				Objects.equals(this.rateValue, transactionDetatils.rateValue);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currencyFrom, currencyTo, type, programId, foundId, name, logo, entryFee, gvCommission, exitFee, description, descriptionUrl, fromAddress, amountFrom, amountTo, rateValue);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class TransactionDetatils {\n");

		sb.append("    currencyFrom: ").append(toIndentedString(currencyFrom)).append("\n");
		sb.append("    currencyTo: ").append(toIndentedString(currencyTo)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
		sb.append("    foundId: ").append(toIndentedString(foundId)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    entryFee: ").append(toIndentedString(entryFee)).append("\n");
		sb.append("    gvCommission: ").append(toIndentedString(gvCommission)).append("\n");
		sb.append("    exitFee: ").append(toIndentedString(exitFee)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    descriptionUrl: ").append(toIndentedString(descriptionUrl)).append("\n");
		sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
		sb.append("    amountFrom: ").append(toIndentedString(amountFrom)).append("\n");
		sb.append("    amountTo: ").append(toIndentedString(amountTo)).append("\n");
		sb.append("    rateValue: ").append(toIndentedString(rateValue)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currencyFrom
	 */
	@JsonAdapter(CurrencyFromEnum.Adapter.class)
	public enum CurrencyFromEnum
	{
		USD("USD"),

		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USDT("USDT"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		EUR("EUR");

		public static CurrencyFromEnum fromValue(String text) {
			for (CurrencyFromEnum b : CurrencyFromEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyFromEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyFromEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyFromEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyFromEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyFromEnum.fromValue(String.valueOf(value));
			}
		}
	}


	/**
	 * Gets or Sets currencyTo
	 */
	@JsonAdapter(CurrencyToEnum.Adapter.class)
	public enum CurrencyToEnum
	{
		USD("USD"),

		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USDT("USDT"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		EUR("EUR");

		public static CurrencyToEnum fromValue(String text) {
			for (CurrencyToEnum b : CurrencyToEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyToEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyToEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyToEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyToEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyToEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets type
	 */
	@JsonAdapter(TypeEnum.Adapter.class)
	public enum TypeEnum
	{
		INVESTINGPROGRAM("InvestingProgram"),

		INVESTINGFUND("InvestingFund"),

		WITHDRAWALPROGRAM("WithdrawalProgram"),

		WITHDRAWALFUND("WithdrawalFund"),

		EXTERNALWITHDRAWAL("ExternalWithdrawal"),

		EXTERNALDEPOSIT("ExternalDeposit");

		public static TypeEnum fromValue(String text) {
			for (TypeEnum b : TypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		TypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<TypeEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public TypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return TypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

