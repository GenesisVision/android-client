/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import org.joda.time.DateTime;

import java.io.IOException;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * SignalSubscriber
 */

public class SignalSubscriber
{
	@SerializedName("number")
	private Integer number = null;

	@SerializedName("trades")
	private Integer trades = null;

	@SerializedName("profit")
	private Double profit = null;

	@SerializedName("volume")
	private Double volume = null;

	@SerializedName("subscriptionDate")
	private DateTime subscriptionDate = null;

	@SerializedName("unsubscriptionDate")
	private DateTime unsubscriptionDate = null;

	@SerializedName("status")
	private StatusEnum status = null;

	public SignalSubscriber number(Integer number) {
		this.number = number;
		return this;
	}

	/**
	 * Get number
	 *
	 * @return number
	 **/
	@ApiModelProperty(value = "")
	public Integer getNumber() {
		return number;
	}

	public void setNumber(Integer number) {
		this.number = number;
	}

	public SignalSubscriber trades(Integer trades) {
		this.trades = trades;
		return this;
	}

	/**
	 * Get trades
	 *
	 * @return trades
	 **/
	@ApiModelProperty(value = "")
	public Integer getTrades() {
		return trades;
	}

	public void setTrades(Integer trades) {
		this.trades = trades;
	}

	public SignalSubscriber profit(Double profit) {
		this.profit = profit;
		return this;
	}

	/**
	 * Get profit
	 *
	 * @return profit
	 **/
	@ApiModelProperty(value = "")
	public Double getProfit() {
		return profit;
	}

	public void setProfit(Double profit) {
		this.profit = profit;
	}

	public SignalSubscriber volume(Double volume) {
		this.volume = volume;
		return this;
	}

	/**
	 * Get volume
	 *
	 * @return volume
	 **/
	@ApiModelProperty(value = "")
	public Double getVolume() {
		return volume;
	}

	public void setVolume(Double volume) {
		this.volume = volume;
	}

	public SignalSubscriber subscriptionDate(DateTime subscriptionDate) {
		this.subscriptionDate = subscriptionDate;
		return this;
	}

	/**
	 * Get subscriptionDate
	 *
	 * @return subscriptionDate
	 **/
	@ApiModelProperty(value = "")
	public DateTime getSubscriptionDate() {
		return subscriptionDate;
	}

	public void setSubscriptionDate(DateTime subscriptionDate) {
		this.subscriptionDate = subscriptionDate;
	}

	public SignalSubscriber unsubscriptionDate(DateTime unsubscriptionDate) {
		this.unsubscriptionDate = unsubscriptionDate;
		return this;
	}

	/**
	 * Get unsubscriptionDate
	 *
	 * @return unsubscriptionDate
	 **/
	@ApiModelProperty(value = "")
	public DateTime getUnsubscriptionDate() {
		return unsubscriptionDate;
	}

	public void setUnsubscriptionDate(DateTime unsubscriptionDate) {
		this.unsubscriptionDate = unsubscriptionDate;
	}

	public SignalSubscriber status(StatusEnum status) {
		this.status = status;
		return this;
	}

	/**
	 * Get status
	 *
	 * @return status
	 **/
	@ApiModelProperty(value = "")
	public StatusEnum getStatus() {
		return status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		SignalSubscriber signalSubscriber = (SignalSubscriber) o;
		return Objects.equals(this.number, signalSubscriber.number) &&
				Objects.equals(this.trades, signalSubscriber.trades) &&
				Objects.equals(this.profit, signalSubscriber.profit) &&
				Objects.equals(this.volume, signalSubscriber.volume) &&
				Objects.equals(this.subscriptionDate, signalSubscriber.subscriptionDate) &&
				Objects.equals(this.unsubscriptionDate, signalSubscriber.unsubscriptionDate) &&
				Objects.equals(this.status, signalSubscriber.status);
	}

	@Override
	public int hashCode() {
		return Objects.hash(number, trades, profit, volume, subscriptionDate, unsubscriptionDate, status);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class SignalSubscriber {\n");

		sb.append("    number: ").append(toIndentedString(number)).append("\n");
		sb.append("    trades: ").append(toIndentedString(trades)).append("\n");
		sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
		sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
		sb.append("    subscriptionDate: ").append(toIndentedString(subscriptionDate)).append("\n");
		sb.append("    unsubscriptionDate: ").append(toIndentedString(unsubscriptionDate)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets status
	 */
	@JsonAdapter(StatusEnum.Adapter.class)
	public enum StatusEnum
	{
		ACTIVE("Active"),

		ENDED("Ended");

		public static StatusEnum fromValue(String text) {
			for (StatusEnum b : StatusEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		StatusEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<StatusEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public StatusEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return StatusEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

