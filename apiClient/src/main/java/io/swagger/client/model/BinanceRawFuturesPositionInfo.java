/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinancePositionSide;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawFuturesPositionInfo
 */


public class BinanceRawFuturesPositionInfo implements Parcelable {
  @SerializedName("maxNotional")
  private Double maxNotional = null;

  @SerializedName("initialMargin")
  private Double initialMargin = null;

  @SerializedName("maintMargin")
  private Double maintMargin = null;

  @SerializedName("positionInitialMargin")
  private Double positionInitialMargin = null;

  @SerializedName("openOrderInitialMargin")
  private Double openOrderInitialMargin = null;

  @SerializedName("isolated")
  private Boolean isolated = null;

  @SerializedName("quantity")
  private Double quantity = null;

  @SerializedName("updateTime")
  private DateTime updateTime = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("entryPrice")
  private Double entryPrice = null;

  @SerializedName("leverage")
  private Integer leverage = null;

  @SerializedName("unrealizedPnl")
  private Double unrealizedPnl = null;

  @SerializedName("positionSide")
  private BinancePositionSide positionSide = null;

  public BinanceRawFuturesPositionInfo() {
  }
  public BinanceRawFuturesPositionInfo maxNotional(Double maxNotional) {
    this.maxNotional = maxNotional;
    return this;
  }

   /**
   * Get maxNotional
   * @return maxNotional
  **/
  @Schema(description = "")
  public Double getMaxNotional() {
    return maxNotional;
  }

  public void setMaxNotional(Double maxNotional) {
    this.maxNotional = maxNotional;
  }

  public BinanceRawFuturesPositionInfo initialMargin(Double initialMargin) {
    this.initialMargin = initialMargin;
    return this;
  }

   /**
   * Get initialMargin
   * @return initialMargin
  **/
  @Schema(description = "")
  public Double getInitialMargin() {
    return initialMargin;
  }

  public void setInitialMargin(Double initialMargin) {
    this.initialMargin = initialMargin;
  }

  public BinanceRawFuturesPositionInfo maintMargin(Double maintMargin) {
    this.maintMargin = maintMargin;
    return this;
  }

   /**
   * Get maintMargin
   * @return maintMargin
  **/
  @Schema(description = "")
  public Double getMaintMargin() {
    return maintMargin;
  }

  public void setMaintMargin(Double maintMargin) {
    this.maintMargin = maintMargin;
  }

  public BinanceRawFuturesPositionInfo positionInitialMargin(Double positionInitialMargin) {
    this.positionInitialMargin = positionInitialMargin;
    return this;
  }

   /**
   * Get positionInitialMargin
   * @return positionInitialMargin
  **/
  @Schema(description = "")
  public Double getPositionInitialMargin() {
    return positionInitialMargin;
  }

  public void setPositionInitialMargin(Double positionInitialMargin) {
    this.positionInitialMargin = positionInitialMargin;
  }

  public BinanceRawFuturesPositionInfo openOrderInitialMargin(Double openOrderInitialMargin) {
    this.openOrderInitialMargin = openOrderInitialMargin;
    return this;
  }

   /**
   * Get openOrderInitialMargin
   * @return openOrderInitialMargin
  **/
  @Schema(description = "")
  public Double getOpenOrderInitialMargin() {
    return openOrderInitialMargin;
  }

  public void setOpenOrderInitialMargin(Double openOrderInitialMargin) {
    this.openOrderInitialMargin = openOrderInitialMargin;
  }

  public BinanceRawFuturesPositionInfo isolated(Boolean isolated) {
    this.isolated = isolated;
    return this;
  }

   /**
   * Get isolated
   * @return isolated
  **/
  @Schema(description = "")
  public Boolean isIsolated() {
    return isolated;
  }

  public void setIsolated(Boolean isolated) {
    this.isolated = isolated;
  }

  public BinanceRawFuturesPositionInfo quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public BinanceRawFuturesPositionInfo updateTime(DateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public DateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(DateTime updateTime) {
    this.updateTime = updateTime;
  }

  public BinanceRawFuturesPositionInfo symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @Schema(description = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public BinanceRawFuturesPositionInfo entryPrice(Double entryPrice) {
    this.entryPrice = entryPrice;
    return this;
  }

   /**
   * Get entryPrice
   * @return entryPrice
  **/
  @Schema(description = "")
  public Double getEntryPrice() {
    return entryPrice;
  }

  public void setEntryPrice(Double entryPrice) {
    this.entryPrice = entryPrice;
  }

  public BinanceRawFuturesPositionInfo leverage(Integer leverage) {
    this.leverage = leverage;
    return this;
  }

   /**
   * Get leverage
   * @return leverage
  **/
  @Schema(description = "")
  public Integer getLeverage() {
    return leverage;
  }

  public void setLeverage(Integer leverage) {
    this.leverage = leverage;
  }

  public BinanceRawFuturesPositionInfo unrealizedPnl(Double unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
    return this;
  }

   /**
   * Get unrealizedPnl
   * @return unrealizedPnl
  **/
  @Schema(description = "")
  public Double getUnrealizedPnl() {
    return unrealizedPnl;
  }

  public void setUnrealizedPnl(Double unrealizedPnl) {
    this.unrealizedPnl = unrealizedPnl;
  }

  public BinanceRawFuturesPositionInfo positionSide(BinancePositionSide positionSide) {
    this.positionSide = positionSide;
    return this;
  }

   /**
   * Get positionSide
   * @return positionSide
  **/
  @Schema(description = "")
  public BinancePositionSide getPositionSide() {
    return positionSide;
  }

  public void setPositionSide(BinancePositionSide positionSide) {
    this.positionSide = positionSide;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawFuturesPositionInfo binanceRawFuturesPositionInfo = (BinanceRawFuturesPositionInfo) o;
    return Objects.equals(this.maxNotional, binanceRawFuturesPositionInfo.maxNotional) &&
        Objects.equals(this.initialMargin, binanceRawFuturesPositionInfo.initialMargin) &&
        Objects.equals(this.maintMargin, binanceRawFuturesPositionInfo.maintMargin) &&
        Objects.equals(this.positionInitialMargin, binanceRawFuturesPositionInfo.positionInitialMargin) &&
        Objects.equals(this.openOrderInitialMargin, binanceRawFuturesPositionInfo.openOrderInitialMargin) &&
        Objects.equals(this.isolated, binanceRawFuturesPositionInfo.isolated) &&
        Objects.equals(this.quantity, binanceRawFuturesPositionInfo.quantity) &&
        Objects.equals(this.updateTime, binanceRawFuturesPositionInfo.updateTime) &&
        Objects.equals(this.symbol, binanceRawFuturesPositionInfo.symbol) &&
        Objects.equals(this.entryPrice, binanceRawFuturesPositionInfo.entryPrice) &&
        Objects.equals(this.leverage, binanceRawFuturesPositionInfo.leverage) &&
        Objects.equals(this.unrealizedPnl, binanceRawFuturesPositionInfo.unrealizedPnl) &&
        Objects.equals(this.positionSide, binanceRawFuturesPositionInfo.positionSide);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxNotional, initialMargin, maintMargin, positionInitialMargin, openOrderInitialMargin, isolated, quantity, updateTime, symbol, entryPrice, leverage, unrealizedPnl, positionSide);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawFuturesPositionInfo {\n");
    
    sb.append("    maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
    sb.append("    initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
    sb.append("    maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
    sb.append("    positionInitialMargin: ").append(toIndentedString(positionInitialMargin)).append("\n");
    sb.append("    openOrderInitialMargin: ").append(toIndentedString(openOrderInitialMargin)).append("\n");
    sb.append("    isolated: ").append(toIndentedString(isolated)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
    sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
    sb.append("    unrealizedPnl: ").append(toIndentedString(unrealizedPnl)).append("\n");
    sb.append("    positionSide: ").append(toIndentedString(positionSide)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(maxNotional);
    out.writeValue(initialMargin);
    out.writeValue(maintMargin);
    out.writeValue(positionInitialMargin);
    out.writeValue(openOrderInitialMargin);
    out.writeValue(isolated);
    out.writeValue(quantity);
    out.writeValue(updateTime);
    out.writeValue(symbol);
    out.writeValue(entryPrice);
    out.writeValue(leverage);
    out.writeValue(unrealizedPnl);
    out.writeValue(positionSide);
  }

  BinanceRawFuturesPositionInfo(Parcel in) {
    maxNotional = (Double)in.readValue(null);
    initialMargin = (Double)in.readValue(null);
    maintMargin = (Double)in.readValue(null);
    positionInitialMargin = (Double)in.readValue(null);
    openOrderInitialMargin = (Double)in.readValue(null);
    isolated = (Boolean)in.readValue(null);
    quantity = (Double)in.readValue(null);
    updateTime = (DateTime)in.readValue(DateTime.class.getClassLoader());
    symbol = (String)in.readValue(null);
    entryPrice = (Double)in.readValue(null);
    leverage = (Integer)in.readValue(null);
    unrealizedPnl = (Double)in.readValue(null);
    positionSide = (BinancePositionSide)in.readValue(BinancePositionSide.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawFuturesPositionInfo> CREATOR = new Parcelable.Creator<BinanceRawFuturesPositionInfo>() {
    public BinanceRawFuturesPositionInfo createFromParcel(Parcel in) {
      return new BinanceRawFuturesPositionInfo(in);
    }
    public BinanceRawFuturesPositionInfo[] newArray(int size) {
      return new BinanceRawFuturesPositionInfo[size];
    }
  };
}
