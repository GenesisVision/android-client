/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BinanceRawFuturesInitialLeverageChangeResult
 */


public class BinanceRawFuturesInitialLeverageChangeResult implements Parcelable
{
	public static final Parcelable.Creator<BinanceRawFuturesInitialLeverageChangeResult> CREATOR = new Parcelable.Creator<BinanceRawFuturesInitialLeverageChangeResult>()
	{
		public BinanceRawFuturesInitialLeverageChangeResult createFromParcel(Parcel in) {
			return new BinanceRawFuturesInitialLeverageChangeResult(in);
		}

		public BinanceRawFuturesInitialLeverageChangeResult[] newArray(int size) {
			return new BinanceRawFuturesInitialLeverageChangeResult[size];
		}
	};

	@SerializedName("leverage")
	private Integer leverage = null;

	@SerializedName("maxNotionalValue")
	private String maxNotionalValue = null;

	@SerializedName("symbol")
	private String symbol = null;

	public BinanceRawFuturesInitialLeverageChangeResult() {
	}

	BinanceRawFuturesInitialLeverageChangeResult(Parcel in) {
		leverage = (Integer) in.readValue(null);
		maxNotionalValue = (String) in.readValue(null);
		symbol = (String) in.readValue(null);
	}

	public BinanceRawFuturesInitialLeverageChangeResult leverage(Integer leverage) {
		this.leverage = leverage;
		return this;
	}

	/**
	 * Get leverage
	 *
	 * @return leverage
	 **/
	@Schema(description = "")
	public Integer getLeverage() {
		return leverage;
	}

	public void setLeverage(Integer leverage) {
		this.leverage = leverage;
	}

	public BinanceRawFuturesInitialLeverageChangeResult maxNotionalValue(String maxNotionalValue) {
		this.maxNotionalValue = maxNotionalValue;
		return this;
	}

	/**
	 * Get maxNotionalValue
	 *
	 * @return maxNotionalValue
	 **/
	@Schema(description = "")
	public String getMaxNotionalValue() {
		return maxNotionalValue;
	}

	public void setMaxNotionalValue(String maxNotionalValue) {
		this.maxNotionalValue = maxNotionalValue;
	}

	public BinanceRawFuturesInitialLeverageChangeResult symbol(String symbol) {
		this.symbol = symbol;
		return this;
	}

	/**
	 * Get symbol
	 *
	 * @return symbol
	 **/
	@Schema(description = "")
	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BinanceRawFuturesInitialLeverageChangeResult binanceRawFuturesInitialLeverageChangeResult = (BinanceRawFuturesInitialLeverageChangeResult) o;
		return Objects.equals(this.leverage, binanceRawFuturesInitialLeverageChangeResult.leverage) &&
				Objects.equals(this.maxNotionalValue, binanceRawFuturesInitialLeverageChangeResult.maxNotionalValue) &&
				Objects.equals(this.symbol, binanceRawFuturesInitialLeverageChangeResult.symbol);
	}

	@Override
	public int hashCode() {
		return Objects.hash(leverage, maxNotionalValue, symbol);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BinanceRawFuturesInitialLeverageChangeResult {\n");

		sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
		sb.append("    maxNotionalValue: ").append(toIndentedString(maxNotionalValue)).append("\n");
		sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(leverage);
		out.writeValue(maxNotionalValue);
		out.writeValue(symbol);
	}

	public int describeContents() {
		return 0;
	}
}
