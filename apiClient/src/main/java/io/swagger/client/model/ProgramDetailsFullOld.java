/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import org.joda.time.DateTime;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ProgramDetailsFullOld
 */


public class ProgramDetailsFullOld implements Parcelable
{
	public static final Parcelable.Creator<ProgramDetailsFullOld> CREATOR = new Parcelable.Creator<ProgramDetailsFullOld>()
	{
		public ProgramDetailsFullOld createFromParcel(Parcel in) {
			return new ProgramDetailsFullOld(in);
		}

		public ProgramDetailsFullOld[] newArray(int size) {
			return new ProgramDetailsFullOld[size];
		}
	};

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("level")
	private Integer level = null;

	@SerializedName("levelProgress")
	private Double levelProgress = null;

	@SerializedName("periodDuration")
	private Integer periodDuration = null;

	@SerializedName("periodStarts")
	private DateTime periodStarts = null;

	@SerializedName("periodEnds")
	private DateTime periodEnds = null;

	@SerializedName("entryFeeSelected")
	private Double entryFeeSelected = null;

	@SerializedName("entryFeeCurrent")
	private Double entryFeeCurrent = null;

	@SerializedName("successFeeSelected")
	private Double successFeeSelected = null;

	@SerializedName("successFeeCurrent")
	private Double successFeeCurrent = null;

	@SerializedName("stopOutLevelSelected")
	private Double stopOutLevelSelected = null;

	@SerializedName("stopOutLevelCurrent")
	private Double stopOutLevelCurrent = null;

	@SerializedName("isReinvesting")
	private Boolean isReinvesting = null;

	@SerializedName("isSignalProgram")
	private Boolean isSignalProgram = null;

	@SerializedName("signalSuccessFee")
	private Double signalSuccessFee = null;

	@SerializedName("signalVolumeFee")
	private Double signalVolumeFee = null;

	@SerializedName("leverageMin")
	private Integer leverageMin = null;

	@SerializedName("leverageMax")
	private Integer leverageMax = null;

	@SerializedName("ageDays")
	private Double ageDays = null;

	@SerializedName("genesisRatio")
	private Double genesisRatio = null;

	@SerializedName("investmentScale")
	private Double investmentScale = null;

	@SerializedName("volumeScale")
	private Double volumeScale = null;

	@SerializedName("tradesDelay")
	private TradesDelayEnum tradesDelay = null;

	@SerializedName("availableInvestmentBase")
	private Double availableInvestmentBase = null;

	@SerializedName("availableInvestmentLimit")
	private Double availableInvestmentLimit = null;

	@SerializedName("totalAvailableInvestment")
	private Double totalAvailableInvestment = null;

	@SerializedName("brokerDetails")
	private BrokerDetails brokerDetails = null;

	@SerializedName("statistic")
	private ProgramStatistic statistic = null;

	@SerializedName("personalProgramDetails")
	private PersonalProgramDetailsFull personalProgramDetails = null;

	@SerializedName("tags")
	private List<ProgramTag> tags = null;

	@SerializedName("id")
	private UUID id = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("url")
	private String url = null;

	@SerializedName("color")
	private String color = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("ipfsHash")
	private String ipfsHash = null;

	@SerializedName("creationDate")
	private DateTime creationDate = null;

	@SerializedName("status")
	private StatusEnum status = null;

	@SerializedName("manager")
	private ProfilePublic manager = null;

	public ProgramDetailsFullOld() {
	}

	ProgramDetailsFullOld(Parcel in) {
		currency = (CurrencyEnum) in.readValue(null);
		level = (Integer) in.readValue(null);
		levelProgress = (Double) in.readValue(null);
		periodDuration = (Integer) in.readValue(null);
		periodStarts = (DateTime) in.readValue(DateTime.class.getClassLoader());
		periodEnds = (DateTime) in.readValue(DateTime.class.getClassLoader());
		entryFeeSelected = (Double) in.readValue(null);
		entryFeeCurrent = (Double) in.readValue(null);
		successFeeSelected = (Double) in.readValue(null);
		successFeeCurrent = (Double) in.readValue(null);
		stopOutLevelSelected = (Double) in.readValue(null);
		stopOutLevelCurrent = (Double) in.readValue(null);
		isReinvesting = (Boolean) in.readValue(null);
		isSignalProgram = (Boolean) in.readValue(null);
		signalSuccessFee = (Double) in.readValue(null);
		signalVolumeFee = (Double) in.readValue(null);
		leverageMin = (Integer) in.readValue(null);
		leverageMax = (Integer) in.readValue(null);
		ageDays = (Double) in.readValue(null);
		genesisRatio = (Double) in.readValue(null);
		investmentScale = (Double) in.readValue(null);
		volumeScale = (Double) in.readValue(null);
		tradesDelay = (TradesDelayEnum) in.readValue(null);
		availableInvestmentBase = (Double) in.readValue(null);
		availableInvestmentLimit = (Double) in.readValue(null);
		totalAvailableInvestment = (Double) in.readValue(null);
		brokerDetails = (BrokerDetails) in.readValue(BrokerDetails.class.getClassLoader());
		statistic = (ProgramStatistic) in.readValue(ProgramStatistic.class.getClassLoader());
		personalProgramDetails = (PersonalProgramDetailsFull) in.readValue(PersonalProgramDetailsFull.class.getClassLoader());
		tags = (List<ProgramTag>) in.readValue(ProgramTag.class.getClassLoader());
		id = (UUID) in.readValue(UUID.class.getClassLoader());
		logo = (String) in.readValue(null);
		url = (String) in.readValue(null);
		color = (String) in.readValue(null);
		description = (String) in.readValue(null);
		title = (String) in.readValue(null);
		ipfsHash = (String) in.readValue(null);
		creationDate = (DateTime) in.readValue(DateTime.class.getClassLoader());
		status = (StatusEnum) in.readValue(null);
		manager = (ProfilePublic) in.readValue(ProfilePublic.class.getClassLoader());
	}

	public ProgramDetailsFullOld currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public ProgramDetailsFullOld level(Integer level) {
		this.level = level;
		return this;
	}

	/**
	 * Get level
	 *
	 * @return level
	 **/
	@Schema(description = "")
	public Integer getLevel() {
		return level;
	}

	public void setLevel(Integer level) {
		this.level = level;
	}

	public ProgramDetailsFullOld levelProgress(Double levelProgress) {
		this.levelProgress = levelProgress;
		return this;
	}

	/**
	 * Get levelProgress
	 *
	 * @return levelProgress
	 **/
	@Schema(description = "")
	public Double getLevelProgress() {
		return levelProgress;
	}

	public void setLevelProgress(Double levelProgress) {
		this.levelProgress = levelProgress;
	}

	public ProgramDetailsFullOld periodDuration(Integer periodDuration) {
		this.periodDuration = periodDuration;
		return this;
	}

	/**
	 * Get periodDuration
	 *
	 * @return periodDuration
	 **/
	@Schema(description = "")
	public Integer getPeriodDuration() {
		return periodDuration;
	}

	public void setPeriodDuration(Integer periodDuration) {
		this.periodDuration = periodDuration;
	}

	public ProgramDetailsFullOld periodStarts(DateTime periodStarts) {
		this.periodStarts = periodStarts;
		return this;
	}

	/**
	 * Get periodStarts
	 *
	 * @return periodStarts
	 **/
	@Schema(description = "")
	public DateTime getPeriodStarts() {
		return periodStarts;
	}

	public void setPeriodStarts(DateTime periodStarts) {
		this.periodStarts = periodStarts;
	}

	public ProgramDetailsFullOld periodEnds(DateTime periodEnds) {
		this.periodEnds = periodEnds;
		return this;
	}

	/**
	 * Get periodEnds
	 *
	 * @return periodEnds
	 **/
	@Schema(description = "")
	public DateTime getPeriodEnds() {
		return periodEnds;
	}

	public void setPeriodEnds(DateTime periodEnds) {
		this.periodEnds = periodEnds;
	}

	public ProgramDetailsFullOld entryFeeSelected(Double entryFeeSelected) {
		this.entryFeeSelected = entryFeeSelected;
		return this;
	}

	/**
	 * Get entryFeeSelected
	 *
	 * @return entryFeeSelected
	 **/
	@Schema(description = "")
	public Double getEntryFeeSelected() {
		return entryFeeSelected;
	}

	public void setEntryFeeSelected(Double entryFeeSelected) {
		this.entryFeeSelected = entryFeeSelected;
	}

	public ProgramDetailsFullOld entryFeeCurrent(Double entryFeeCurrent) {
		this.entryFeeCurrent = entryFeeCurrent;
		return this;
	}

	/**
	 * Get entryFeeCurrent
	 *
	 * @return entryFeeCurrent
	 **/
	@Schema(description = "")
	public Double getEntryFeeCurrent() {
		return entryFeeCurrent;
	}

	public void setEntryFeeCurrent(Double entryFeeCurrent) {
		this.entryFeeCurrent = entryFeeCurrent;
	}

	public ProgramDetailsFullOld successFeeSelected(Double successFeeSelected) {
		this.successFeeSelected = successFeeSelected;
		return this;
	}

	/**
	 * Get successFeeSelected
	 *
	 * @return successFeeSelected
	 **/
	@Schema(description = "")
	public Double getSuccessFeeSelected() {
		return successFeeSelected;
	}

	public void setSuccessFeeSelected(Double successFeeSelected) {
		this.successFeeSelected = successFeeSelected;
	}

	public ProgramDetailsFullOld successFeeCurrent(Double successFeeCurrent) {
		this.successFeeCurrent = successFeeCurrent;
		return this;
	}

	/**
	 * Get successFeeCurrent
	 *
	 * @return successFeeCurrent
	 **/
	@Schema(description = "")
	public Double getSuccessFeeCurrent() {
		return successFeeCurrent;
	}

	public void setSuccessFeeCurrent(Double successFeeCurrent) {
		this.successFeeCurrent = successFeeCurrent;
	}

	public ProgramDetailsFullOld stopOutLevelSelected(Double stopOutLevelSelected) {
		this.stopOutLevelSelected = stopOutLevelSelected;
		return this;
	}

	/**
	 * Get stopOutLevelSelected
	 *
	 * @return stopOutLevelSelected
	 **/
	@Schema(description = "")
	public Double getStopOutLevelSelected() {
		return stopOutLevelSelected;
	}

	public void setStopOutLevelSelected(Double stopOutLevelSelected) {
		this.stopOutLevelSelected = stopOutLevelSelected;
	}

	public ProgramDetailsFullOld stopOutLevelCurrent(Double stopOutLevelCurrent) {
		this.stopOutLevelCurrent = stopOutLevelCurrent;
		return this;
	}

	/**
	 * Get stopOutLevelCurrent
	 *
	 * @return stopOutLevelCurrent
	 **/
	@Schema(description = "")
	public Double getStopOutLevelCurrent() {
		return stopOutLevelCurrent;
	}

	public void setStopOutLevelCurrent(Double stopOutLevelCurrent) {
		this.stopOutLevelCurrent = stopOutLevelCurrent;
	}

	public ProgramDetailsFullOld isReinvesting(Boolean isReinvesting) {
		this.isReinvesting = isReinvesting;
		return this;
	}

	/**
	 * Get isReinvesting
	 *
	 * @return isReinvesting
	 **/
	@Schema(description = "")
	public Boolean isIsReinvesting() {
		return isReinvesting;
	}

	public void setIsReinvesting(Boolean isReinvesting) {
		this.isReinvesting = isReinvesting;
	}

	public ProgramDetailsFullOld isSignalProgram(Boolean isSignalProgram) {
		this.isSignalProgram = isSignalProgram;
		return this;
	}

	/**
	 * Get isSignalProgram
	 *
	 * @return isSignalProgram
	 **/
	@Schema(description = "")
	public Boolean isIsSignalProgram() {
		return isSignalProgram;
	}

	public void setIsSignalProgram(Boolean isSignalProgram) {
		this.isSignalProgram = isSignalProgram;
	}

	public ProgramDetailsFullOld signalSuccessFee(Double signalSuccessFee) {
		this.signalSuccessFee = signalSuccessFee;
		return this;
	}

	/**
	 * Get signalSuccessFee
	 *
	 * @return signalSuccessFee
	 **/
	@Schema(description = "")
	public Double getSignalSuccessFee() {
		return signalSuccessFee;
	}

	public void setSignalSuccessFee(Double signalSuccessFee) {
		this.signalSuccessFee = signalSuccessFee;
	}

	public ProgramDetailsFullOld signalVolumeFee(Double signalVolumeFee) {
		this.signalVolumeFee = signalVolumeFee;
		return this;
	}

	/**
	 * Get signalVolumeFee
	 *
	 * @return signalVolumeFee
	 **/
	@Schema(description = "")
	public Double getSignalVolumeFee() {
		return signalVolumeFee;
	}

	public void setSignalVolumeFee(Double signalVolumeFee) {
		this.signalVolumeFee = signalVolumeFee;
	}

	public ProgramDetailsFullOld leverageMin(Integer leverageMin) {
		this.leverageMin = leverageMin;
		return this;
	}

	/**
	 * Get leverageMin
	 *
	 * @return leverageMin
	 **/
	@Schema(description = "")
	public Integer getLeverageMin() {
		return leverageMin;
	}

	public void setLeverageMin(Integer leverageMin) {
		this.leverageMin = leverageMin;
	}

	public ProgramDetailsFullOld leverageMax(Integer leverageMax) {
		this.leverageMax = leverageMax;
		return this;
	}

	/**
	 * Get leverageMax
	 *
	 * @return leverageMax
	 **/
	@Schema(description = "")
	public Integer getLeverageMax() {
		return leverageMax;
	}

	public void setLeverageMax(Integer leverageMax) {
		this.leverageMax = leverageMax;
	}

	public ProgramDetailsFullOld ageDays(Double ageDays) {
		this.ageDays = ageDays;
		return this;
	}

	/**
	 * Get ageDays
	 *
	 * @return ageDays
	 **/
	@Schema(description = "")
	public Double getAgeDays() {
		return ageDays;
	}

	public void setAgeDays(Double ageDays) {
		this.ageDays = ageDays;
	}

	public ProgramDetailsFullOld genesisRatio(Double genesisRatio) {
		this.genesisRatio = genesisRatio;
		return this;
	}

	/**
	 * Get genesisRatio
	 *
	 * @return genesisRatio
	 **/
	@Schema(description = "")
	public Double getGenesisRatio() {
		return genesisRatio;
	}

	public void setGenesisRatio(Double genesisRatio) {
		this.genesisRatio = genesisRatio;
	}

	public ProgramDetailsFullOld investmentScale(Double investmentScale) {
		this.investmentScale = investmentScale;
		return this;
	}

	/**
	 * Get investmentScale
	 *
	 * @return investmentScale
	 **/
	@Schema(description = "")
	public Double getInvestmentScale() {
		return investmentScale;
	}

	public void setInvestmentScale(Double investmentScale) {
		this.investmentScale = investmentScale;
	}

	public ProgramDetailsFullOld volumeScale(Double volumeScale) {
		this.volumeScale = volumeScale;
		return this;
	}

	/**
	 * Get volumeScale
	 *
	 * @return volumeScale
	 **/
	@Schema(description = "")
	public Double getVolumeScale() {
		return volumeScale;
	}

	public void setVolumeScale(Double volumeScale) {
		this.volumeScale = volumeScale;
	}

	public ProgramDetailsFullOld tradesDelay(TradesDelayEnum tradesDelay) {
		this.tradesDelay = tradesDelay;
		return this;
	}

	/**
	 * Get tradesDelay
	 *
	 * @return tradesDelay
	 **/
	@Schema(description = "")
	public TradesDelayEnum getTradesDelay() {
		return tradesDelay;
	}

	public void setTradesDelay(TradesDelayEnum tradesDelay) {
		this.tradesDelay = tradesDelay;
	}

	public ProgramDetailsFullOld availableInvestmentBase(Double availableInvestmentBase) {
		this.availableInvestmentBase = availableInvestmentBase;
		return this;
	}

	/**
	 * In account currency
	 *
	 * @return availableInvestmentBase
	 **/
	@Schema(description = "In account currency")
	public Double getAvailableInvestmentBase() {
		return availableInvestmentBase;
	}

	public void setAvailableInvestmentBase(Double availableInvestmentBase) {
		this.availableInvestmentBase = availableInvestmentBase;
	}

	public ProgramDetailsFullOld availableInvestmentLimit(Double availableInvestmentLimit) {
		this.availableInvestmentLimit = availableInvestmentLimit;
		return this;
	}

	/**
	 * Get availableInvestmentLimit
	 *
	 * @return availableInvestmentLimit
	 **/
	@Schema(description = "")
	public Double getAvailableInvestmentLimit() {
		return availableInvestmentLimit;
	}

	public void setAvailableInvestmentLimit(Double availableInvestmentLimit) {
		this.availableInvestmentLimit = availableInvestmentLimit;
	}

	public ProgramDetailsFullOld totalAvailableInvestment(Double totalAvailableInvestment) {
		this.totalAvailableInvestment = totalAvailableInvestment;
		return this;
	}

	/**
	 * Get totalAvailableInvestment
	 *
	 * @return totalAvailableInvestment
	 **/
	@Schema(description = "")
	public Double getTotalAvailableInvestment() {
		return totalAvailableInvestment;
	}

	public void setTotalAvailableInvestment(Double totalAvailableInvestment) {
		this.totalAvailableInvestment = totalAvailableInvestment;
	}

	public ProgramDetailsFullOld brokerDetails(BrokerDetails brokerDetails) {
		this.brokerDetails = brokerDetails;
		return this;
	}

	/**
	 * Get brokerDetails
	 *
	 * @return brokerDetails
	 **/
	@Schema(description = "")
	public BrokerDetails getBrokerDetails() {
		return brokerDetails;
	}

	public void setBrokerDetails(BrokerDetails brokerDetails) {
		this.brokerDetails = brokerDetails;
	}

	public ProgramDetailsFullOld statistic(ProgramStatistic statistic) {
		this.statistic = statistic;
		return this;
	}

	/**
	 * Get statistic
	 *
	 * @return statistic
	 **/
	@Schema(description = "")
	public ProgramStatistic getStatistic() {
		return statistic;
	}

	public void setStatistic(ProgramStatistic statistic) {
		this.statistic = statistic;
	}

	public ProgramDetailsFullOld personalProgramDetails(PersonalProgramDetailsFull personalProgramDetails) {
		this.personalProgramDetails = personalProgramDetails;
		return this;
	}

	/**
	 * Get personalProgramDetails
	 *
	 * @return personalProgramDetails
	 **/
	@Schema(description = "")
	public PersonalProgramDetailsFull getPersonalProgramDetails() {
		return personalProgramDetails;
	}

	public void setPersonalProgramDetails(PersonalProgramDetailsFull personalProgramDetails) {
		this.personalProgramDetails = personalProgramDetails;
	}

	public ProgramDetailsFullOld tags(List<ProgramTag> tags) {
		this.tags = tags;
		return this;
	}

	public ProgramDetailsFullOld addTagsItem(ProgramTag tagsItem) {
		if (this.tags == null) {
			this.tags = new ArrayList<ProgramTag>();
		}
		this.tags.add(tagsItem);
		return this;
	}

	/**
	 * Get tags
	 *
	 * @return tags
	 **/
	@Schema(description = "")
	public List<ProgramTag> getTags() {
		return tags;
	}

	public void setTags(List<ProgramTag> tags) {
		this.tags = tags;
	}

	public ProgramDetailsFullOld id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@Schema(description = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public ProgramDetailsFullOld logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@Schema(description = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public ProgramDetailsFullOld url(String url) {
		this.url = url;
		return this;
	}

	/**
	 * Get url
	 *
	 * @return url
	 **/
	@Schema(description = "")
	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public ProgramDetailsFullOld color(String color) {
		this.color = color;
		return this;
	}

	/**
	 * Get color
	 *
	 * @return color
	 **/
	@Schema(description = "")
	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public ProgramDetailsFullOld description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@Schema(description = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public ProgramDetailsFullOld title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@Schema(description = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public ProgramDetailsFullOld ipfsHash(String ipfsHash) {
		this.ipfsHash = ipfsHash;
		return this;
	}

	/**
	 * Get ipfsHash
	 *
	 * @return ipfsHash
	 **/
	@Schema(description = "")
	public String getIpfsHash() {
		return ipfsHash;
	}

	public void setIpfsHash(String ipfsHash) {
		this.ipfsHash = ipfsHash;
	}

	public ProgramDetailsFullOld creationDate(DateTime creationDate) {
		this.creationDate = creationDate;
		return this;
	}

	/**
	 * Get creationDate
	 *
	 * @return creationDate
	 **/
	@Schema(description = "")
	public DateTime getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(DateTime creationDate) {
		this.creationDate = creationDate;
	}

	public ProgramDetailsFullOld status(StatusEnum status) {
		this.status = status;
		return this;
	}

	/**
	 * Get status
	 *
	 * @return status
	 **/
	@Schema(description = "")
	public StatusEnum getStatus() {
		return status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	public ProgramDetailsFullOld manager(ProfilePublic manager) {
		this.manager = manager;
		return this;
	}

	/**
	 * Get manager
	 *
	 * @return manager
	 **/
	@Schema(description = "")
	public ProfilePublic getManager() {
		return manager;
	}

	public void setManager(ProfilePublic manager) {
		this.manager = manager;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProgramDetailsFullOld programDetailsFullOld = (ProgramDetailsFullOld) o;
		return Objects.equals(this.currency, programDetailsFullOld.currency) &&
				Objects.equals(this.level, programDetailsFullOld.level) &&
				Objects.equals(this.levelProgress, programDetailsFullOld.levelProgress) &&
				Objects.equals(this.periodDuration, programDetailsFullOld.periodDuration) &&
				Objects.equals(this.periodStarts, programDetailsFullOld.periodStarts) &&
				Objects.equals(this.periodEnds, programDetailsFullOld.periodEnds) &&
				Objects.equals(this.entryFeeSelected, programDetailsFullOld.entryFeeSelected) &&
				Objects.equals(this.entryFeeCurrent, programDetailsFullOld.entryFeeCurrent) &&
				Objects.equals(this.successFeeSelected, programDetailsFullOld.successFeeSelected) &&
				Objects.equals(this.successFeeCurrent, programDetailsFullOld.successFeeCurrent) &&
				Objects.equals(this.stopOutLevelSelected, programDetailsFullOld.stopOutLevelSelected) &&
				Objects.equals(this.stopOutLevelCurrent, programDetailsFullOld.stopOutLevelCurrent) &&
				Objects.equals(this.isReinvesting, programDetailsFullOld.isReinvesting) &&
				Objects.equals(this.isSignalProgram, programDetailsFullOld.isSignalProgram) &&
				Objects.equals(this.signalSuccessFee, programDetailsFullOld.signalSuccessFee) &&
				Objects.equals(this.signalVolumeFee, programDetailsFullOld.signalVolumeFee) &&
				Objects.equals(this.leverageMin, programDetailsFullOld.leverageMin) &&
				Objects.equals(this.leverageMax, programDetailsFullOld.leverageMax) &&
				Objects.equals(this.ageDays, programDetailsFullOld.ageDays) &&
				Objects.equals(this.genesisRatio, programDetailsFullOld.genesisRatio) &&
				Objects.equals(this.investmentScale, programDetailsFullOld.investmentScale) &&
				Objects.equals(this.volumeScale, programDetailsFullOld.volumeScale) &&
				Objects.equals(this.tradesDelay, programDetailsFullOld.tradesDelay) &&
				Objects.equals(this.availableInvestmentBase, programDetailsFullOld.availableInvestmentBase) &&
				Objects.equals(this.availableInvestmentLimit, programDetailsFullOld.availableInvestmentLimit) &&
				Objects.equals(this.totalAvailableInvestment, programDetailsFullOld.totalAvailableInvestment) &&
				Objects.equals(this.brokerDetails, programDetailsFullOld.brokerDetails) &&
				Objects.equals(this.statistic, programDetailsFullOld.statistic) &&
				Objects.equals(this.personalProgramDetails, programDetailsFullOld.personalProgramDetails) &&
				Objects.equals(this.tags, programDetailsFullOld.tags) &&
				Objects.equals(this.id, programDetailsFullOld.id) &&
				Objects.equals(this.logo, programDetailsFullOld.logo) &&
				Objects.equals(this.url, programDetailsFullOld.url) &&
				Objects.equals(this.color, programDetailsFullOld.color) &&
				Objects.equals(this.description, programDetailsFullOld.description) &&
				Objects.equals(this.title, programDetailsFullOld.title) &&
				Objects.equals(this.ipfsHash, programDetailsFullOld.ipfsHash) &&
				Objects.equals(this.creationDate, programDetailsFullOld.creationDate) &&
				Objects.equals(this.status, programDetailsFullOld.status) &&
				Objects.equals(this.manager, programDetailsFullOld.manager);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currency, level, levelProgress, periodDuration, periodStarts, periodEnds, entryFeeSelected, entryFeeCurrent, successFeeSelected, successFeeCurrent, stopOutLevelSelected, stopOutLevelCurrent, isReinvesting, isSignalProgram, signalSuccessFee, signalVolumeFee, leverageMin, leverageMax, ageDays, genesisRatio, investmentScale, volumeScale, tradesDelay, availableInvestmentBase, availableInvestmentLimit, totalAvailableInvestment, brokerDetails, statistic, personalProgramDetails, tags, id, logo, url, color, description, title, ipfsHash, creationDate, status, manager);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProgramDetailsFullOld {\n");

		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    level: ").append(toIndentedString(level)).append("\n");
		sb.append("    levelProgress: ").append(toIndentedString(levelProgress)).append("\n");
		sb.append("    periodDuration: ").append(toIndentedString(periodDuration)).append("\n");
		sb.append("    periodStarts: ").append(toIndentedString(periodStarts)).append("\n");
		sb.append("    periodEnds: ").append(toIndentedString(periodEnds)).append("\n");
		sb.append("    entryFeeSelected: ").append(toIndentedString(entryFeeSelected)).append("\n");
		sb.append("    entryFeeCurrent: ").append(toIndentedString(entryFeeCurrent)).append("\n");
		sb.append("    successFeeSelected: ").append(toIndentedString(successFeeSelected)).append("\n");
		sb.append("    successFeeCurrent: ").append(toIndentedString(successFeeCurrent)).append("\n");
		sb.append("    stopOutLevelSelected: ").append(toIndentedString(stopOutLevelSelected)).append("\n");
		sb.append("    stopOutLevelCurrent: ").append(toIndentedString(stopOutLevelCurrent)).append("\n");
		sb.append("    isReinvesting: ").append(toIndentedString(isReinvesting)).append("\n");
		sb.append("    isSignalProgram: ").append(toIndentedString(isSignalProgram)).append("\n");
		sb.append("    signalSuccessFee: ").append(toIndentedString(signalSuccessFee)).append("\n");
		sb.append("    signalVolumeFee: ").append(toIndentedString(signalVolumeFee)).append("\n");
		sb.append("    leverageMin: ").append(toIndentedString(leverageMin)).append("\n");
		sb.append("    leverageMax: ").append(toIndentedString(leverageMax)).append("\n");
		sb.append("    ageDays: ").append(toIndentedString(ageDays)).append("\n");
		sb.append("    genesisRatio: ").append(toIndentedString(genesisRatio)).append("\n");
		sb.append("    investmentScale: ").append(toIndentedString(investmentScale)).append("\n");
		sb.append("    volumeScale: ").append(toIndentedString(volumeScale)).append("\n");
		sb.append("    tradesDelay: ").append(toIndentedString(tradesDelay)).append("\n");
		sb.append("    availableInvestmentBase: ").append(toIndentedString(availableInvestmentBase)).append("\n");
		sb.append("    availableInvestmentLimit: ").append(toIndentedString(availableInvestmentLimit)).append("\n");
		sb.append("    totalAvailableInvestment: ").append(toIndentedString(totalAvailableInvestment)).append("\n");
		sb.append("    brokerDetails: ").append(toIndentedString(brokerDetails)).append("\n");
		sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
		sb.append("    personalProgramDetails: ").append(toIndentedString(personalProgramDetails)).append("\n");
		sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    url: ").append(toIndentedString(url)).append("\n");
		sb.append("    color: ").append(toIndentedString(color)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    ipfsHash: ").append(toIndentedString(ipfsHash)).append("\n");
		sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(currency);
		out.writeValue(level);
		out.writeValue(levelProgress);
		out.writeValue(periodDuration);
		out.writeValue(periodStarts);
		out.writeValue(periodEnds);
		out.writeValue(entryFeeSelected);
		out.writeValue(entryFeeCurrent);
		out.writeValue(successFeeSelected);
		out.writeValue(successFeeCurrent);
		out.writeValue(stopOutLevelSelected);
		out.writeValue(stopOutLevelCurrent);
		out.writeValue(isReinvesting);
		out.writeValue(isSignalProgram);
		out.writeValue(signalSuccessFee);
		out.writeValue(signalVolumeFee);
		out.writeValue(leverageMin);
		out.writeValue(leverageMax);
		out.writeValue(ageDays);
		out.writeValue(genesisRatio);
		out.writeValue(investmentScale);
		out.writeValue(volumeScale);
		out.writeValue(tradesDelay);
		out.writeValue(availableInvestmentBase);
		out.writeValue(availableInvestmentLimit);
		out.writeValue(totalAvailableInvestment);
		out.writeValue(brokerDetails);
		out.writeValue(statistic);
		out.writeValue(personalProgramDetails);
		out.writeValue(tags);
		out.writeValue(id);
		out.writeValue(logo);
		out.writeValue(url);
		out.writeValue(color);
		out.writeValue(description);
		out.writeValue(title);
		out.writeValue(ipfsHash);
		out.writeValue(creationDate);
		out.writeValue(status);
		out.writeValue(manager);
	}

	public int describeContents() {
		return 0;
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		UNDEFINED("Undefined"),
		GVT("GVT"),
		ETH("ETH"),
		BTC("BTC"),
		ADA("ADA"),
		USDT("USDT"),
		XRP("XRP"),
		BCH("BCH"),
		LTC("LTC"),
		DOGE("DOGE"),
		BNB("BNB"),
		USD("USD"),
		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets tradesDelay
	 */
	@JsonAdapter(TradesDelayEnum.Adapter.class)
	public enum TradesDelayEnum
	{
		NONE("None"),
		FIVEMINUTES("FiveMinutes"),
		FIFTEENMINUTES("FifteenMinutes"),
		THIRTYMINUTES("ThirtyMinutes"),
		ONEHOUR("OneHour"),
		SIXHOURS("SixHours");

		public static TradesDelayEnum fromValue(String text) {
			for (TradesDelayEnum b : TradesDelayEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		TradesDelayEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<TradesDelayEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final TradesDelayEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public TradesDelayEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return TradesDelayEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets status
	 */
	@JsonAdapter(StatusEnum.Adapter.class)
	public enum StatusEnum
	{
		NONE("None"),
		PENDING("Pending"),
		ERRORCREATING("ErrorCreating"),
		ACTIVE("Active"),
		CLOSED("Closed"),
		ARCHIVED("Archived"),
		CLOSEDDUETOINACTIVITY("ClosedDueToInactivity");

		public static StatusEnum fromValue(String text) {
			for (StatusEnum b : StatusEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		StatusEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<StatusEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public StatusEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return StatusEnum.fromValue(String.valueOf(value));
			}
		}
	}
}
