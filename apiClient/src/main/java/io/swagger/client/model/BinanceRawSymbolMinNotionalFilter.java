/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinanceSymbolFilterType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawSymbolMinNotionalFilter
 */


public class BinanceRawSymbolMinNotionalFilter implements Parcelable {
  @SerializedName("filterType")
  private BinanceSymbolFilterType filterType = null;

  @SerializedName("minNotional")
  private Double minNotional = null;

  @SerializedName("applyToMarketOrders")
  private Boolean applyToMarketOrders = null;

  @SerializedName("averagePriceMinutes")
  private Integer averagePriceMinutes = null;

  public BinanceRawSymbolMinNotionalFilter() {
  }
  public BinanceRawSymbolMinNotionalFilter filterType(BinanceSymbolFilterType filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @Schema(description = "")
  public BinanceSymbolFilterType getFilterType() {
    return filterType;
  }

  public void setFilterType(BinanceSymbolFilterType filterType) {
    this.filterType = filterType;
  }

  public BinanceRawSymbolMinNotionalFilter minNotional(Double minNotional) {
    this.minNotional = minNotional;
    return this;
  }

   /**
   * Get minNotional
   * @return minNotional
  **/
  @Schema(description = "")
  public Double getMinNotional() {
    return minNotional;
  }

  public void setMinNotional(Double minNotional) {
    this.minNotional = minNotional;
  }

  public BinanceRawSymbolMinNotionalFilter applyToMarketOrders(Boolean applyToMarketOrders) {
    this.applyToMarketOrders = applyToMarketOrders;
    return this;
  }

   /**
   * Get applyToMarketOrders
   * @return applyToMarketOrders
  **/
  @Schema(description = "")
  public Boolean isApplyToMarketOrders() {
    return applyToMarketOrders;
  }

  public void setApplyToMarketOrders(Boolean applyToMarketOrders) {
    this.applyToMarketOrders = applyToMarketOrders;
  }

  public BinanceRawSymbolMinNotionalFilter averagePriceMinutes(Integer averagePriceMinutes) {
    this.averagePriceMinutes = averagePriceMinutes;
    return this;
  }

   /**
   * Get averagePriceMinutes
   * @return averagePriceMinutes
  **/
  @Schema(description = "")
  public Integer getAveragePriceMinutes() {
    return averagePriceMinutes;
  }

  public void setAveragePriceMinutes(Integer averagePriceMinutes) {
    this.averagePriceMinutes = averagePriceMinutes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawSymbolMinNotionalFilter binanceRawSymbolMinNotionalFilter = (BinanceRawSymbolMinNotionalFilter) o;
    return Objects.equals(this.filterType, binanceRawSymbolMinNotionalFilter.filterType) &&
        Objects.equals(this.minNotional, binanceRawSymbolMinNotionalFilter.minNotional) &&
        Objects.equals(this.applyToMarketOrders, binanceRawSymbolMinNotionalFilter.applyToMarketOrders) &&
        Objects.equals(this.averagePriceMinutes, binanceRawSymbolMinNotionalFilter.averagePriceMinutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, minNotional, applyToMarketOrders, averagePriceMinutes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawSymbolMinNotionalFilter {\n");
    
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    minNotional: ").append(toIndentedString(minNotional)).append("\n");
    sb.append("    applyToMarketOrders: ").append(toIndentedString(applyToMarketOrders)).append("\n");
    sb.append("    averagePriceMinutes: ").append(toIndentedString(averagePriceMinutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(filterType);
    out.writeValue(minNotional);
    out.writeValue(applyToMarketOrders);
    out.writeValue(averagePriceMinutes);
  }

  BinanceRawSymbolMinNotionalFilter(Parcel in) {
    filterType = (BinanceSymbolFilterType)in.readValue(BinanceSymbolFilterType.class.getClassLoader());
    minNotional = (Double)in.readValue(null);
    applyToMarketOrders = (Boolean)in.readValue(null);
    averagePriceMinutes = (Integer)in.readValue(null);
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawSymbolMinNotionalFilter> CREATOR = new Parcelable.Creator<BinanceRawSymbolMinNotionalFilter>() {
    public BinanceRawSymbolMinNotionalFilter createFromParcel(Parcel in) {
      return new BinanceRawSymbolMinNotionalFilter(in);
    }
    public BinanceRawSymbolMinNotionalFilter[] newArray(int size) {
      return new BinanceRawSymbolMinNotionalFilter[size];
    }
  };
}
