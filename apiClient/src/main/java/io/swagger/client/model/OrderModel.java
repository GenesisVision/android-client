/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.OrderModelSignalData;
import io.swagger.client.model.TradeAssetData;
import io.swagger.client.model.TradeDirectionType;
import io.swagger.client.model.TradeEntryType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * OrderModel
 */


public class OrderModel implements Parcelable {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("login")
  private String login = null;

  @SerializedName("ticket")
  private String ticket = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("volume")
  private Double volume = null;

  @SerializedName("profit")
  private Double profit = null;

  @SerializedName("profitCurrency")
  private String profitCurrency = null;

  @SerializedName("direction")
  private TradeDirectionType direction = null;

  @SerializedName("date")
  private DateTime date = null;

  @SerializedName("price")
  private Double price = null;

  @SerializedName("priceCurrent")
  private Double priceCurrent = null;

  @SerializedName("entry")
  private TradeEntryType entry = null;

  @SerializedName("baseVolume")
  private Double baseVolume = null;

  @SerializedName("originalCommission")
  private Double originalCommission = null;

  @SerializedName("originalCommissionCurrency")
  private String originalCommissionCurrency = null;

  @SerializedName("commission")
  private Double commission = null;

  @SerializedName("swap")
  private Double swap = null;

  @SerializedName("showOriginalCommission")
  private Boolean showOriginalCommission = null;

  @SerializedName("assetData")
  private TradeAssetData assetData = null;

  @SerializedName("signalData")
  private OrderModelSignalData signalData = null;

  public OrderModel() {
  }
  public OrderModel id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public OrderModel login(String login) {
    this.login = login;
    return this;
  }

   /**
   * Get login
   * @return login
  **/
  @Schema(description = "")
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }

  public OrderModel ticket(String ticket) {
    this.ticket = ticket;
    return this;
  }

   /**
   * Get ticket
   * @return ticket
  **/
  @Schema(description = "")
  public String getTicket() {
    return ticket;
  }

  public void setTicket(String ticket) {
    this.ticket = ticket;
  }

  public OrderModel symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @Schema(description = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public OrderModel volume(Double volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @Schema(description = "")
  public Double getVolume() {
    return volume;
  }

  public void setVolume(Double volume) {
    this.volume = volume;
  }

  public OrderModel profit(Double profit) {
    this.profit = profit;
    return this;
  }

   /**
   * Get profit
   * @return profit
  **/
  @Schema(description = "")
  public Double getProfit() {
    return profit;
  }

  public void setProfit(Double profit) {
    this.profit = profit;
  }

  public OrderModel profitCurrency(String profitCurrency) {
    this.profitCurrency = profitCurrency;
    return this;
  }

   /**
   * Get profitCurrency
   * @return profitCurrency
  **/
  @Schema(description = "")
  public String getProfitCurrency() {
    return profitCurrency;
  }

  public void setProfitCurrency(String profitCurrency) {
    this.profitCurrency = profitCurrency;
  }

  public OrderModel direction(TradeDirectionType direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @Schema(description = "")
  public TradeDirectionType getDirection() {
    return direction;
  }

  public void setDirection(TradeDirectionType direction) {
    this.direction = direction;
  }

  public OrderModel date(DateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @Schema(description = "")
  public DateTime getDate() {
    return date;
  }

  public void setDate(DateTime date) {
    this.date = date;
  }

  public OrderModel price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public OrderModel priceCurrent(Double priceCurrent) {
    this.priceCurrent = priceCurrent;
    return this;
  }

   /**
   * Get priceCurrent
   * @return priceCurrent
  **/
  @Schema(description = "")
  public Double getPriceCurrent() {
    return priceCurrent;
  }

  public void setPriceCurrent(Double priceCurrent) {
    this.priceCurrent = priceCurrent;
  }

  public OrderModel entry(TradeEntryType entry) {
    this.entry = entry;
    return this;
  }

   /**
   * Get entry
   * @return entry
  **/
  @Schema(description = "")
  public TradeEntryType getEntry() {
    return entry;
  }

  public void setEntry(TradeEntryType entry) {
    this.entry = entry;
  }

  public OrderModel baseVolume(Double baseVolume) {
    this.baseVolume = baseVolume;
    return this;
  }

   /**
   * Volume in account currency. Only filled when trade have zero commission (for paying fees with GVT)
   * @return baseVolume
  **/
  @Schema(description = "Volume in account currency. Only filled when trade have zero commission (for paying fees with GVT)")
  public Double getBaseVolume() {
    return baseVolume;
  }

  public void setBaseVolume(Double baseVolume) {
    this.baseVolume = baseVolume;
  }

  public OrderModel originalCommission(Double originalCommission) {
    this.originalCommission = originalCommission;
    return this;
  }

   /**
   * Huobi: sell - quote currency (right), buy - base symbol currency (left)
   * @return originalCommission
  **/
  @Schema(description = "Huobi: sell - quote currency (right), buy - base symbol currency (left)")
  public Double getOriginalCommission() {
    return originalCommission;
  }

  public void setOriginalCommission(Double originalCommission) {
    this.originalCommission = originalCommission;
  }

  public OrderModel originalCommissionCurrency(String originalCommissionCurrency) {
    this.originalCommissionCurrency = originalCommissionCurrency;
    return this;
  }

   /**
   * Get originalCommissionCurrency
   * @return originalCommissionCurrency
  **/
  @Schema(description = "")
  public String getOriginalCommissionCurrency() {
    return originalCommissionCurrency;
  }

  public void setOriginalCommissionCurrency(String originalCommissionCurrency) {
    this.originalCommissionCurrency = originalCommissionCurrency;
  }

  public OrderModel commission(Double commission) {
    this.commission = commission;
    return this;
  }

   /**
   * In account currency
   * @return commission
  **/
  @Schema(description = "In account currency")
  public Double getCommission() {
    return commission;
  }

  public void setCommission(Double commission) {
    this.commission = commission;
  }

  public OrderModel swap(Double swap) {
    this.swap = swap;
    return this;
  }

   /**
   * Get swap
   * @return swap
  **/
  @Schema(description = "")
  public Double getSwap() {
    return swap;
  }

  public void setSwap(Double swap) {
    this.swap = swap;
  }

  public OrderModel showOriginalCommission(Boolean showOriginalCommission) {
    this.showOriginalCommission = showOriginalCommission;
    return this;
  }

   /**
   * Get showOriginalCommission
   * @return showOriginalCommission
  **/
  @Schema(description = "")
  public Boolean isShowOriginalCommission() {
    return showOriginalCommission;
  }

  public void setShowOriginalCommission(Boolean showOriginalCommission) {
    this.showOriginalCommission = showOriginalCommission;
  }

  public OrderModel assetData(TradeAssetData assetData) {
    this.assetData = assetData;
    return this;
  }

   /**
   * Get assetData
   * @return assetData
  **/
  @Schema(description = "")
  public TradeAssetData getAssetData() {
    return assetData;
  }

  public void setAssetData(TradeAssetData assetData) {
    this.assetData = assetData;
  }

  public OrderModel signalData(OrderModelSignalData signalData) {
    this.signalData = signalData;
    return this;
  }

   /**
   * Get signalData
   * @return signalData
  **/
  @Schema(description = "")
  public OrderModelSignalData getSignalData() {
    return signalData;
  }

  public void setSignalData(OrderModelSignalData signalData) {
    this.signalData = signalData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderModel orderModel = (OrderModel) o;
    return Objects.equals(this.id, orderModel.id) &&
        Objects.equals(this.login, orderModel.login) &&
        Objects.equals(this.ticket, orderModel.ticket) &&
        Objects.equals(this.symbol, orderModel.symbol) &&
        Objects.equals(this.volume, orderModel.volume) &&
        Objects.equals(this.profit, orderModel.profit) &&
        Objects.equals(this.profitCurrency, orderModel.profitCurrency) &&
        Objects.equals(this.direction, orderModel.direction) &&
        Objects.equals(this.date, orderModel.date) &&
        Objects.equals(this.price, orderModel.price) &&
        Objects.equals(this.priceCurrent, orderModel.priceCurrent) &&
        Objects.equals(this.entry, orderModel.entry) &&
        Objects.equals(this.baseVolume, orderModel.baseVolume) &&
        Objects.equals(this.originalCommission, orderModel.originalCommission) &&
        Objects.equals(this.originalCommissionCurrency, orderModel.originalCommissionCurrency) &&
        Objects.equals(this.commission, orderModel.commission) &&
        Objects.equals(this.swap, orderModel.swap) &&
        Objects.equals(this.showOriginalCommission, orderModel.showOriginalCommission) &&
        Objects.equals(this.assetData, orderModel.assetData) &&
        Objects.equals(this.signalData, orderModel.signalData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, login, ticket, symbol, volume, profit, profitCurrency, direction, date, price, priceCurrent, entry, baseVolume, originalCommission, originalCommissionCurrency, commission, swap, showOriginalCommission, assetData, signalData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderModel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    ticket: ").append(toIndentedString(ticket)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("    profitCurrency: ").append(toIndentedString(profitCurrency)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceCurrent: ").append(toIndentedString(priceCurrent)).append("\n");
    sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
    sb.append("    baseVolume: ").append(toIndentedString(baseVolume)).append("\n");
    sb.append("    originalCommission: ").append(toIndentedString(originalCommission)).append("\n");
    sb.append("    originalCommissionCurrency: ").append(toIndentedString(originalCommissionCurrency)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    swap: ").append(toIndentedString(swap)).append("\n");
    sb.append("    showOriginalCommission: ").append(toIndentedString(showOriginalCommission)).append("\n");
    sb.append("    assetData: ").append(toIndentedString(assetData)).append("\n");
    sb.append("    signalData: ").append(toIndentedString(signalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(id);
    out.writeValue(login);
    out.writeValue(ticket);
    out.writeValue(symbol);
    out.writeValue(volume);
    out.writeValue(profit);
    out.writeValue(profitCurrency);
    out.writeValue(direction);
    out.writeValue(date);
    out.writeValue(price);
    out.writeValue(priceCurrent);
    out.writeValue(entry);
    out.writeValue(baseVolume);
    out.writeValue(originalCommission);
    out.writeValue(originalCommissionCurrency);
    out.writeValue(commission);
    out.writeValue(swap);
    out.writeValue(showOriginalCommission);
    out.writeValue(assetData);
    out.writeValue(signalData);
  }

  OrderModel(Parcel in) {
    id = (UUID)in.readValue(UUID.class.getClassLoader());
    login = (String)in.readValue(null);
    ticket = (String)in.readValue(null);
    symbol = (String)in.readValue(null);
    volume = (Double)in.readValue(null);
    profit = (Double)in.readValue(null);
    profitCurrency = (String)in.readValue(null);
    direction = (TradeDirectionType)in.readValue(TradeDirectionType.class.getClassLoader());
    date = (DateTime)in.readValue(DateTime.class.getClassLoader());
    price = (Double)in.readValue(null);
    priceCurrent = (Double)in.readValue(null);
    entry = (TradeEntryType)in.readValue(TradeEntryType.class.getClassLoader());
    baseVolume = (Double)in.readValue(null);
    originalCommission = (Double)in.readValue(null);
    originalCommissionCurrency = (String)in.readValue(null);
    commission = (Double)in.readValue(null);
    swap = (Double)in.readValue(null);
    showOriginalCommission = (Boolean)in.readValue(null);
    assetData = (TradeAssetData)in.readValue(TradeAssetData.class.getClassLoader());
    signalData = (OrderModelSignalData)in.readValue(OrderModelSignalData.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<OrderModel> CREATOR = new Parcelable.Creator<OrderModel>() {
    public OrderModel createFromParcel(Parcel in) {
      return new OrderModel(in);
    }
    public OrderModel[] newArray(int size) {
      return new OrderModel[size];
    }
  };
}
