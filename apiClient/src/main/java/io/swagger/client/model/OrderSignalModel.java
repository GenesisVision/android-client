/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import org.joda.time.DateTime;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * OrderSignalModel
 */

public class OrderSignalModel
{
	@SerializedName("providers")
	private List<OrderSignalProgramInfo> providers = null;

	@SerializedName("totalCommission")
	private Double totalCommission = null;

	@SerializedName("totalCommissionByType")
	private List<TotalCommission> totalCommissionByType = null;

	@SerializedName("tradingAccountId")
	private UUID tradingAccountId = null;

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("id")
	private UUID id = null;

	@SerializedName("login")
	private String login = null;

	@SerializedName("ticket")
	private String ticket = null;

	@SerializedName("symbol")
	private String symbol = null;

	@SerializedName("volume")
	private Double volume = null;

	@SerializedName("profit")
	private Double profit = null;

	@SerializedName("direction")
	private DirectionEnum direction = null;

	@SerializedName("date")
	private DateTime date = null;

	@SerializedName("price")
	private Double price = null;

	@SerializedName("priceCurrent")
	private Double priceCurrent = null;

	@SerializedName("entry")
	private EntryEnum entry = null;

	@SerializedName("baseVolume")
	private Double baseVolume = null;

	@SerializedName("originalCommission")
	private Double originalCommission = null;

	@SerializedName("originalCommissionCurrency")
	private String originalCommissionCurrency = null;

	@SerializedName("commission")
	private Double commission = null;

	@SerializedName("swap")
	private Double swap = null;

	@SerializedName("showOriginalCommission")
	private Boolean showOriginalCommission = null;

	@SerializedName("signalData")
	private OrderModelSignalData signalData = null;

	public OrderSignalModel providers(List<OrderSignalProgramInfo> providers) {
		this.providers = providers;
		return this;
	}

	public OrderSignalModel addProvidersItem(OrderSignalProgramInfo providersItem) {
		if (this.providers == null) {
			this.providers = new ArrayList<OrderSignalProgramInfo>();
		}
		this.providers.add(providersItem);
		return this;
	}

	/**
	 * Get providers
	 *
	 * @return providers
	 **/
	@ApiModelProperty(value = "")
	public List<OrderSignalProgramInfo> getProviders() {
		return providers;
	}

	public void setProviders(List<OrderSignalProgramInfo> providers) {
		this.providers = providers;
	}

	public OrderSignalModel totalCommission(Double totalCommission) {
		this.totalCommission = totalCommission;
		return this;
	}

	/**
	 * Get totalCommission
	 *
	 * @return totalCommission
	 **/
	@ApiModelProperty(value = "")
	public Double getTotalCommission() {
		return totalCommission;
	}

	public void setTotalCommission(Double totalCommission) {
		this.totalCommission = totalCommission;
	}

	public OrderSignalModel totalCommissionByType(List<TotalCommission> totalCommissionByType) {
		this.totalCommissionByType = totalCommissionByType;
		return this;
	}

	public OrderSignalModel addTotalCommissionByTypeItem(TotalCommission totalCommissionByTypeItem) {
		if (this.totalCommissionByType == null) {
			this.totalCommissionByType = new ArrayList<TotalCommission>();
		}
		this.totalCommissionByType.add(totalCommissionByTypeItem);
		return this;
	}

	/**
	 * Get totalCommissionByType
	 *
	 * @return totalCommissionByType
	 **/
	@ApiModelProperty(value = "")
	public List<TotalCommission> getTotalCommissionByType() {
		return totalCommissionByType;
	}

	public void setTotalCommissionByType(List<TotalCommission> totalCommissionByType) {
		this.totalCommissionByType = totalCommissionByType;
	}

	public OrderSignalModel tradingAccountId(UUID tradingAccountId) {
		this.tradingAccountId = tradingAccountId;
		return this;
	}

	/**
	 * Get tradingAccountId
	 *
	 * @return tradingAccountId
	 **/
	@ApiModelProperty(value = "")
	public UUID getTradingAccountId() {
		return tradingAccountId;
	}

	public void setTradingAccountId(UUID tradingAccountId) {
		this.tradingAccountId = tradingAccountId;
	}

	public OrderSignalModel currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@ApiModelProperty(value = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public OrderSignalModel id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@ApiModelProperty(value = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public OrderSignalModel login(String login) {
		this.login = login;
		return this;
	}

	/**
	 * Get login
	 *
	 * @return login
	 **/
	@ApiModelProperty(value = "")
	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public OrderSignalModel ticket(String ticket) {
		this.ticket = ticket;
		return this;
	}

	/**
	 * Get ticket
	 *
	 * @return ticket
	 **/
	@ApiModelProperty(value = "")
	public String getTicket() {
		return ticket;
	}

	public void setTicket(String ticket) {
		this.ticket = ticket;
	}

	public OrderSignalModel symbol(String symbol) {
		this.symbol = symbol;
		return this;
	}

	/**
	 * Get symbol
	 *
	 * @return symbol
	 **/
	@ApiModelProperty(value = "")
	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	public OrderSignalModel volume(Double volume) {
		this.volume = volume;
		return this;
	}

	/**
	 * Get volume
	 *
	 * @return volume
	 **/
	@ApiModelProperty(value = "")
	public Double getVolume() {
		return volume;
	}

	public void setVolume(Double volume) {
		this.volume = volume;
	}

	public OrderSignalModel profit(Double profit) {
		this.profit = profit;
		return this;
	}

	/**
	 * Get profit
	 *
	 * @return profit
	 **/
	@ApiModelProperty(value = "")
	public Double getProfit() {
		return profit;
	}

	public void setProfit(Double profit) {
		this.profit = profit;
	}

	public OrderSignalModel direction(DirectionEnum direction) {
		this.direction = direction;
		return this;
	}

	/**
	 * Get direction
	 *
	 * @return direction
	 **/
	@ApiModelProperty(value = "")
	public DirectionEnum getDirection() {
		return direction;
	}

	public void setDirection(DirectionEnum direction) {
		this.direction = direction;
	}

	public OrderSignalModel date(DateTime date) {
		this.date = date;
		return this;
	}

	/**
	 * Get date
	 *
	 * @return date
	 **/
	@ApiModelProperty(value = "")
	public DateTime getDate() {
		return date;
	}

	public void setDate(DateTime date) {
		this.date = date;
	}

	public OrderSignalModel price(Double price) {
		this.price = price;
		return this;
	}

	/**
	 * Get price
	 *
	 * @return price
	 **/
	@ApiModelProperty(value = "")
	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	public OrderSignalModel priceCurrent(Double priceCurrent) {
		this.priceCurrent = priceCurrent;
		return this;
	}

	/**
	 * Get priceCurrent
	 *
	 * @return priceCurrent
	 **/
	@ApiModelProperty(value = "")
	public Double getPriceCurrent() {
		return priceCurrent;
	}

	public void setPriceCurrent(Double priceCurrent) {
		this.priceCurrent = priceCurrent;
	}

	public OrderSignalModel entry(EntryEnum entry) {
		this.entry = entry;
		return this;
	}

	/**
	 * Get entry
	 *
	 * @return entry
	 **/
	@ApiModelProperty(value = "")
	public EntryEnum getEntry() {
		return entry;
	}

	public void setEntry(EntryEnum entry) {
		this.entry = entry;
	}

	public OrderSignalModel baseVolume(Double baseVolume) {
		this.baseVolume = baseVolume;
		return this;
	}

	/**
	 * Volume in account currency. Only filled when trade have zero commission (for paying fees with GVT)
	 *
	 * @return baseVolume
	 **/
	@ApiModelProperty(value = "Volume in account currency. Only filled when trade have zero commission (for paying fees with GVT)")
	public Double getBaseVolume() {
		return baseVolume;
	}

	public void setBaseVolume(Double baseVolume) {
		this.baseVolume = baseVolume;
	}

	public OrderSignalModel originalCommission(Double originalCommission) {
		this.originalCommission = originalCommission;
		return this;
	}

	/**
	 * Huobi: sell - quote currency (right), buy - base symbol currency (left)
	 *
	 * @return originalCommission
	 **/
	@ApiModelProperty(value = "Huobi: sell - quote currency (right), buy - base symbol currency (left)")
	public Double getOriginalCommission() {
		return originalCommission;
	}

	public void setOriginalCommission(Double originalCommission) {
		this.originalCommission = originalCommission;
	}

	public OrderSignalModel originalCommissionCurrency(String originalCommissionCurrency) {
		this.originalCommissionCurrency = originalCommissionCurrency;
		return this;
	}

	/**
	 * Get originalCommissionCurrency
	 *
	 * @return originalCommissionCurrency
	 **/
	@ApiModelProperty(value = "")
	public String getOriginalCommissionCurrency() {
		return originalCommissionCurrency;
	}

	public void setOriginalCommissionCurrency(String originalCommissionCurrency) {
		this.originalCommissionCurrency = originalCommissionCurrency;
	}

	public OrderSignalModel commission(Double commission) {
		this.commission = commission;
		return this;
	}

	/**
	 * In account currency
	 *
	 * @return commission
	 **/
	@ApiModelProperty(value = "In account currency")
	public Double getCommission() {
		return commission;
	}

	public void setCommission(Double commission) {
		this.commission = commission;
	}

	public OrderSignalModel swap(Double swap) {
		this.swap = swap;
		return this;
	}

	/**
	 * Get swap
	 *
	 * @return swap
	 **/
	@ApiModelProperty(value = "")
	public Double getSwap() {
		return swap;
	}

	public void setSwap(Double swap) {
		this.swap = swap;
	}

	public OrderSignalModel showOriginalCommission(Boolean showOriginalCommission) {
		this.showOriginalCommission = showOriginalCommission;
		return this;
	}

	/**
	 * Get showOriginalCommission
	 *
	 * @return showOriginalCommission
	 **/
	@ApiModelProperty(value = "")
	public Boolean isShowOriginalCommission() {
		return showOriginalCommission;
	}

	public void setShowOriginalCommission(Boolean showOriginalCommission) {
		this.showOriginalCommission = showOriginalCommission;
	}

	public OrderSignalModel signalData(OrderModelSignalData signalData) {
		this.signalData = signalData;
		return this;
	}

	/**
	 * For signals
	 *
	 * @return signalData
	 **/
	@ApiModelProperty(value = "For signals")
	public OrderModelSignalData getSignalData() {
		return signalData;
	}

	public void setSignalData(OrderModelSignalData signalData) {
		this.signalData = signalData;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		OrderSignalModel orderSignalModel = (OrderSignalModel) o;
		return Objects.equals(this.providers, orderSignalModel.providers) &&
				Objects.equals(this.totalCommission, orderSignalModel.totalCommission) &&
				Objects.equals(this.totalCommissionByType, orderSignalModel.totalCommissionByType) &&
				Objects.equals(this.tradingAccountId, orderSignalModel.tradingAccountId) &&
				Objects.equals(this.currency, orderSignalModel.currency) &&
				Objects.equals(this.id, orderSignalModel.id) &&
				Objects.equals(this.login, orderSignalModel.login) &&
				Objects.equals(this.ticket, orderSignalModel.ticket) &&
				Objects.equals(this.symbol, orderSignalModel.symbol) &&
				Objects.equals(this.volume, orderSignalModel.volume) &&
				Objects.equals(this.profit, orderSignalModel.profit) &&
				Objects.equals(this.direction, orderSignalModel.direction) &&
				Objects.equals(this.date, orderSignalModel.date) &&
				Objects.equals(this.price, orderSignalModel.price) &&
				Objects.equals(this.priceCurrent, orderSignalModel.priceCurrent) &&
				Objects.equals(this.entry, orderSignalModel.entry) &&
				Objects.equals(this.baseVolume, orderSignalModel.baseVolume) &&
				Objects.equals(this.originalCommission, orderSignalModel.originalCommission) &&
				Objects.equals(this.originalCommissionCurrency, orderSignalModel.originalCommissionCurrency) &&
				Objects.equals(this.commission, orderSignalModel.commission) &&
				Objects.equals(this.swap, orderSignalModel.swap) &&
				Objects.equals(this.showOriginalCommission, orderSignalModel.showOriginalCommission) &&
				Objects.equals(this.signalData, orderSignalModel.signalData);
	}

	@Override
	public int hashCode() {
		return Objects.hash(providers, totalCommission, totalCommissionByType, tradingAccountId, currency, id, login, ticket, symbol, volume, profit, direction, date, price, priceCurrent, entry, baseVolume, originalCommission, originalCommissionCurrency, commission, swap, showOriginalCommission, signalData);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class OrderSignalModel {\n");

		sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
		sb.append("    totalCommission: ").append(toIndentedString(totalCommission)).append("\n");
		sb.append("    totalCommissionByType: ").append(toIndentedString(totalCommissionByType)).append("\n");
		sb.append("    tradingAccountId: ").append(toIndentedString(tradingAccountId)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    login: ").append(toIndentedString(login)).append("\n");
		sb.append("    ticket: ").append(toIndentedString(ticket)).append("\n");
		sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
		sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
		sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
		sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
		sb.append("    date: ").append(toIndentedString(date)).append("\n");
		sb.append("    price: ").append(toIndentedString(price)).append("\n");
		sb.append("    priceCurrent: ").append(toIndentedString(priceCurrent)).append("\n");
		sb.append("    entry: ").append(toIndentedString(entry)).append("\n");
		sb.append("    baseVolume: ").append(toIndentedString(baseVolume)).append("\n");
		sb.append("    originalCommission: ").append(toIndentedString(originalCommission)).append("\n");
		sb.append("    originalCommissionCurrency: ").append(toIndentedString(originalCommissionCurrency)).append("\n");
		sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
		sb.append("    swap: ").append(toIndentedString(swap)).append("\n");
		sb.append("    showOriginalCommission: ").append(toIndentedString(showOriginalCommission)).append("\n");
		sb.append("    signalData: ").append(toIndentedString(signalData)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USDT("USDT"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}


	/**
	 * Gets or Sets direction
	 */
	@JsonAdapter(DirectionEnum.Adapter.class)
	public enum DirectionEnum
	{
		BUY("Buy"),

		SELL("Sell"),

		BALANCE("Balance"),

		CREDIT("Credit"),

		UNDEFINED("Undefined");

		public static DirectionEnum fromValue(String text) {
			for (DirectionEnum b : DirectionEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		DirectionEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<DirectionEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public DirectionEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return DirectionEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets entry
	 */
	@JsonAdapter(EntryEnum.Adapter.class)
	public enum EntryEnum
	{
		IN("In"),

		OUT("Out"),

		INOUT("InOut"),

		OUTBY("OutBy");

		public static EntryEnum fromValue(String text) {
			for (EntryEnum b : EntryEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		EntryEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<EntryEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final EntryEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public EntryEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return EntryEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

