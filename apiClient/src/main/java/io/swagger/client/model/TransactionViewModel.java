/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * TransactionViewModel
 */


public class TransactionViewModel implements Parcelable
{
	public static final Parcelable.Creator<TransactionViewModel> CREATOR = new Parcelable.Creator<TransactionViewModel>()
	{
		public TransactionViewModel createFromParcel(Parcel in) {
			return new TransactionViewModel(in);
		}

		public TransactionViewModel[] newArray(int size) {
			return new TransactionViewModel[size];
		}
	};

	@SerializedName("wallet")
	private WalletRowCell wallet = null;

	@SerializedName("date")
	private DateTime date = null;

	@SerializedName("status")
	private MultiWalletTransactionStatus status = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("amount")
	private AmountRowCell amount = null;

	@SerializedName("asset")
	private AssetDetails asset = null;

	@SerializedName("details")
	private List<TransactionDetail> details = null;

	public TransactionViewModel() {
	}

	TransactionViewModel(Parcel in) {
		wallet = (WalletRowCell) in.readValue(WalletRowCell.class.getClassLoader());
		date = (DateTime) in.readValue(DateTime.class.getClassLoader());
		status = (MultiWalletTransactionStatus) in.readValue(MultiWalletTransactionStatus.class.getClassLoader());
		description = (String) in.readValue(null);
		amount = (AmountRowCell) in.readValue(AmountRowCell.class.getClassLoader());
		asset = (AssetDetails) in.readValue(AssetDetails.class.getClassLoader());
		details = (List<TransactionDetail>) in.readValue(TransactionDetail.class.getClassLoader());
	}

	public TransactionViewModel wallet(WalletRowCell wallet) {
		this.wallet = wallet;
		return this;
	}

	/**
	 * Get wallet
	 *
	 * @return wallet
	 **/
	@Schema(description = "")
	public WalletRowCell getWallet() {
		return wallet;
	}

	public void setWallet(WalletRowCell wallet) {
		this.wallet = wallet;
	}

	public TransactionViewModel date(DateTime date) {
		this.date = date;
		return this;
	}

	/**
	 * Get date
	 *
	 * @return date
	 **/
	@Schema(description = "")
	public DateTime getDate() {
		return date;
	}

	public void setDate(DateTime date) {
		this.date = date;
	}

	public TransactionViewModel status(MultiWalletTransactionStatus status) {
		this.status = status;
		return this;
	}

	/**
	 * Get status
	 *
	 * @return status
	 **/
	@Schema(description = "")
	public MultiWalletTransactionStatus getStatus() {
		return status;
	}

	public void setStatus(MultiWalletTransactionStatus status) {
		this.status = status;
	}

	public TransactionViewModel description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@Schema(description = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public TransactionViewModel amount(AmountRowCell amount) {
		this.amount = amount;
		return this;
	}

	/**
	 * Get amount
	 *
	 * @return amount
	 **/
	@Schema(description = "")
	public AmountRowCell getAmount() {
		return amount;
	}

	public void setAmount(AmountRowCell amount) {
		this.amount = amount;
	}

	public TransactionViewModel asset(AssetDetails asset) {
		this.asset = asset;
		return this;
	}

	/**
	 * Get asset
	 *
	 * @return asset
	 **/
	@Schema(description = "")
	public AssetDetails getAsset() {
		return asset;
	}

	public void setAsset(AssetDetails asset) {
		this.asset = asset;
	}

	public TransactionViewModel details(List<TransactionDetail> details) {
		this.details = details;
		return this;
	}

	public TransactionViewModel addDetailsItem(TransactionDetail detailsItem) {
		if (this.details == null) {
			this.details = new ArrayList<TransactionDetail>();
		}
		this.details.add(detailsItem);
		return this;
	}

	/**
	 * Get details
	 *
	 * @return details
	 **/
	@Schema(description = "")
	public List<TransactionDetail> getDetails() {
		return details;
	}

	public void setDetails(List<TransactionDetail> details) {
		this.details = details;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		TransactionViewModel transactionViewModel = (TransactionViewModel) o;
		return Objects.equals(this.wallet, transactionViewModel.wallet) &&
				Objects.equals(this.date, transactionViewModel.date) &&
				Objects.equals(this.status, transactionViewModel.status) &&
				Objects.equals(this.description, transactionViewModel.description) &&
				Objects.equals(this.amount, transactionViewModel.amount) &&
				Objects.equals(this.asset, transactionViewModel.asset) &&
				Objects.equals(this.details, transactionViewModel.details);
	}

	@Override
	public int hashCode() {
		return Objects.hash(wallet, date, status, description, amount, asset, details);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class TransactionViewModel {\n");

		sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
		sb.append("    date: ").append(toIndentedString(date)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
		sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
		sb.append("    details: ").append(toIndentedString(details)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(wallet);
		out.writeValue(date);
		out.writeValue(status);
		out.writeValue(description);
		out.writeValue(amount);
		out.writeValue(asset);
		out.writeValue(details);
	}

	public int describeContents() {
		return 0;
	}
}
