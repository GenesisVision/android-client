/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinanceRawFuturesUsdtAsset;
import io.swagger.client.model.BinanceRawFuturesUsdtSymbol;
import io.swagger.client.model.BinanceRawRateLimit;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawFuturesUsdtExchangeInfo
 */


public class BinanceRawFuturesUsdtExchangeInfo implements Parcelable {
  @SerializedName("timeZone")
  private String timeZone = null;

  @SerializedName("serverTime")
  private DateTime serverTime = null;

  @SerializedName("rateLimits")
  private List<BinanceRawRateLimit> rateLimits = null;

  @SerializedName("symbols")
  private List<BinanceRawFuturesUsdtSymbol> symbols = null;

  @SerializedName("assets")
  private List<BinanceRawFuturesUsdtAsset> assets = null;

  public BinanceRawFuturesUsdtExchangeInfo() {
  }
  public BinanceRawFuturesUsdtExchangeInfo timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @Schema(description = "")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public BinanceRawFuturesUsdtExchangeInfo serverTime(DateTime serverTime) {
    this.serverTime = serverTime;
    return this;
  }

   /**
   * Get serverTime
   * @return serverTime
  **/
  @Schema(description = "")
  public DateTime getServerTime() {
    return serverTime;
  }

  public void setServerTime(DateTime serverTime) {
    this.serverTime = serverTime;
  }

  public BinanceRawFuturesUsdtExchangeInfo rateLimits(List<BinanceRawRateLimit> rateLimits) {
    this.rateLimits = rateLimits;
    return this;
  }

  public BinanceRawFuturesUsdtExchangeInfo addRateLimitsItem(BinanceRawRateLimit rateLimitsItem) {
    if (this.rateLimits == null) {
      this.rateLimits = new ArrayList<BinanceRawRateLimit>();
    }
    this.rateLimits.add(rateLimitsItem);
    return this;
  }

   /**
   * Get rateLimits
   * @return rateLimits
  **/
  @Schema(description = "")
  public List<BinanceRawRateLimit> getRateLimits() {
    return rateLimits;
  }

  public void setRateLimits(List<BinanceRawRateLimit> rateLimits) {
    this.rateLimits = rateLimits;
  }

  public BinanceRawFuturesUsdtExchangeInfo symbols(List<BinanceRawFuturesUsdtSymbol> symbols) {
    this.symbols = symbols;
    return this;
  }

  public BinanceRawFuturesUsdtExchangeInfo addSymbolsItem(BinanceRawFuturesUsdtSymbol symbolsItem) {
    if (this.symbols == null) {
      this.symbols = new ArrayList<BinanceRawFuturesUsdtSymbol>();
    }
    this.symbols.add(symbolsItem);
    return this;
  }

   /**
   * Get symbols
   * @return symbols
  **/
  @Schema(description = "")
  public List<BinanceRawFuturesUsdtSymbol> getSymbols() {
    return symbols;
  }

  public void setSymbols(List<BinanceRawFuturesUsdtSymbol> symbols) {
    this.symbols = symbols;
  }

  public BinanceRawFuturesUsdtExchangeInfo assets(List<BinanceRawFuturesUsdtAsset> assets) {
    this.assets = assets;
    return this;
  }

  public BinanceRawFuturesUsdtExchangeInfo addAssetsItem(BinanceRawFuturesUsdtAsset assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<BinanceRawFuturesUsdtAsset>();
    }
    this.assets.add(assetsItem);
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @Schema(description = "")
  public List<BinanceRawFuturesUsdtAsset> getAssets() {
    return assets;
  }

  public void setAssets(List<BinanceRawFuturesUsdtAsset> assets) {
    this.assets = assets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawFuturesUsdtExchangeInfo binanceRawFuturesUsdtExchangeInfo = (BinanceRawFuturesUsdtExchangeInfo) o;
    return Objects.equals(this.timeZone, binanceRawFuturesUsdtExchangeInfo.timeZone) &&
        Objects.equals(this.serverTime, binanceRawFuturesUsdtExchangeInfo.serverTime) &&
        Objects.equals(this.rateLimits, binanceRawFuturesUsdtExchangeInfo.rateLimits) &&
        Objects.equals(this.symbols, binanceRawFuturesUsdtExchangeInfo.symbols) &&
        Objects.equals(this.assets, binanceRawFuturesUsdtExchangeInfo.assets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeZone, serverTime, rateLimits, symbols, assets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawFuturesUsdtExchangeInfo {\n");
    
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    serverTime: ").append(toIndentedString(serverTime)).append("\n");
    sb.append("    rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(timeZone);
    out.writeValue(serverTime);
    out.writeValue(rateLimits);
    out.writeValue(symbols);
    out.writeValue(assets);
  }

  BinanceRawFuturesUsdtExchangeInfo(Parcel in) {
    timeZone = (String)in.readValue(null);
    serverTime = (DateTime)in.readValue(DateTime.class.getClassLoader());
    rateLimits = (List<BinanceRawRateLimit>)in.readValue(BinanceRawRateLimit.class.getClassLoader());
    symbols = (List<BinanceRawFuturesUsdtSymbol>)in.readValue(BinanceRawFuturesUsdtSymbol.class.getClassLoader());
    assets = (List<BinanceRawFuturesUsdtAsset>)in.readValue(BinanceRawFuturesUsdtAsset.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawFuturesUsdtExchangeInfo> CREATOR = new Parcelable.Creator<BinanceRawFuturesUsdtExchangeInfo>() {
    public BinanceRawFuturesUsdtExchangeInfo createFromParcel(Parcel in) {
      return new BinanceRawFuturesUsdtExchangeInfo(in);
    }
    public BinanceRawFuturesUsdtExchangeInfo[] newArray(int size) {
      return new BinanceRawFuturesUsdtExchangeInfo[size];
    }
  };
}
