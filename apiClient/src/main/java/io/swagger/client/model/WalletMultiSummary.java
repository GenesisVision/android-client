/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * WalletMultiSummary
 */


public class WalletMultiSummary implements Parcelable
{
	public static final Parcelable.Creator<WalletMultiSummary> CREATOR = new Parcelable.Creator<WalletMultiSummary>()
	{
		public WalletMultiSummary createFromParcel(Parcel in) {
			return new WalletMultiSummary(in);
		}

		public WalletMultiSummary[] newArray(int size) {
			return new WalletMultiSummary[size];
		}
	};

	@SerializedName("grandTotal")
	private WalletsGrandTotal grandTotal = null;

	@SerializedName("wallets")
	private List<WalletData> wallets = null;

	@SerializedName("payFeesWithGvt")
	private Boolean payFeesWithGvt = null;

	public WalletMultiSummary() {
	}

	WalletMultiSummary(Parcel in) {
		grandTotal = (WalletsGrandTotal) in.readValue(WalletsGrandTotal.class.getClassLoader());
		wallets = (List<WalletData>) in.readValue(WalletData.class.getClassLoader());
		payFeesWithGvt = (Boolean) in.readValue(null);
	}

	public WalletMultiSummary grandTotal(WalletsGrandTotal grandTotal) {
		this.grandTotal = grandTotal;
		return this;
	}

	/**
	 * Get grandTotal
	 *
	 * @return grandTotal
	 **/
	@Schema(description = "")
	public WalletsGrandTotal getGrandTotal() {
		return grandTotal;
	}

	public void setGrandTotal(WalletsGrandTotal grandTotal) {
		this.grandTotal = grandTotal;
	}

	public WalletMultiSummary wallets(List<WalletData> wallets) {
		this.wallets = wallets;
		return this;
	}

	public WalletMultiSummary addWalletsItem(WalletData walletsItem) {
		if (this.wallets == null) {
			this.wallets = new ArrayList<WalletData>();
		}
		this.wallets.add(walletsItem);
		return this;
	}

	/**
	 * Get wallets
	 *
	 * @return wallets
	 **/
	@Schema(description = "")
	public List<WalletData> getWallets() {
		return wallets;
	}

	public void setWallets(List<WalletData> wallets) {
		this.wallets = wallets;
	}

	public WalletMultiSummary payFeesWithGvt(Boolean payFeesWithGvt) {
		this.payFeesWithGvt = payFeesWithGvt;
		return this;
	}

	/**
	 * Get payFeesWithGvt
	 *
	 * @return payFeesWithGvt
	 **/
	@Schema(description = "")
	public Boolean isPayFeesWithGvt() {
		return payFeesWithGvt;
	}

	public void setPayFeesWithGvt(Boolean payFeesWithGvt) {
		this.payFeesWithGvt = payFeesWithGvt;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WalletMultiSummary walletMultiSummary = (WalletMultiSummary) o;
		return Objects.equals(this.grandTotal, walletMultiSummary.grandTotal) &&
				Objects.equals(this.wallets, walletMultiSummary.wallets) &&
				Objects.equals(this.payFeesWithGvt, walletMultiSummary.payFeesWithGvt);
	}

	@Override
	public int hashCode() {
		return Objects.hash(grandTotal, wallets, payFeesWithGvt);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WalletMultiSummary {\n");

		sb.append("    grandTotal: ").append(toIndentedString(grandTotal)).append("\n");
		sb.append("    wallets: ").append(toIndentedString(wallets)).append("\n");
		sb.append("    payFeesWithGvt: ").append(toIndentedString(payFeesWithGvt)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(grandTotal);
		out.writeValue(wallets);
		out.writeValue(payFeesWithGvt);
	}

	public int describeContents() {
		return 0;
	}
}
