/*
 * Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * ClosePeriodData
 */

public class ClosePeriodData
{
	@SerializedName("currentPeriod")
	private Period currentPeriod = null;

	@SerializedName("tokenHolders")
	private List<InvestorAmount> tokenHolders = null;

	@SerializedName("canCloseCurrentPeriod")
	private Boolean canCloseCurrentPeriod = null;

	@SerializedName("investmentProgramStatus")
	private InvestmentProgramStatusEnum investmentProgramStatus = null;

	public ClosePeriodData currentPeriod(Period currentPeriod) {
		this.currentPeriod = currentPeriod;
		return this;
	}

	/**
	 * Get currentPeriod
	 *
	 * @return currentPeriod
	 **/
	@ApiModelProperty(value = "")
	public Period getCurrentPeriod() {
		return currentPeriod;
	}

	public void setCurrentPeriod(Period currentPeriod) {
		this.currentPeriod = currentPeriod;
	}

	public ClosePeriodData tokenHolders(List<InvestorAmount> tokenHolders) {
		this.tokenHolders = tokenHolders;
		return this;
	}

	public ClosePeriodData addTokenHoldersItem(InvestorAmount tokenHoldersItem) {
		if (this.tokenHolders == null) {
			this.tokenHolders = new ArrayList<InvestorAmount>();
		}
		this.tokenHolders.add(tokenHoldersItem);
		return this;
	}

	/**
	 * Get tokenHolders
	 *
	 * @return tokenHolders
	 **/
	@ApiModelProperty(value = "")
	public List<InvestorAmount> getTokenHolders() {
		return tokenHolders;
	}

	public void setTokenHolders(List<InvestorAmount> tokenHolders) {
		this.tokenHolders = tokenHolders;
	}

	public ClosePeriodData canCloseCurrentPeriod(Boolean canCloseCurrentPeriod) {
		this.canCloseCurrentPeriod = canCloseCurrentPeriod;
		return this;
	}

	/**
	 * Get canCloseCurrentPeriod
	 *
	 * @return canCloseCurrentPeriod
	 **/
	@ApiModelProperty(value = "")
	public Boolean isCanCloseCurrentPeriod() {
		return canCloseCurrentPeriod;
	}

	public void setCanCloseCurrentPeriod(Boolean canCloseCurrentPeriod) {
		this.canCloseCurrentPeriod = canCloseCurrentPeriod;
	}

	public ClosePeriodData investmentProgramStatus(InvestmentProgramStatusEnum investmentProgramStatus) {
		this.investmentProgramStatus = investmentProgramStatus;
		return this;
	}

	/**
	 * Get investmentProgramStatus
	 *
	 * @return investmentProgramStatus
	 **/
	@ApiModelProperty(value = "")
	public InvestmentProgramStatusEnum getInvestmentProgramStatus() {
		return investmentProgramStatus;
	}

	public void setInvestmentProgramStatus(InvestmentProgramStatusEnum investmentProgramStatus) {
		this.investmentProgramStatus = investmentProgramStatus;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ClosePeriodData closePeriodData = (ClosePeriodData) o;
		return Objects.equals(this.currentPeriod, closePeriodData.currentPeriod) &&
				Objects.equals(this.tokenHolders, closePeriodData.tokenHolders) &&
				Objects.equals(this.canCloseCurrentPeriod, closePeriodData.canCloseCurrentPeriod) &&
				Objects.equals(this.investmentProgramStatus, closePeriodData.investmentProgramStatus);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currentPeriod, tokenHolders, canCloseCurrentPeriod, investmentProgramStatus);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ClosePeriodData {\n");

		sb.append("    currentPeriod: ").append(toIndentedString(currentPeriod)).append("\n");
		sb.append("    tokenHolders: ").append(toIndentedString(tokenHolders)).append("\n");
		sb.append("    canCloseCurrentPeriod: ").append(toIndentedString(canCloseCurrentPeriod)).append("\n");
		sb.append("    investmentProgramStatus: ").append(toIndentedString(investmentProgramStatus)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets investmentProgramStatus
	 */
	@JsonAdapter(InvestmentProgramStatusEnum.Adapter.class)
	public enum InvestmentProgramStatusEnum
	{
		NONE("None"),

		FORCLOSINGDUETOINACTIVITY("ForClosingDueToInactivity");

		public static InvestmentProgramStatusEnum fromValue(String text) {
			for (InvestmentProgramStatusEnum b : InvestmentProgramStatusEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		InvestmentProgramStatusEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<InvestmentProgramStatusEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final InvestmentProgramStatusEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public InvestmentProgramStatusEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return InvestmentProgramStatusEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

