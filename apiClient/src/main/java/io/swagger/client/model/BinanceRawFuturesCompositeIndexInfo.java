/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * BinanceRawFuturesCompositeIndexInfo
 */


public class BinanceRawFuturesCompositeIndexInfo implements Parcelable {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("timestamp")
  private DateTime timestamp = null;

  @SerializedName("baseAssets")
  private List<BinanceRawFuturesCompositeIndexInfoAsset> baseAssets = null;

  public BinanceRawFuturesCompositeIndexInfo() {
  }
  public BinanceRawFuturesCompositeIndexInfo symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @Schema(description = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public BinanceRawFuturesCompositeIndexInfo timestamp(DateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(description = "")
  public DateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(DateTime timestamp) {
    this.timestamp = timestamp;
  }

  public BinanceRawFuturesCompositeIndexInfo baseAssets(List<BinanceRawFuturesCompositeIndexInfoAsset> baseAssets) {
    this.baseAssets = baseAssets;
    return this;
  }

  public BinanceRawFuturesCompositeIndexInfo addBaseAssetsItem(BinanceRawFuturesCompositeIndexInfoAsset baseAssetsItem) {
    if (this.baseAssets == null) {
      this.baseAssets = new ArrayList<BinanceRawFuturesCompositeIndexInfoAsset>();
    }
    this.baseAssets.add(baseAssetsItem);
    return this;
  }

   /**
   * Get baseAssets
   * @return baseAssets
  **/
  @Schema(description = "")
  public List<BinanceRawFuturesCompositeIndexInfoAsset> getBaseAssets() {
    return baseAssets;
  }

  public void setBaseAssets(List<BinanceRawFuturesCompositeIndexInfoAsset> baseAssets) {
    this.baseAssets = baseAssets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawFuturesCompositeIndexInfo binanceRawFuturesCompositeIndexInfo = (BinanceRawFuturesCompositeIndexInfo) o;
    return Objects.equals(this.symbol, binanceRawFuturesCompositeIndexInfo.symbol) &&
        Objects.equals(this.timestamp, binanceRawFuturesCompositeIndexInfo.timestamp) &&
        Objects.equals(this.baseAssets, binanceRawFuturesCompositeIndexInfo.baseAssets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, timestamp, baseAssets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawFuturesCompositeIndexInfo {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    baseAssets: ").append(toIndentedString(baseAssets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(symbol);
    out.writeValue(timestamp);
    out.writeValue(baseAssets);
  }

  BinanceRawFuturesCompositeIndexInfo(Parcel in) {
    symbol = (String)in.readValue(null);
    timestamp = (DateTime)in.readValue(DateTime.class.getClassLoader());
    baseAssets = (List<BinanceRawFuturesCompositeIndexInfoAsset>)in.readValue(BinanceRawFuturesCompositeIndexInfoAsset.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawFuturesCompositeIndexInfo> CREATOR = new Parcelable.Creator<BinanceRawFuturesCompositeIndexInfo>() {
    public BinanceRawFuturesCompositeIndexInfo createFromParcel(Parcel in) {
      return new BinanceRawFuturesCompositeIndexInfo(in);
    }
    public BinanceRawFuturesCompositeIndexInfo[] newArray(int size) {
      return new BinanceRawFuturesCompositeIndexInfo[size];
    }
  };
}
