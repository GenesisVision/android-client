/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * ConvertingDetails
 */

public class ConvertingDetails
{
	@SerializedName("currencyTo")
	private CurrencyToEnum currencyTo = null;

	@SerializedName("currencyToName")
	private String currencyToName = null;

	@SerializedName("amountTo")
	private Double amountTo = null;

	@SerializedName("rateValue")
	private Double rateValue = null;

	@SerializedName("currencyToLogo")
	private String currencyToLogo = null;

	public ConvertingDetails currencyTo(CurrencyToEnum currencyTo) {
		this.currencyTo = currencyTo;
		return this;
	}

	/**
	 * Get currencyTo
	 *
	 * @return currencyTo
	 **/
	@ApiModelProperty(value = "")
	public CurrencyToEnum getCurrencyTo() {
		return currencyTo;
	}

	public void setCurrencyTo(CurrencyToEnum currencyTo) {
		this.currencyTo = currencyTo;
	}

	public ConvertingDetails currencyToName(String currencyToName) {
		this.currencyToName = currencyToName;
		return this;
	}

	/**
	 * Get currencyToName
	 *
	 * @return currencyToName
	 **/
	@ApiModelProperty(value = "")
	public String getCurrencyToName() {
		return currencyToName;
	}

	public void setCurrencyToName(String currencyToName) {
		this.currencyToName = currencyToName;
	}

	public ConvertingDetails amountTo(Double amountTo) {
		this.amountTo = amountTo;
		return this;
	}

	/**
	 * Get amountTo
	 *
	 * @return amountTo
	 **/
	@ApiModelProperty(value = "")
	public Double getAmountTo() {
		return amountTo;
	}

	public void setAmountTo(Double amountTo) {
		this.amountTo = amountTo;
	}

	public ConvertingDetails rateValue(Double rateValue) {
		this.rateValue = rateValue;
		return this;
	}

	/**
	 * Get rateValue
	 *
	 * @return rateValue
	 **/
	@ApiModelProperty(value = "")
	public Double getRateValue() {
		return rateValue;
	}

	public void setRateValue(Double rateValue) {
		this.rateValue = rateValue;
	}

	public ConvertingDetails currencyToLogo(String currencyToLogo) {
		this.currencyToLogo = currencyToLogo;
		return this;
	}

	/**
	 * Get currencyToLogo
	 *
	 * @return currencyToLogo
	 **/
	@ApiModelProperty(value = "")
	public String getCurrencyToLogo() {
		return currencyToLogo;
	}

	public void setCurrencyToLogo(String currencyToLogo) {
		this.currencyToLogo = currencyToLogo;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ConvertingDetails convertingDetails = (ConvertingDetails) o;
		return Objects.equals(this.currencyTo, convertingDetails.currencyTo) &&
				Objects.equals(this.currencyToName, convertingDetails.currencyToName) &&
				Objects.equals(this.amountTo, convertingDetails.amountTo) &&
				Objects.equals(this.rateValue, convertingDetails.rateValue) &&
				Objects.equals(this.currencyToLogo, convertingDetails.currencyToLogo);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currencyTo, currencyToName, amountTo, rateValue, currencyToLogo);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ConvertingDetails {\n");

		sb.append("    currencyTo: ").append(toIndentedString(currencyTo)).append("\n");
		sb.append("    currencyToName: ").append(toIndentedString(currencyToName)).append("\n");
		sb.append("    amountTo: ").append(toIndentedString(amountTo)).append("\n");
		sb.append("    rateValue: ").append(toIndentedString(rateValue)).append("\n");
		sb.append("    currencyToLogo: ").append(toIndentedString(currencyToLogo)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currencyTo
	 */
	@JsonAdapter(CurrencyToEnum.Adapter.class)
	public enum CurrencyToEnum
	{
		BTC("BTC"),

		ETH("ETH"),

		USDT("USDT"),

		GVT("GVT"),

		UNDEFINED("Undefined"),

		ADA("ADA"),

		XRP("XRP"),

		BCH("BCH"),

		LTC("LTC"),

		DOGE("DOGE"),

		BNB("BNB"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyToEnum fromValue(String text) {
			for (CurrencyToEnum b : CurrencyToEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyToEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyToEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyToEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyToEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyToEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

