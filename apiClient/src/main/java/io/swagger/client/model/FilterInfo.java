/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * FilterInfo
 */


public class FilterInfo implements Parcelable
{
	public static final Parcelable.Creator<FilterInfo> CREATOR = new Parcelable.Creator<FilterInfo>()
	{
		public FilterInfo createFromParcel(Parcel in) {
			return new FilterInfo(in);
		}

		public FilterInfo[] newArray(int size) {
			return new FilterInfo[size];
		}
	};

	@SerializedName("walletTransactions")
	private List<FilterItemInfo> walletTransactions = null;

	@SerializedName("walletExternalTransactions")
	private List<FilterItemInfo> walletExternalTransactions = null;

	@SerializedName("events")
	private EventFilters events = null;

	@SerializedName("assets")
	private List<FilterItemInfo> assets = null;

	@SerializedName("fundsHistoryEvents")
	private List<FilterItemInfo> fundsHistoryEvents = null;

	public FilterInfo() {
	}

	FilterInfo(Parcel in) {
		walletTransactions = (List<FilterItemInfo>) in.readValue(FilterItemInfo.class.getClassLoader());
		walletExternalTransactions = (List<FilterItemInfo>) in.readValue(FilterItemInfo.class.getClassLoader());
		events = (EventFilters) in.readValue(EventFilters.class.getClassLoader());
		assets = (List<FilterItemInfo>) in.readValue(FilterItemInfo.class.getClassLoader());
		fundsHistoryEvents = (List<FilterItemInfo>) in.readValue(FilterItemInfo.class.getClassLoader());
	}

	public FilterInfo walletTransactions(List<FilterItemInfo> walletTransactions) {
		this.walletTransactions = walletTransactions;
		return this;
	}

	public FilterInfo addWalletTransactionsItem(FilterItemInfo walletTransactionsItem) {
		if (this.walletTransactions == null) {
			this.walletTransactions = new ArrayList<FilterItemInfo>();
		}
		this.walletTransactions.add(walletTransactionsItem);
		return this;
	}

	/**
	 * Get walletTransactions
	 *
	 * @return walletTransactions
	 **/
	@Schema(description = "")
	public List<FilterItemInfo> getWalletTransactions() {
		return walletTransactions;
	}

	public void setWalletTransactions(List<FilterItemInfo> walletTransactions) {
		this.walletTransactions = walletTransactions;
	}

	public FilterInfo walletExternalTransactions(List<FilterItemInfo> walletExternalTransactions) {
		this.walletExternalTransactions = walletExternalTransactions;
		return this;
	}

	public FilterInfo addWalletExternalTransactionsItem(FilterItemInfo walletExternalTransactionsItem) {
		if (this.walletExternalTransactions == null) {
			this.walletExternalTransactions = new ArrayList<FilterItemInfo>();
		}
		this.walletExternalTransactions.add(walletExternalTransactionsItem);
		return this;
	}

	/**
	 * Get walletExternalTransactions
	 *
	 * @return walletExternalTransactions
	 **/
	@Schema(description = "")
	public List<FilterItemInfo> getWalletExternalTransactions() {
		return walletExternalTransactions;
	}

	public void setWalletExternalTransactions(List<FilterItemInfo> walletExternalTransactions) {
		this.walletExternalTransactions = walletExternalTransactions;
	}

	public FilterInfo events(EventFilters events) {
		this.events = events;
		return this;
	}

	/**
	 * Get events
	 *
	 * @return events
	 **/
	@Schema(description = "")
	public EventFilters getEvents() {
		return events;
	}

	public void setEvents(EventFilters events) {
		this.events = events;
	}

	public FilterInfo assets(List<FilterItemInfo> assets) {
		this.assets = assets;
		return this;
	}

	public FilterInfo addAssetsItem(FilterItemInfo assetsItem) {
		if (this.assets == null) {
			this.assets = new ArrayList<FilterItemInfo>();
		}
		this.assets.add(assetsItem);
		return this;
	}

	/**
	 * Get assets
	 *
	 * @return assets
	 **/
	@Schema(description = "")
	public List<FilterItemInfo> getAssets() {
		return assets;
	}

	public void setAssets(List<FilterItemInfo> assets) {
		this.assets = assets;
	}

	public FilterInfo fundsHistoryEvents(List<FilterItemInfo> fundsHistoryEvents) {
		this.fundsHistoryEvents = fundsHistoryEvents;
		return this;
	}

	public FilterInfo addFundsHistoryEventsItem(FilterItemInfo fundsHistoryEventsItem) {
		if (this.fundsHistoryEvents == null) {
			this.fundsHistoryEvents = new ArrayList<FilterItemInfo>();
		}
		this.fundsHistoryEvents.add(fundsHistoryEventsItem);
		return this;
	}

	/**
	 * Get fundsHistoryEvents
	 *
	 * @return fundsHistoryEvents
	 **/
	@Schema(description = "")
	public List<FilterItemInfo> getFundsHistoryEvents() {
		return fundsHistoryEvents;
	}

	public void setFundsHistoryEvents(List<FilterItemInfo> fundsHistoryEvents) {
		this.fundsHistoryEvents = fundsHistoryEvents;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		FilterInfo filterInfo = (FilterInfo) o;
		return Objects.equals(this.walletTransactions, filterInfo.walletTransactions) &&
				Objects.equals(this.walletExternalTransactions, filterInfo.walletExternalTransactions) &&
				Objects.equals(this.events, filterInfo.events) &&
				Objects.equals(this.assets, filterInfo.assets) &&
				Objects.equals(this.fundsHistoryEvents, filterInfo.fundsHistoryEvents);
	}

	@Override
	public int hashCode() {
		return Objects.hash(walletTransactions, walletExternalTransactions, events, assets, fundsHistoryEvents);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class FilterInfo {\n");

		sb.append("    walletTransactions: ").append(toIndentedString(walletTransactions)).append("\n");
		sb.append("    walletExternalTransactions: ").append(toIndentedString(walletExternalTransactions)).append("\n");
		sb.append("    events: ").append(toIndentedString(events)).append("\n");
		sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
		sb.append("    fundsHistoryEvents: ").append(toIndentedString(fundsHistoryEvents)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(walletTransactions);
		out.writeValue(walletExternalTransactions);
		out.writeValue(events);
		out.writeValue(assets);
		out.writeValue(fundsHistoryEvents);
	}

	public int describeContents() {
		return 0;
	}
}
