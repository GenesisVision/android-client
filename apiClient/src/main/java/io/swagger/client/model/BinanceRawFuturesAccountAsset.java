/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BinanceRawFuturesAccountAsset
 */


public class BinanceRawFuturesAccountAsset implements Parcelable
{
	public static final Parcelable.Creator<BinanceRawFuturesAccountAsset> CREATOR = new Parcelable.Creator<BinanceRawFuturesAccountAsset>()
	{
		public BinanceRawFuturesAccountAsset createFromParcel(Parcel in) {
			return new BinanceRawFuturesAccountAsset(in);
		}

		public BinanceRawFuturesAccountAsset[] newArray(int size) {
			return new BinanceRawFuturesAccountAsset[size];
		}
	};

	@SerializedName("asset")
	private String asset = null;

	@SerializedName("initialMargin")
	private Double initialMargin = null;

	@SerializedName("maintMargin")
	private Double maintMargin = null;

	@SerializedName("marginBalance")
	private Double marginBalance = null;

	@SerializedName("maxWithdrawAmount")
	private Double maxWithdrawAmount = null;

	@SerializedName("openOrderInitialMargin")
	private Double openOrderInitialMargin = null;

	@SerializedName("positionInitialMargin")
	private Double positionInitialMargin = null;

	@SerializedName("unrealizedProfit")
	private Double unrealizedProfit = null;

	@SerializedName("walletBalance")
	private Double walletBalance = null;

	@SerializedName("crossWalletBalance")
	private Double crossWalletBalance = null;

	@SerializedName("crossUnPnl")
	private Double crossUnPnl = null;

	@SerializedName("availableBalance")
	private Double availableBalance = null;

	public BinanceRawFuturesAccountAsset() {
	}

	BinanceRawFuturesAccountAsset(Parcel in) {
		asset = (String) in.readValue(null);
		initialMargin = (Double) in.readValue(null);
		maintMargin = (Double) in.readValue(null);
		marginBalance = (Double) in.readValue(null);
		maxWithdrawAmount = (Double) in.readValue(null);
		openOrderInitialMargin = (Double) in.readValue(null);
		positionInitialMargin = (Double) in.readValue(null);
		unrealizedProfit = (Double) in.readValue(null);
		walletBalance = (Double) in.readValue(null);
		crossWalletBalance = (Double) in.readValue(null);
		crossUnPnl = (Double) in.readValue(null);
		availableBalance = (Double) in.readValue(null);
	}

	public BinanceRawFuturesAccountAsset asset(String asset) {
		this.asset = asset;
		return this;
	}

	/**
	 * Get asset
	 *
	 * @return asset
	 **/
	@Schema(description = "")
	public String getAsset() {
		return asset;
	}

	public void setAsset(String asset) {
		this.asset = asset;
	}

	public BinanceRawFuturesAccountAsset initialMargin(Double initialMargin) {
		this.initialMargin = initialMargin;
		return this;
	}

	/**
	 * Get initialMargin
	 *
	 * @return initialMargin
	 **/
	@Schema(description = "")
	public Double getInitialMargin() {
		return initialMargin;
	}

	public void setInitialMargin(Double initialMargin) {
		this.initialMargin = initialMargin;
	}

	public BinanceRawFuturesAccountAsset maintMargin(Double maintMargin) {
		this.maintMargin = maintMargin;
		return this;
	}

	/**
	 * Get maintMargin
	 *
	 * @return maintMargin
	 **/
	@Schema(description = "")
	public Double getMaintMargin() {
		return maintMargin;
	}

	public void setMaintMargin(Double maintMargin) {
		this.maintMargin = maintMargin;
	}

	public BinanceRawFuturesAccountAsset marginBalance(Double marginBalance) {
		this.marginBalance = marginBalance;
		return this;
	}

	/**
	 * Get marginBalance
	 *
	 * @return marginBalance
	 **/
	@Schema(description = "")
	public Double getMarginBalance() {
		return marginBalance;
	}

	public void setMarginBalance(Double marginBalance) {
		this.marginBalance = marginBalance;
	}

	public BinanceRawFuturesAccountAsset maxWithdrawAmount(Double maxWithdrawAmount) {
		this.maxWithdrawAmount = maxWithdrawAmount;
		return this;
	}

	/**
	 * Get maxWithdrawAmount
	 *
	 * @return maxWithdrawAmount
	 **/
	@Schema(description = "")
	public Double getMaxWithdrawAmount() {
		return maxWithdrawAmount;
	}

	public void setMaxWithdrawAmount(Double maxWithdrawAmount) {
		this.maxWithdrawAmount = maxWithdrawAmount;
	}

	public BinanceRawFuturesAccountAsset openOrderInitialMargin(Double openOrderInitialMargin) {
		this.openOrderInitialMargin = openOrderInitialMargin;
		return this;
	}

	/**
	 * Get openOrderInitialMargin
	 *
	 * @return openOrderInitialMargin
	 **/
	@Schema(description = "")
	public Double getOpenOrderInitialMargin() {
		return openOrderInitialMargin;
	}

	public void setOpenOrderInitialMargin(Double openOrderInitialMargin) {
		this.openOrderInitialMargin = openOrderInitialMargin;
	}

	public BinanceRawFuturesAccountAsset positionInitialMargin(Double positionInitialMargin) {
		this.positionInitialMargin = positionInitialMargin;
		return this;
	}

	/**
	 * Get positionInitialMargin
	 *
	 * @return positionInitialMargin
	 **/
	@Schema(description = "")
	public Double getPositionInitialMargin() {
		return positionInitialMargin;
	}

	public void setPositionInitialMargin(Double positionInitialMargin) {
		this.positionInitialMargin = positionInitialMargin;
	}

	public BinanceRawFuturesAccountAsset unrealizedProfit(Double unrealizedProfit) {
		this.unrealizedProfit = unrealizedProfit;
		return this;
	}

	/**
	 * Get unrealizedProfit
	 *
	 * @return unrealizedProfit
	 **/
	@Schema(description = "")
	public Double getUnrealizedProfit() {
		return unrealizedProfit;
	}

	public void setUnrealizedProfit(Double unrealizedProfit) {
		this.unrealizedProfit = unrealizedProfit;
	}

	public BinanceRawFuturesAccountAsset walletBalance(Double walletBalance) {
		this.walletBalance = walletBalance;
		return this;
	}

	/**
	 * Get walletBalance
	 *
	 * @return walletBalance
	 **/
	@Schema(description = "")
	public Double getWalletBalance() {
		return walletBalance;
	}

	public void setWalletBalance(Double walletBalance) {
		this.walletBalance = walletBalance;
	}

	public BinanceRawFuturesAccountAsset crossWalletBalance(Double crossWalletBalance) {
		this.crossWalletBalance = crossWalletBalance;
		return this;
	}

	/**
	 * Get crossWalletBalance
	 *
	 * @return crossWalletBalance
	 **/
	@Schema(description = "")
	public Double getCrossWalletBalance() {
		return crossWalletBalance;
	}

	public void setCrossWalletBalance(Double crossWalletBalance) {
		this.crossWalletBalance = crossWalletBalance;
	}

	public BinanceRawFuturesAccountAsset crossUnPnl(Double crossUnPnl) {
		this.crossUnPnl = crossUnPnl;
		return this;
	}

	/**
	 * Get crossUnPnl
	 *
	 * @return crossUnPnl
	 **/
	@Schema(description = "")
	public Double getCrossUnPnl() {
		return crossUnPnl;
	}

	public void setCrossUnPnl(Double crossUnPnl) {
		this.crossUnPnl = crossUnPnl;
	}

	public BinanceRawFuturesAccountAsset availableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
		return this;
	}

	/**
	 * Get availableBalance
	 *
	 * @return availableBalance
	 **/
	@Schema(description = "")
	public Double getAvailableBalance() {
		return availableBalance;
	}

	public void setAvailableBalance(Double availableBalance) {
		this.availableBalance = availableBalance;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BinanceRawFuturesAccountAsset binanceRawFuturesAccountAsset = (BinanceRawFuturesAccountAsset) o;
		return Objects.equals(this.asset, binanceRawFuturesAccountAsset.asset) &&
				Objects.equals(this.initialMargin, binanceRawFuturesAccountAsset.initialMargin) &&
				Objects.equals(this.maintMargin, binanceRawFuturesAccountAsset.maintMargin) &&
				Objects.equals(this.marginBalance, binanceRawFuturesAccountAsset.marginBalance) &&
				Objects.equals(this.maxWithdrawAmount, binanceRawFuturesAccountAsset.maxWithdrawAmount) &&
				Objects.equals(this.openOrderInitialMargin, binanceRawFuturesAccountAsset.openOrderInitialMargin) &&
				Objects.equals(this.positionInitialMargin, binanceRawFuturesAccountAsset.positionInitialMargin) &&
				Objects.equals(this.unrealizedProfit, binanceRawFuturesAccountAsset.unrealizedProfit) &&
				Objects.equals(this.walletBalance, binanceRawFuturesAccountAsset.walletBalance) &&
				Objects.equals(this.crossWalletBalance, binanceRawFuturesAccountAsset.crossWalletBalance) &&
				Objects.equals(this.crossUnPnl, binanceRawFuturesAccountAsset.crossUnPnl) &&
				Objects.equals(this.availableBalance, binanceRawFuturesAccountAsset.availableBalance);
	}

	@Override
	public int hashCode() {
		return Objects.hash(asset, initialMargin, maintMargin, marginBalance, maxWithdrawAmount, openOrderInitialMargin, positionInitialMargin, unrealizedProfit, walletBalance, crossWalletBalance, crossUnPnl, availableBalance);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BinanceRawFuturesAccountAsset {\n");

		sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
		sb.append("    initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
		sb.append("    maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
		sb.append("    marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
		sb.append("    maxWithdrawAmount: ").append(toIndentedString(maxWithdrawAmount)).append("\n");
		sb.append("    openOrderInitialMargin: ").append(toIndentedString(openOrderInitialMargin)).append("\n");
		sb.append("    positionInitialMargin: ").append(toIndentedString(positionInitialMargin)).append("\n");
		sb.append("    unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
		sb.append("    walletBalance: ").append(toIndentedString(walletBalance)).append("\n");
		sb.append("    crossWalletBalance: ").append(toIndentedString(crossWalletBalance)).append("\n");
		sb.append("    crossUnPnl: ").append(toIndentedString(crossUnPnl)).append("\n");
		sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(asset);
		out.writeValue(initialMargin);
		out.writeValue(maintMargin);
		out.writeValue(marginBalance);
		out.writeValue(maxWithdrawAmount);
		out.writeValue(openOrderInitialMargin);
		out.writeValue(positionInitialMargin);
		out.writeValue(unrealizedProfit);
		out.writeValue(walletBalance);
		out.writeValue(crossWalletBalance);
		out.writeValue(crossUnPnl);
		out.writeValue(availableBalance);
	}

	public int describeContents() {
		return 0;
	}
}
