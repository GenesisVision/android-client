/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinanceOrderSide;
import io.swagger.client.model.BinancePositionSide;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawFuturesUsdtTrade
 */


public class BinanceRawFuturesUsdtTrade implements Parcelable {
  @SerializedName("quoteQuantity")
  private Double quoteQuantity = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("buyer")
  private Boolean buyer = null;

  @SerializedName("commission")
  private Double commission = null;

  @SerializedName("commissionAsset")
  private String commissionAsset = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("maker")
  private Boolean maker = null;

  @SerializedName("orderId")
  private Long orderId = null;

  @SerializedName("price")
  private Double price = null;

  @SerializedName("quantity")
  private Double quantity = null;

  @SerializedName("realizedPnl")
  private Double realizedPnl = null;

  @SerializedName("side")
  private BinanceOrderSide side = null;

  @SerializedName("positionSide")
  private BinancePositionSide positionSide = null;

  @SerializedName("tradeTime")
  private DateTime tradeTime = null;

  public BinanceRawFuturesUsdtTrade() {
  }
  public BinanceRawFuturesUsdtTrade quoteQuantity(Double quoteQuantity) {
    this.quoteQuantity = quoteQuantity;
    return this;
  }

   /**
   * Get quoteQuantity
   * @return quoteQuantity
  **/
  @Schema(description = "")
  public Double getQuoteQuantity() {
    return quoteQuantity;
  }

  public void setQuoteQuantity(Double quoteQuantity) {
    this.quoteQuantity = quoteQuantity;
  }

  public BinanceRawFuturesUsdtTrade symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @Schema(description = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public BinanceRawFuturesUsdtTrade buyer(Boolean buyer) {
    this.buyer = buyer;
    return this;
  }

   /**
   * Get buyer
   * @return buyer
  **/
  @Schema(description = "")
  public Boolean isBuyer() {
    return buyer;
  }

  public void setBuyer(Boolean buyer) {
    this.buyer = buyer;
  }

  public BinanceRawFuturesUsdtTrade commission(Double commission) {
    this.commission = commission;
    return this;
  }

   /**
   * Get commission
   * @return commission
  **/
  @Schema(description = "")
  public Double getCommission() {
    return commission;
  }

  public void setCommission(Double commission) {
    this.commission = commission;
  }

  public BinanceRawFuturesUsdtTrade commissionAsset(String commissionAsset) {
    this.commissionAsset = commissionAsset;
    return this;
  }

   /**
   * Get commissionAsset
   * @return commissionAsset
  **/
  @Schema(description = "")
  public String getCommissionAsset() {
    return commissionAsset;
  }

  public void setCommissionAsset(String commissionAsset) {
    this.commissionAsset = commissionAsset;
  }

  public BinanceRawFuturesUsdtTrade id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public BinanceRawFuturesUsdtTrade maker(Boolean maker) {
    this.maker = maker;
    return this;
  }

   /**
   * Get maker
   * @return maker
  **/
  @Schema(description = "")
  public Boolean isMaker() {
    return maker;
  }

  public void setMaker(Boolean maker) {
    this.maker = maker;
  }

  public BinanceRawFuturesUsdtTrade orderId(Long orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @Schema(description = "")
  public Long getOrderId() {
    return orderId;
  }

  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }

  public BinanceRawFuturesUsdtTrade price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public BinanceRawFuturesUsdtTrade quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @Schema(description = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public BinanceRawFuturesUsdtTrade realizedPnl(Double realizedPnl) {
    this.realizedPnl = realizedPnl;
    return this;
  }

   /**
   * Get realizedPnl
   * @return realizedPnl
  **/
  @Schema(description = "")
  public Double getRealizedPnl() {
    return realizedPnl;
  }

  public void setRealizedPnl(Double realizedPnl) {
    this.realizedPnl = realizedPnl;
  }

  public BinanceRawFuturesUsdtTrade side(BinanceOrderSide side) {
    this.side = side;
    return this;
  }

   /**
   * Get side
   * @return side
  **/
  @Schema(description = "")
  public BinanceOrderSide getSide() {
    return side;
  }

  public void setSide(BinanceOrderSide side) {
    this.side = side;
  }

  public BinanceRawFuturesUsdtTrade positionSide(BinancePositionSide positionSide) {
    this.positionSide = positionSide;
    return this;
  }

   /**
   * Get positionSide
   * @return positionSide
  **/
  @Schema(description = "")
  public BinancePositionSide getPositionSide() {
    return positionSide;
  }

  public void setPositionSide(BinancePositionSide positionSide) {
    this.positionSide = positionSide;
  }

  public BinanceRawFuturesUsdtTrade tradeTime(DateTime tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

   /**
   * Get tradeTime
   * @return tradeTime
  **/
  @Schema(description = "")
  public DateTime getTradeTime() {
    return tradeTime;
  }

  public void setTradeTime(DateTime tradeTime) {
    this.tradeTime = tradeTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawFuturesUsdtTrade binanceRawFuturesUsdtTrade = (BinanceRawFuturesUsdtTrade) o;
    return Objects.equals(this.quoteQuantity, binanceRawFuturesUsdtTrade.quoteQuantity) &&
        Objects.equals(this.symbol, binanceRawFuturesUsdtTrade.symbol) &&
        Objects.equals(this.buyer, binanceRawFuturesUsdtTrade.buyer) &&
        Objects.equals(this.commission, binanceRawFuturesUsdtTrade.commission) &&
        Objects.equals(this.commissionAsset, binanceRawFuturesUsdtTrade.commissionAsset) &&
        Objects.equals(this.id, binanceRawFuturesUsdtTrade.id) &&
        Objects.equals(this.maker, binanceRawFuturesUsdtTrade.maker) &&
        Objects.equals(this.orderId, binanceRawFuturesUsdtTrade.orderId) &&
        Objects.equals(this.price, binanceRawFuturesUsdtTrade.price) &&
        Objects.equals(this.quantity, binanceRawFuturesUsdtTrade.quantity) &&
        Objects.equals(this.realizedPnl, binanceRawFuturesUsdtTrade.realizedPnl) &&
        Objects.equals(this.side, binanceRawFuturesUsdtTrade.side) &&
        Objects.equals(this.positionSide, binanceRawFuturesUsdtTrade.positionSide) &&
        Objects.equals(this.tradeTime, binanceRawFuturesUsdtTrade.tradeTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteQuantity, symbol, buyer, commission, commissionAsset, id, maker, orderId, price, quantity, realizedPnl, side, positionSide, tradeTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawFuturesUsdtTrade {\n");
    
    sb.append("    quoteQuantity: ").append(toIndentedString(quoteQuantity)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    commissionAsset: ").append(toIndentedString(commissionAsset)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maker: ").append(toIndentedString(maker)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    realizedPnl: ").append(toIndentedString(realizedPnl)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    positionSide: ").append(toIndentedString(positionSide)).append("\n");
    sb.append("    tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(quoteQuantity);
    out.writeValue(symbol);
    out.writeValue(buyer);
    out.writeValue(commission);
    out.writeValue(commissionAsset);
    out.writeValue(id);
    out.writeValue(maker);
    out.writeValue(orderId);
    out.writeValue(price);
    out.writeValue(quantity);
    out.writeValue(realizedPnl);
    out.writeValue(side);
    out.writeValue(positionSide);
    out.writeValue(tradeTime);
  }

  BinanceRawFuturesUsdtTrade(Parcel in) {
    quoteQuantity = (Double)in.readValue(null);
    symbol = (String)in.readValue(null);
    buyer = (Boolean)in.readValue(null);
    commission = (Double)in.readValue(null);
    commissionAsset = (String)in.readValue(null);
    id = (Long)in.readValue(null);
    maker = (Boolean)in.readValue(null);
    orderId = (Long)in.readValue(null);
    price = (Double)in.readValue(null);
    quantity = (Double)in.readValue(null);
    realizedPnl = (Double)in.readValue(null);
    side = (BinanceOrderSide)in.readValue(BinanceOrderSide.class.getClassLoader());
    positionSide = (BinancePositionSide)in.readValue(BinancePositionSide.class.getClassLoader());
    tradeTime = (DateTime)in.readValue(DateTime.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawFuturesUsdtTrade> CREATOR = new Parcelable.Creator<BinanceRawFuturesUsdtTrade>() {
    public BinanceRawFuturesUsdtTrade createFromParcel(Parcel in) {
      return new BinanceRawFuturesUsdtTrade(in);
    }
    public BinanceRawFuturesUsdtTrade[] newArray(int size) {
      return new BinanceRawFuturesUsdtTrade[size];
    }
  };
}
