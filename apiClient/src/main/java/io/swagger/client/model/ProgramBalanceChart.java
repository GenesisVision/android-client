/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ProgramBalanceChart
 */


public class ProgramBalanceChart implements Parcelable
{
	public static final Parcelable.Creator<ProgramBalanceChart> CREATOR = new Parcelable.Creator<ProgramBalanceChart>()
	{
		public ProgramBalanceChart createFromParcel(Parcel in) {
			return new ProgramBalanceChart(in);
		}

		public ProgramBalanceChart[] newArray(int size) {
			return new ProgramBalanceChart[size];
		}
	};

	@SerializedName("balance")
	private Double balance = null;

	@SerializedName("programCurrency")
	private ProgramCurrencyEnum programCurrency = null;

	@SerializedName("chart")
	private List<BalanceChartPoint> chart = null;

	public ProgramBalanceChart() {
	}

	ProgramBalanceChart(Parcel in) {
		balance = (Double) in.readValue(null);
		programCurrency = (ProgramCurrencyEnum) in.readValue(null);
		chart = (List<BalanceChartPoint>) in.readValue(BalanceChartPoint.class.getClassLoader());
	}

	public ProgramBalanceChart balance(Double balance) {
		this.balance = balance;
		return this;
	}

	/**
	 * Get balance
	 *
	 * @return balance
	 **/
	@Schema(description = "")
	public Double getBalance() {
		return balance;
	}

	public void setBalance(Double balance) {
		this.balance = balance;
	}

	public ProgramBalanceChart programCurrency(ProgramCurrencyEnum programCurrency) {
		this.programCurrency = programCurrency;
		return this;
	}

	/**
	 * Get programCurrency
	 *
	 * @return programCurrency
	 **/
	@Schema(description = "")
	public ProgramCurrencyEnum getProgramCurrency() {
		return programCurrency;
	}

	public void setProgramCurrency(ProgramCurrencyEnum programCurrency) {
		this.programCurrency = programCurrency;
	}

	public ProgramBalanceChart chart(List<BalanceChartPoint> chart) {
		this.chart = chart;
		return this;
	}

	public ProgramBalanceChart addChartItem(BalanceChartPoint chartItem) {
		if (this.chart == null) {
			this.chart = new ArrayList<BalanceChartPoint>();
		}
		this.chart.add(chartItem);
		return this;
	}

	/**
	 * Get chart
	 *
	 * @return chart
	 **/
	@Schema(description = "")
	public List<BalanceChartPoint> getChart() {
		return chart;
	}

	public void setChart(List<BalanceChartPoint> chart) {
		this.chart = chart;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProgramBalanceChart programBalanceChart = (ProgramBalanceChart) o;
		return Objects.equals(this.balance, programBalanceChart.balance) &&
				Objects.equals(this.programCurrency, programBalanceChart.programCurrency) &&
				Objects.equals(this.chart, programBalanceChart.chart);
	}

	@Override
	public int hashCode() {
		return Objects.hash(balance, programCurrency, chart);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProgramBalanceChart {\n");

		sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
		sb.append("    programCurrency: ").append(toIndentedString(programCurrency)).append("\n");
		sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(balance);
		out.writeValue(programCurrency);
		out.writeValue(chart);
	}

	public int describeContents() {
		return 0;
	}

	/**
	 * Gets or Sets programCurrency
	 */
	@JsonAdapter(ProgramCurrencyEnum.Adapter.class)
	public enum ProgramCurrencyEnum
	{
		UNDEFINED("Undefined"),
		GVT("GVT"),
		ETH("ETH"),
		BTC("BTC"),
		ADA("ADA"),
		USDT("USDT"),
		XRP("XRP"),
		BCH("BCH"),
		LTC("LTC"),
		DOGE("DOGE"),
		BNB("BNB"),
		USD("USD"),
		EUR("EUR");

		public static ProgramCurrencyEnum fromValue(String text) {
			for (ProgramCurrencyEnum b : ProgramCurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		ProgramCurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<ProgramCurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final ProgramCurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ProgramCurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ProgramCurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}
}
