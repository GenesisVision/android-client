/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BrokerOld
 */


public class BrokerOld implements Parcelable
{
	public static final Parcelable.Creator<BrokerOld> CREATOR = new Parcelable.Creator<BrokerOld>()
	{
		public BrokerOld createFromParcel(Parcel in) {
			return new BrokerOld(in);
		}

		public BrokerOld[] newArray(int size) {
			return new BrokerOld[size];
		}
	};

	@SerializedName("name")
	private String name = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("terms")
	private String terms = null;

	@SerializedName("assets")
	private String assets = null;

	@SerializedName("fee")
	private Double fee = null;

	@SerializedName("leverageMin")
	private Integer leverageMin = null;

	@SerializedName("leverageMax")
	private Integer leverageMax = null;

	@SerializedName("accountTypes")
	private List<BrokerAccountTypeOld> accountTypes = null;

	@SerializedName("isForex")
	private Boolean isForex = null;

	@SerializedName("isSignalsAvailable")
	private Boolean isSignalsAvailable = null;

	@SerializedName("tags")
	private List<ProgramTag> tags = null;

	public BrokerOld() {
	}

	BrokerOld(Parcel in) {
		name = (String) in.readValue(null);
		description = (String) in.readValue(null);
		logo = (String) in.readValue(null);
		terms = (String) in.readValue(null);
		assets = (String) in.readValue(null);
		fee = (Double) in.readValue(null);
		leverageMin = (Integer) in.readValue(null);
		leverageMax = (Integer) in.readValue(null);
		accountTypes = (List<BrokerAccountTypeOld>) in.readValue(BrokerAccountTypeOld.class.getClassLoader());
		isForex = (Boolean) in.readValue(null);
		isSignalsAvailable = (Boolean) in.readValue(null);
		tags = (List<ProgramTag>) in.readValue(ProgramTag.class.getClassLoader());
	}

	public BrokerOld name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * Get name
	 *
	 * @return name
	 **/
	@Schema(description = "")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public BrokerOld description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@Schema(description = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public BrokerOld logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@Schema(description = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public BrokerOld terms(String terms) {
		this.terms = terms;
		return this;
	}

	/**
	 * Get terms
	 *
	 * @return terms
	 **/
	@Schema(description = "")
	public String getTerms() {
		return terms;
	}

	public void setTerms(String terms) {
		this.terms = terms;
	}

	public BrokerOld assets(String assets) {
		this.assets = assets;
		return this;
	}

	/**
	 * Get assets
	 *
	 * @return assets
	 **/
	@Schema(description = "")
	public String getAssets() {
		return assets;
	}

	public void setAssets(String assets) {
		this.assets = assets;
	}

	public BrokerOld fee(Double fee) {
		this.fee = fee;
		return this;
	}

	/**
	 * Get fee
	 *
	 * @return fee
	 **/
	@Schema(description = "")
	public Double getFee() {
		return fee;
	}

	public void setFee(Double fee) {
		this.fee = fee;
	}

	/**
	 * Get leverageMin
	 *
	 * @return leverageMin
	 **/
	@Schema(description = "")
	public Integer getLeverageMin() {
		return leverageMin;
	}

	/**
	 * Get leverageMax
	 *
	 * @return leverageMax
	 **/
	@Schema(description = "")
	public Integer getLeverageMax() {
		return leverageMax;
	}

	public BrokerOld accountTypes(List<BrokerAccountTypeOld> accountTypes) {
		this.accountTypes = accountTypes;
		return this;
	}

	public BrokerOld addAccountTypesItem(BrokerAccountTypeOld accountTypesItem) {
		if (this.accountTypes == null) {
			this.accountTypes = new ArrayList<BrokerAccountTypeOld>();
		}
		this.accountTypes.add(accountTypesItem);
		return this;
	}

	/**
	 * Get accountTypes
	 *
	 * @return accountTypes
	 **/
	@Schema(description = "")
	public List<BrokerAccountTypeOld> getAccountTypes() {
		return accountTypes;
	}

	public void setAccountTypes(List<BrokerAccountTypeOld> accountTypes) {
		this.accountTypes = accountTypes;
	}

	public BrokerOld isForex(Boolean isForex) {
		this.isForex = isForex;
		return this;
	}

	/**
	 * Get isForex
	 *
	 * @return isForex
	 **/
	@Schema(description = "")
	public Boolean isIsForex() {
		return isForex;
	}

	public void setIsForex(Boolean isForex) {
		this.isForex = isForex;
	}

	public BrokerOld isSignalsAvailable(Boolean isSignalsAvailable) {
		this.isSignalsAvailable = isSignalsAvailable;
		return this;
	}

	/**
	 * Get isSignalsAvailable
	 *
	 * @return isSignalsAvailable
	 **/
	@Schema(description = "")
	public Boolean isIsSignalsAvailable() {
		return isSignalsAvailable;
	}

	public void setIsSignalsAvailable(Boolean isSignalsAvailable) {
		this.isSignalsAvailable = isSignalsAvailable;
	}

	public BrokerOld tags(List<ProgramTag> tags) {
		this.tags = tags;
		return this;
	}

	public BrokerOld addTagsItem(ProgramTag tagsItem) {
		if (this.tags == null) {
			this.tags = new ArrayList<ProgramTag>();
		}
		this.tags.add(tagsItem);
		return this;
	}

	/**
	 * Get tags
	 *
	 * @return tags
	 **/
	@Schema(description = "")
	public List<ProgramTag> getTags() {
		return tags;
	}

	public void setTags(List<ProgramTag> tags) {
		this.tags = tags;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BrokerOld brokerOld = (BrokerOld) o;
		return Objects.equals(this.name, brokerOld.name) &&
				Objects.equals(this.description, brokerOld.description) &&
				Objects.equals(this.logo, brokerOld.logo) &&
				Objects.equals(this.terms, brokerOld.terms) &&
				Objects.equals(this.assets, brokerOld.assets) &&
				Objects.equals(this.fee, brokerOld.fee) &&
				Objects.equals(this.leverageMin, brokerOld.leverageMin) &&
				Objects.equals(this.leverageMax, brokerOld.leverageMax) &&
				Objects.equals(this.accountTypes, brokerOld.accountTypes) &&
				Objects.equals(this.isForex, brokerOld.isForex) &&
				Objects.equals(this.isSignalsAvailable, brokerOld.isSignalsAvailable) &&
				Objects.equals(this.tags, brokerOld.tags);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, description, logo, terms, assets, fee, leverageMin, leverageMax, accountTypes, isForex, isSignalsAvailable, tags);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BrokerOld {\n");

		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
		sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
		sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
		sb.append("    leverageMin: ").append(toIndentedString(leverageMin)).append("\n");
		sb.append("    leverageMax: ").append(toIndentedString(leverageMax)).append("\n");
		sb.append("    accountTypes: ").append(toIndentedString(accountTypes)).append("\n");
		sb.append("    isForex: ").append(toIndentedString(isForex)).append("\n");
		sb.append("    isSignalsAvailable: ").append(toIndentedString(isSignalsAvailable)).append("\n");
		sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(name);
		out.writeValue(description);
		out.writeValue(logo);
		out.writeValue(terms);
		out.writeValue(assets);
		out.writeValue(fee);
		out.writeValue(leverageMin);
		out.writeValue(leverageMax);
		out.writeValue(accountTypes);
		out.writeValue(isForex);
		out.writeValue(isSignalsAvailable);
		out.writeValue(tags);
	}

	public int describeContents() {
		return 0;
	}
}
