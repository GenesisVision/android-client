/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BinanceRawFuturesAccountPosition
 */


public class BinanceRawFuturesAccountPosition implements Parcelable
{
	public static final Parcelable.Creator<BinanceRawFuturesAccountPosition> CREATOR = new Parcelable.Creator<BinanceRawFuturesAccountPosition>()
	{
		public BinanceRawFuturesAccountPosition createFromParcel(Parcel in) {
			return new BinanceRawFuturesAccountPosition(in);
		}

		public BinanceRawFuturesAccountPosition[] newArray(int size) {
			return new BinanceRawFuturesAccountPosition[size];
		}
	};

	@SerializedName("isolated")
	private Boolean isolated = null;

	@SerializedName("leverage")
	private Integer leverage = null;

	@SerializedName("initialMargin")
	private Double initialMargin = null;

	@SerializedName("maintMargin")
	private Double maintMargin = null;

	@SerializedName("openOrderInitialMargin")
	private Double openOrderInitialMargin = null;

	@SerializedName("positionInitialMargin")
	private Double positionInitialMargin = null;

	@SerializedName("symbol")
	private String symbol = null;

	@SerializedName("unrealizedProfit")
	private Double unrealizedProfit = null;

	@SerializedName("positionSide")
	private BinancePositionSide positionSide = null;

	@SerializedName("entryPrice")
	private Double entryPrice = null;

	@SerializedName("maxNotional")
	private Double maxNotional = null;

	@SerializedName("positionAmount")
	private Double positionAmount = null;

	public BinanceRawFuturesAccountPosition() {
	}

	BinanceRawFuturesAccountPosition(Parcel in) {
		isolated = (Boolean) in.readValue(null);
		leverage = (Integer) in.readValue(null);
		initialMargin = (Double) in.readValue(null);
		maintMargin = (Double) in.readValue(null);
		openOrderInitialMargin = (Double) in.readValue(null);
		positionInitialMargin = (Double) in.readValue(null);
		symbol = (String) in.readValue(null);
		unrealizedProfit = (Double) in.readValue(null);
		positionSide = (BinancePositionSide) in.readValue(BinancePositionSide.class.getClassLoader());
		entryPrice = (Double) in.readValue(null);
		maxNotional = (Double) in.readValue(null);
		positionAmount = (Double) in.readValue(null);
	}

	public BinanceRawFuturesAccountPosition isolated(Boolean isolated) {
		this.isolated = isolated;
		return this;
	}

	/**
	 * Get isolated
	 *
	 * @return isolated
	 **/
	@Schema(description = "")
	public Boolean isIsolated() {
		return isolated;
	}

	public void setIsolated(Boolean isolated) {
		this.isolated = isolated;
	}

	public BinanceRawFuturesAccountPosition leverage(Integer leverage) {
		this.leverage = leverage;
		return this;
	}

	/**
	 * Get leverage
	 *
	 * @return leverage
	 **/
	@Schema(description = "")
	public Integer getLeverage() {
		return leverage;
	}

	public void setLeverage(Integer leverage) {
		this.leverage = leverage;
	}

	public BinanceRawFuturesAccountPosition initialMargin(Double initialMargin) {
		this.initialMargin = initialMargin;
		return this;
	}

	/**
	 * Get initialMargin
	 *
	 * @return initialMargin
	 **/
	@Schema(description = "")
	public Double getInitialMargin() {
		return initialMargin;
	}

	public void setInitialMargin(Double initialMargin) {
		this.initialMargin = initialMargin;
	}

	public BinanceRawFuturesAccountPosition maintMargin(Double maintMargin) {
		this.maintMargin = maintMargin;
		return this;
	}

	/**
	 * Get maintMargin
	 *
	 * @return maintMargin
	 **/
	@Schema(description = "")
	public Double getMaintMargin() {
		return maintMargin;
	}

	public void setMaintMargin(Double maintMargin) {
		this.maintMargin = maintMargin;
	}

	public BinanceRawFuturesAccountPosition openOrderInitialMargin(Double openOrderInitialMargin) {
		this.openOrderInitialMargin = openOrderInitialMargin;
		return this;
	}

	/**
	 * Get openOrderInitialMargin
	 *
	 * @return openOrderInitialMargin
	 **/
	@Schema(description = "")
	public Double getOpenOrderInitialMargin() {
		return openOrderInitialMargin;
	}

	public void setOpenOrderInitialMargin(Double openOrderInitialMargin) {
		this.openOrderInitialMargin = openOrderInitialMargin;
	}

	public BinanceRawFuturesAccountPosition positionInitialMargin(Double positionInitialMargin) {
		this.positionInitialMargin = positionInitialMargin;
		return this;
	}

	/**
	 * Get positionInitialMargin
	 *
	 * @return positionInitialMargin
	 **/
	@Schema(description = "")
	public Double getPositionInitialMargin() {
		return positionInitialMargin;
	}

	public void setPositionInitialMargin(Double positionInitialMargin) {
		this.positionInitialMargin = positionInitialMargin;
	}

	public BinanceRawFuturesAccountPosition symbol(String symbol) {
		this.symbol = symbol;
		return this;
	}

	/**
	 * Get symbol
	 *
	 * @return symbol
	 **/
	@Schema(description = "")
	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	public BinanceRawFuturesAccountPosition unrealizedProfit(Double unrealizedProfit) {
		this.unrealizedProfit = unrealizedProfit;
		return this;
	}

	/**
	 * Get unrealizedProfit
	 *
	 * @return unrealizedProfit
	 **/
	@Schema(description = "")
	public Double getUnrealizedProfit() {
		return unrealizedProfit;
	}

	public void setUnrealizedProfit(Double unrealizedProfit) {
		this.unrealizedProfit = unrealizedProfit;
	}

	public BinanceRawFuturesAccountPosition positionSide(BinancePositionSide positionSide) {
		this.positionSide = positionSide;
		return this;
	}

	/**
	 * Get positionSide
	 *
	 * @return positionSide
	 **/
	@Schema(description = "")
	public BinancePositionSide getPositionSide() {
		return positionSide;
	}

	public void setPositionSide(BinancePositionSide positionSide) {
		this.positionSide = positionSide;
	}

	public BinanceRawFuturesAccountPosition entryPrice(Double entryPrice) {
		this.entryPrice = entryPrice;
		return this;
	}

	/**
	 * Get entryPrice
	 *
	 * @return entryPrice
	 **/
	@Schema(description = "")
	public Double getEntryPrice() {
		return entryPrice;
	}

	public void setEntryPrice(Double entryPrice) {
		this.entryPrice = entryPrice;
	}

	public BinanceRawFuturesAccountPosition maxNotional(Double maxNotional) {
		this.maxNotional = maxNotional;
		return this;
	}

	/**
	 * Get maxNotional
	 *
	 * @return maxNotional
	 **/
	@Schema(description = "")
	public Double getMaxNotional() {
		return maxNotional;
	}

	public void setMaxNotional(Double maxNotional) {
		this.maxNotional = maxNotional;
	}

	public BinanceRawFuturesAccountPosition positionAmount(Double positionAmount) {
		this.positionAmount = positionAmount;
		return this;
	}

	/**
	 * Get positionAmount
	 *
	 * @return positionAmount
	 **/
	@Schema(description = "")
	public Double getPositionAmount() {
		return positionAmount;
	}

	public void setPositionAmount(Double positionAmount) {
		this.positionAmount = positionAmount;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BinanceRawFuturesAccountPosition binanceRawFuturesAccountPosition = (BinanceRawFuturesAccountPosition) o;
		return Objects.equals(this.isolated, binanceRawFuturesAccountPosition.isolated) &&
				Objects.equals(this.leverage, binanceRawFuturesAccountPosition.leverage) &&
				Objects.equals(this.initialMargin, binanceRawFuturesAccountPosition.initialMargin) &&
				Objects.equals(this.maintMargin, binanceRawFuturesAccountPosition.maintMargin) &&
				Objects.equals(this.openOrderInitialMargin, binanceRawFuturesAccountPosition.openOrderInitialMargin) &&
				Objects.equals(this.positionInitialMargin, binanceRawFuturesAccountPosition.positionInitialMargin) &&
				Objects.equals(this.symbol, binanceRawFuturesAccountPosition.symbol) &&
				Objects.equals(this.unrealizedProfit, binanceRawFuturesAccountPosition.unrealizedProfit) &&
				Objects.equals(this.positionSide, binanceRawFuturesAccountPosition.positionSide) &&
				Objects.equals(this.entryPrice, binanceRawFuturesAccountPosition.entryPrice) &&
				Objects.equals(this.maxNotional, binanceRawFuturesAccountPosition.maxNotional) &&
				Objects.equals(this.positionAmount, binanceRawFuturesAccountPosition.positionAmount);
	}

	@Override
	public int hashCode() {
		return Objects.hash(isolated, leverage, initialMargin, maintMargin, openOrderInitialMargin, positionInitialMargin, symbol, unrealizedProfit, positionSide, entryPrice, maxNotional, positionAmount);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BinanceRawFuturesAccountPosition {\n");

		sb.append("    isolated: ").append(toIndentedString(isolated)).append("\n");
		sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
		sb.append("    initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
		sb.append("    maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
		sb.append("    openOrderInitialMargin: ").append(toIndentedString(openOrderInitialMargin)).append("\n");
		sb.append("    positionInitialMargin: ").append(toIndentedString(positionInitialMargin)).append("\n");
		sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
		sb.append("    unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
		sb.append("    positionSide: ").append(toIndentedString(positionSide)).append("\n");
		sb.append("    entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
		sb.append("    maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
		sb.append("    positionAmount: ").append(toIndentedString(positionAmount)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(isolated);
		out.writeValue(leverage);
		out.writeValue(initialMargin);
		out.writeValue(maintMargin);
		out.writeValue(openOrderInitialMargin);
		out.writeValue(positionInitialMargin);
		out.writeValue(symbol);
		out.writeValue(unrealizedProfit);
		out.writeValue(positionSide);
		out.writeValue(entryPrice);
		out.writeValue(maxNotional);
		out.writeValue(positionAmount);
	}

	public int describeContents() {
		return 0;
	}
}
