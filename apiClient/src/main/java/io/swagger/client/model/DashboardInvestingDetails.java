/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DashboardProfits;
import io.swagger.client.model.InvestmentEventViewModelItemsViewModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * DashboardInvestingDetails
 */


public class DashboardInvestingDetails implements Parcelable {
  @SerializedName("equity")
  private Double equity = null;

  @SerializedName("programsCount")
  private Integer programsCount = null;

  @SerializedName("fundsCount")
  private Integer fundsCount = null;

  @SerializedName("coinsCount")
  private Integer coinsCount = null;

  @SerializedName("profits")
  private DashboardProfits profits = null;

  @SerializedName("events")
  private InvestmentEventViewModelItemsViewModel events = null;

  public DashboardInvestingDetails() {
  }
  public DashboardInvestingDetails equity(Double equity) {
    this.equity = equity;
    return this;
  }

   /**
   * Get equity
   * @return equity
  **/
  @Schema(description = "")
  public Double getEquity() {
    return equity;
  }

  public void setEquity(Double equity) {
    this.equity = equity;
  }

  public DashboardInvestingDetails programsCount(Integer programsCount) {
    this.programsCount = programsCount;
    return this;
  }

   /**
   * Get programsCount
   * @return programsCount
  **/
  @Schema(description = "")
  public Integer getProgramsCount() {
    return programsCount;
  }

  public void setProgramsCount(Integer programsCount) {
    this.programsCount = programsCount;
  }

  public DashboardInvestingDetails fundsCount(Integer fundsCount) {
    this.fundsCount = fundsCount;
    return this;
  }

   /**
   * Get fundsCount
   * @return fundsCount
  **/
  @Schema(description = "")
  public Integer getFundsCount() {
    return fundsCount;
  }

  public void setFundsCount(Integer fundsCount) {
    this.fundsCount = fundsCount;
  }

  public DashboardInvestingDetails coinsCount(Integer coinsCount) {
    this.coinsCount = coinsCount;
    return this;
  }

   /**
   * Get coinsCount
   * @return coinsCount
  **/
  @Schema(description = "")
  public Integer getCoinsCount() {
    return coinsCount;
  }

  public void setCoinsCount(Integer coinsCount) {
    this.coinsCount = coinsCount;
  }

  public DashboardInvestingDetails profits(DashboardProfits profits) {
    this.profits = profits;
    return this;
  }

   /**
   * Get profits
   * @return profits
  **/
  @Schema(description = "")
  public DashboardProfits getProfits() {
    return profits;
  }

  public void setProfits(DashboardProfits profits) {
    this.profits = profits;
  }

  public DashboardInvestingDetails events(InvestmentEventViewModelItemsViewModel events) {
    this.events = events;
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @Schema(description = "")
  public InvestmentEventViewModelItemsViewModel getEvents() {
    return events;
  }

  public void setEvents(InvestmentEventViewModelItemsViewModel events) {
    this.events = events;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardInvestingDetails dashboardInvestingDetails = (DashboardInvestingDetails) o;
    return Objects.equals(this.equity, dashboardInvestingDetails.equity) &&
        Objects.equals(this.programsCount, dashboardInvestingDetails.programsCount) &&
        Objects.equals(this.fundsCount, dashboardInvestingDetails.fundsCount) &&
        Objects.equals(this.coinsCount, dashboardInvestingDetails.coinsCount) &&
        Objects.equals(this.profits, dashboardInvestingDetails.profits) &&
        Objects.equals(this.events, dashboardInvestingDetails.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equity, programsCount, fundsCount, coinsCount, profits, events);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardInvestingDetails {\n");
    
    sb.append("    equity: ").append(toIndentedString(equity)).append("\n");
    sb.append("    programsCount: ").append(toIndentedString(programsCount)).append("\n");
    sb.append("    fundsCount: ").append(toIndentedString(fundsCount)).append("\n");
    sb.append("    coinsCount: ").append(toIndentedString(coinsCount)).append("\n");
    sb.append("    profits: ").append(toIndentedString(profits)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(equity);
    out.writeValue(programsCount);
    out.writeValue(fundsCount);
    out.writeValue(coinsCount);
    out.writeValue(profits);
    out.writeValue(events);
  }

  DashboardInvestingDetails(Parcel in) {
    equity = (Double)in.readValue(null);
    programsCount = (Integer)in.readValue(null);
    fundsCount = (Integer)in.readValue(null);
    coinsCount = (Integer)in.readValue(null);
    profits = (DashboardProfits)in.readValue(DashboardProfits.class.getClassLoader());
    events = (InvestmentEventViewModelItemsViewModel)in.readValue(InvestmentEventViewModelItemsViewModel.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<DashboardInvestingDetails> CREATOR = new Parcelable.Creator<DashboardInvestingDetails>() {
    public DashboardInvestingDetails createFromParcel(Parcel in) {
      return new DashboardInvestingDetails(in);
    }
    public DashboardInvestingDetails[] newArray(int size) {
      return new DashboardInvestingDetails[size];
    }
  };
}
