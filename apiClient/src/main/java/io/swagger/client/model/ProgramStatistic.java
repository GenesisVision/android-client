/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import org.joda.time.DateTime;

import java.io.IOException;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ProgramStatistic
 */


public class ProgramStatistic implements Parcelable
{
	public static final Parcelable.Creator<ProgramStatistic> CREATOR = new Parcelable.Creator<ProgramStatistic>()
	{
		public ProgramStatistic createFromParcel(Parcel in) {
			return new ProgramStatistic(in);
		}

		public ProgramStatistic[] newArray(int size) {
			return new ProgramStatistic[size];
		}
	};

	@SerializedName("balanceBase")
	private AmountWithCurrency balanceBase = null;

	@SerializedName("balanceGVT")
	private AmountWithCurrency balanceGVT = null;

	@SerializedName("balanceSecondary")
	private AmountWithCurrency balanceSecondary = null;

	@SerializedName("currentValue")
	private Double currentValue = null;

	@SerializedName("profitPercent")
	private Double profitPercent = null;

	@SerializedName("profitValue")
	private Double profitValue = null;

	@SerializedName("drawdownPercent")
	private Double drawdownPercent = null;

	@SerializedName("investorsCount")
	private Integer investorsCount = null;

	@SerializedName("hasNotifications")
	private Boolean hasNotifications = null;

	@SerializedName("startDate")
	private DateTime startDate = null;

	@SerializedName("startBalance")
	private Double startBalance = null;

	@SerializedName("startCurrency")
	private StartCurrencyEnum startCurrency = null;

	@SerializedName("investedAmount")
	private Double investedAmount = null;

	@SerializedName("investedCurrency")
	private InvestedCurrencyEnum investedCurrency = null;

	@SerializedName("tradesCount")
	private Integer tradesCount = null;

	@SerializedName("tradesSuccessCount")
	private Integer tradesSuccessCount = null;

	@SerializedName("profitFactorPercent")
	private Double profitFactorPercent = null;

	@SerializedName("sharpeRatioPercent")
	private Double sharpeRatioPercent = null;

	public ProgramStatistic() {
	}

	ProgramStatistic(Parcel in) {
		balanceBase = (AmountWithCurrency) in.readValue(AmountWithCurrency.class.getClassLoader());
		balanceGVT = (AmountWithCurrency) in.readValue(AmountWithCurrency.class.getClassLoader());
		balanceSecondary = (AmountWithCurrency) in.readValue(AmountWithCurrency.class.getClassLoader());
		currentValue = (Double) in.readValue(null);
		profitPercent = (Double) in.readValue(null);
		profitValue = (Double) in.readValue(null);
		drawdownPercent = (Double) in.readValue(null);
		investorsCount = (Integer) in.readValue(null);
		hasNotifications = (Boolean) in.readValue(null);
		startDate = (DateTime) in.readValue(DateTime.class.getClassLoader());
		startBalance = (Double) in.readValue(null);
		startCurrency = (StartCurrencyEnum) in.readValue(null);
		investedAmount = (Double) in.readValue(null);
		investedCurrency = (InvestedCurrencyEnum) in.readValue(null);
		tradesCount = (Integer) in.readValue(null);
		tradesSuccessCount = (Integer) in.readValue(null);
		profitFactorPercent = (Double) in.readValue(null);
		sharpeRatioPercent = (Double) in.readValue(null);
	}

	public ProgramStatistic balanceBase(AmountWithCurrency balanceBase) {
		this.balanceBase = balanceBase;
		return this;
	}

	/**
	 * Get balanceBase
	 *
	 * @return balanceBase
	 **/
	@Schema(description = "")
	public AmountWithCurrency getBalanceBase() {
		return balanceBase;
	}

	public void setBalanceBase(AmountWithCurrency balanceBase) {
		this.balanceBase = balanceBase;
	}

	public ProgramStatistic balanceGVT(AmountWithCurrency balanceGVT) {
		this.balanceGVT = balanceGVT;
		return this;
	}

	/**
	 * Get balanceGVT
	 *
	 * @return balanceGVT
	 **/
	@Schema(description = "")
	public AmountWithCurrency getBalanceGVT() {
		return balanceGVT;
	}

	public void setBalanceGVT(AmountWithCurrency balanceGVT) {
		this.balanceGVT = balanceGVT;
	}

	public ProgramStatistic balanceSecondary(AmountWithCurrency balanceSecondary) {
		this.balanceSecondary = balanceSecondary;
		return this;
	}

	/**
	 * Get balanceSecondary
	 *
	 * @return balanceSecondary
	 **/
	@Schema(description = "")
	public AmountWithCurrency getBalanceSecondary() {
		return balanceSecondary;
	}

	public void setBalanceSecondary(AmountWithCurrency balanceSecondary) {
		this.balanceSecondary = balanceSecondary;
	}

	public ProgramStatistic currentValue(Double currentValue) {
		this.currentValue = currentValue;
		return this;
	}

	/**
	 * Get currentValue
	 *
	 * @return currentValue
	 **/
	@Schema(description = "")
	public Double getCurrentValue() {
		return currentValue;
	}

	public void setCurrentValue(Double currentValue) {
		this.currentValue = currentValue;
	}

	public ProgramStatistic profitPercent(Double profitPercent) {
		this.profitPercent = profitPercent;
		return this;
	}

	/**
	 * Get profitPercent
	 *
	 * @return profitPercent
	 **/
	@Schema(description = "")
	public Double getProfitPercent() {
		return profitPercent;
	}

	public void setProfitPercent(Double profitPercent) {
		this.profitPercent = profitPercent;
	}

	public ProgramStatistic profitValue(Double profitValue) {
		this.profitValue = profitValue;
		return this;
	}

	/**
	 * Get profitValue
	 *
	 * @return profitValue
	 **/
	@Schema(description = "")
	public Double getProfitValue() {
		return profitValue;
	}

	public void setProfitValue(Double profitValue) {
		this.profitValue = profitValue;
	}

	public ProgramStatistic drawdownPercent(Double drawdownPercent) {
		this.drawdownPercent = drawdownPercent;
		return this;
	}

	/**
	 * Get drawdownPercent
	 *
	 * @return drawdownPercent
	 **/
	@Schema(description = "")
	public Double getDrawdownPercent() {
		return drawdownPercent;
	}

	public void setDrawdownPercent(Double drawdownPercent) {
		this.drawdownPercent = drawdownPercent;
	}

	public ProgramStatistic investorsCount(Integer investorsCount) {
		this.investorsCount = investorsCount;
		return this;
	}

	/**
	 * Get investorsCount
	 *
	 * @return investorsCount
	 **/
	@Schema(description = "")
	public Integer getInvestorsCount() {
		return investorsCount;
	}

	public void setInvestorsCount(Integer investorsCount) {
		this.investorsCount = investorsCount;
	}

	public ProgramStatistic hasNotifications(Boolean hasNotifications) {
		this.hasNotifications = hasNotifications;
		return this;
	}

	/**
	 * Get hasNotifications
	 *
	 * @return hasNotifications
	 **/
	@Schema(description = "")
	public Boolean isHasNotifications() {
		return hasNotifications;
	}

	public void setHasNotifications(Boolean hasNotifications) {
		this.hasNotifications = hasNotifications;
	}

	public ProgramStatistic startDate(DateTime startDate) {
		this.startDate = startDate;
		return this;
	}

	/**
	 * Get startDate
	 *
	 * @return startDate
	 **/
	@Schema(description = "")
	public DateTime getStartDate() {
		return startDate;
	}

	public void setStartDate(DateTime startDate) {
		this.startDate = startDate;
	}

	public ProgramStatistic startBalance(Double startBalance) {
		this.startBalance = startBalance;
		return this;
	}

	/**
	 * Get startBalance
	 *
	 * @return startBalance
	 **/
	@Schema(description = "")
	public Double getStartBalance() {
		return startBalance;
	}

	public void setStartBalance(Double startBalance) {
		this.startBalance = startBalance;
	}

	public ProgramStatistic startCurrency(StartCurrencyEnum startCurrency) {
		this.startCurrency = startCurrency;
		return this;
	}

	/**
	 * Get startCurrency
	 *
	 * @return startCurrency
	 **/
	@Schema(description = "")
	public StartCurrencyEnum getStartCurrency() {
		return startCurrency;
	}

	public void setStartCurrency(StartCurrencyEnum startCurrency) {
		this.startCurrency = startCurrency;
	}

	public ProgramStatistic investedAmount(Double investedAmount) {
		this.investedAmount = investedAmount;
		return this;
	}

	/**
	 * Get investedAmount
	 *
	 * @return investedAmount
	 **/
	@Schema(description = "")
	public Double getInvestedAmount() {
		return investedAmount;
	}

	public void setInvestedAmount(Double investedAmount) {
		this.investedAmount = investedAmount;
	}

	public ProgramStatistic investedCurrency(InvestedCurrencyEnum investedCurrency) {
		this.investedCurrency = investedCurrency;
		return this;
	}

	/**
	 * Get investedCurrency
	 *
	 * @return investedCurrency
	 **/
	@Schema(description = "")
	public InvestedCurrencyEnum getInvestedCurrency() {
		return investedCurrency;
	}

	public void setInvestedCurrency(InvestedCurrencyEnum investedCurrency) {
		this.investedCurrency = investedCurrency;
	}

	public ProgramStatistic tradesCount(Integer tradesCount) {
		this.tradesCount = tradesCount;
		return this;
	}

	/**
	 * Get tradesCount
	 *
	 * @return tradesCount
	 **/
	@Schema(description = "")
	public Integer getTradesCount() {
		return tradesCount;
	}

	public void setTradesCount(Integer tradesCount) {
		this.tradesCount = tradesCount;
	}

	public ProgramStatistic tradesSuccessCount(Integer tradesSuccessCount) {
		this.tradesSuccessCount = tradesSuccessCount;
		return this;
	}

	/**
	 * Get tradesSuccessCount
	 *
	 * @return tradesSuccessCount
	 **/
	@Schema(description = "")
	public Integer getTradesSuccessCount() {
		return tradesSuccessCount;
	}

	public void setTradesSuccessCount(Integer tradesSuccessCount) {
		this.tradesSuccessCount = tradesSuccessCount;
	}

	public ProgramStatistic profitFactorPercent(Double profitFactorPercent) {
		this.profitFactorPercent = profitFactorPercent;
		return this;
	}

	/**
	 * Get profitFactorPercent
	 *
	 * @return profitFactorPercent
	 **/
	@Schema(description = "")
	public Double getProfitFactorPercent() {
		return profitFactorPercent;
	}

	public void setProfitFactorPercent(Double profitFactorPercent) {
		this.profitFactorPercent = profitFactorPercent;
	}

	public ProgramStatistic sharpeRatioPercent(Double sharpeRatioPercent) {
		this.sharpeRatioPercent = sharpeRatioPercent;
		return this;
	}

	/**
	 * Get sharpeRatioPercent
	 *
	 * @return sharpeRatioPercent
	 **/
	@Schema(description = "")
	public Double getSharpeRatioPercent() {
		return sharpeRatioPercent;
	}

	public void setSharpeRatioPercent(Double sharpeRatioPercent) {
		this.sharpeRatioPercent = sharpeRatioPercent;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ProgramStatistic programStatistic = (ProgramStatistic) o;
		return Objects.equals(this.balanceBase, programStatistic.balanceBase) &&
				Objects.equals(this.balanceGVT, programStatistic.balanceGVT) &&
				Objects.equals(this.balanceSecondary, programStatistic.balanceSecondary) &&
				Objects.equals(this.currentValue, programStatistic.currentValue) &&
				Objects.equals(this.profitPercent, programStatistic.profitPercent) &&
				Objects.equals(this.profitValue, programStatistic.profitValue) &&
				Objects.equals(this.drawdownPercent, programStatistic.drawdownPercent) &&
				Objects.equals(this.investorsCount, programStatistic.investorsCount) &&
				Objects.equals(this.hasNotifications, programStatistic.hasNotifications) &&
				Objects.equals(this.startDate, programStatistic.startDate) &&
				Objects.equals(this.startBalance, programStatistic.startBalance) &&
				Objects.equals(this.startCurrency, programStatistic.startCurrency) &&
				Objects.equals(this.investedAmount, programStatistic.investedAmount) &&
				Objects.equals(this.investedCurrency, programStatistic.investedCurrency) &&
				Objects.equals(this.tradesCount, programStatistic.tradesCount) &&
				Objects.equals(this.tradesSuccessCount, programStatistic.tradesSuccessCount) &&
				Objects.equals(this.profitFactorPercent, programStatistic.profitFactorPercent) &&
				Objects.equals(this.sharpeRatioPercent, programStatistic.sharpeRatioPercent);
	}

	@Override
	public int hashCode() {
		return Objects.hash(balanceBase, balanceGVT, balanceSecondary, currentValue, profitPercent, profitValue, drawdownPercent, investorsCount, hasNotifications, startDate, startBalance, startCurrency, investedAmount, investedCurrency, tradesCount, tradesSuccessCount, profitFactorPercent, sharpeRatioPercent);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ProgramStatistic {\n");

		sb.append("    balanceBase: ").append(toIndentedString(balanceBase)).append("\n");
		sb.append("    balanceGVT: ").append(toIndentedString(balanceGVT)).append("\n");
		sb.append("    balanceSecondary: ").append(toIndentedString(balanceSecondary)).append("\n");
		sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
		sb.append("    profitPercent: ").append(toIndentedString(profitPercent)).append("\n");
		sb.append("    profitValue: ").append(toIndentedString(profitValue)).append("\n");
		sb.append("    drawdownPercent: ").append(toIndentedString(drawdownPercent)).append("\n");
		sb.append("    investorsCount: ").append(toIndentedString(investorsCount)).append("\n");
		sb.append("    hasNotifications: ").append(toIndentedString(hasNotifications)).append("\n");
		sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
		sb.append("    startBalance: ").append(toIndentedString(startBalance)).append("\n");
		sb.append("    startCurrency: ").append(toIndentedString(startCurrency)).append("\n");
		sb.append("    investedAmount: ").append(toIndentedString(investedAmount)).append("\n");
		sb.append("    investedCurrency: ").append(toIndentedString(investedCurrency)).append("\n");
		sb.append("    tradesCount: ").append(toIndentedString(tradesCount)).append("\n");
		sb.append("    tradesSuccessCount: ").append(toIndentedString(tradesSuccessCount)).append("\n");
		sb.append("    profitFactorPercent: ").append(toIndentedString(profitFactorPercent)).append("\n");
		sb.append("    sharpeRatioPercent: ").append(toIndentedString(sharpeRatioPercent)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}


	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(balanceBase);
		out.writeValue(balanceGVT);
		out.writeValue(balanceSecondary);
		out.writeValue(currentValue);
		out.writeValue(profitPercent);
		out.writeValue(profitValue);
		out.writeValue(drawdownPercent);
		out.writeValue(investorsCount);
		out.writeValue(hasNotifications);
		out.writeValue(startDate);
		out.writeValue(startBalance);
		out.writeValue(startCurrency);
		out.writeValue(investedAmount);
		out.writeValue(investedCurrency);
		out.writeValue(tradesCount);
		out.writeValue(tradesSuccessCount);
		out.writeValue(profitFactorPercent);
		out.writeValue(sharpeRatioPercent);
	}

	public int describeContents() {
		return 0;
	}

	/**
	 * Gets or Sets startCurrency
	 */
	@JsonAdapter(StartCurrencyEnum.Adapter.class)
	public enum StartCurrencyEnum
	{
		UNDEFINED("Undefined"),
		GVT("GVT"),
		ETH("ETH"),
		BTC("BTC"),
		ADA("ADA"),
		USDT("USDT"),
		XRP("XRP"),
		BCH("BCH"),
		LTC("LTC"),
		DOGE("DOGE"),
		BNB("BNB"),
		USD("USD"),
		EUR("EUR");

		public static StartCurrencyEnum fromValue(String text) {
			for (StartCurrencyEnum b : StartCurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		StartCurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<StartCurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final StartCurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public StartCurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return StartCurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

	/**
	 * Gets or Sets investedCurrency
	 */
	@JsonAdapter(InvestedCurrencyEnum.Adapter.class)
	public enum InvestedCurrencyEnum
	{
		UNDEFINED("Undefined"),
		GVT("GVT"),
		ETH("ETH"),
		BTC("BTC"),
		ADA("ADA"),
		USDT("USDT"),
		XRP("XRP"),
		BCH("BCH"),
		LTC("LTC"),
		DOGE("DOGE"),
		BNB("BNB"),
		USD("USD"),
		EUR("EUR");

		public static InvestedCurrencyEnum fromValue(String text) {
			for (InvestedCurrencyEnum b : InvestedCurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		InvestedCurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<InvestedCurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final InvestedCurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public InvestedCurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return InvestedCurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}
}
