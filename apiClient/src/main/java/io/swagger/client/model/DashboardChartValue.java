/*
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * DashboardChartValue
 */

public class DashboardChartValue
{
	@SerializedName("bars")
	private List<ValueChartBar> bars = null;

	@SerializedName("chart")
	private List<ChartSimple> chart = null;

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	public DashboardChartValue bars(List<ValueChartBar> bars) {
		this.bars = bars;
		return this;
	}

	public DashboardChartValue addBarsItem(ValueChartBar barsItem) {
		if (this.bars == null) {
			this.bars = new ArrayList<ValueChartBar>();
		}
		this.bars.add(barsItem);
		return this;
	}

	/**
	 * Get bars
	 *
	 * @return bars
	 **/
	@ApiModelProperty(value = "")
	public List<ValueChartBar> getBars() {
		return bars;
	}

	public void setBars(List<ValueChartBar> bars) {
		this.bars = bars;
	}

	public DashboardChartValue chart(List<ChartSimple> chart) {
		this.chart = chart;
		return this;
	}

	public DashboardChartValue addChartItem(ChartSimple chartItem) {
		if (this.chart == null) {
			this.chart = new ArrayList<ChartSimple>();
		}
		this.chart.add(chartItem);
		return this;
	}

	/**
	 * Get chart
	 *
	 * @return chart
	 **/
	@ApiModelProperty(value = "")
	public List<ChartSimple> getChart() {
		return chart;
	}

	public void setChart(List<ChartSimple> chart) {
		this.chart = chart;
	}

	public DashboardChartValue currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@ApiModelProperty(value = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		DashboardChartValue dashboardChartValue = (DashboardChartValue) o;
		return Objects.equals(this.bars, dashboardChartValue.bars) &&
				Objects.equals(this.chart, dashboardChartValue.chart) &&
				Objects.equals(this.currency, dashboardChartValue.currency);
	}

	@Override
	public int hashCode() {
		return Objects.hash(bars, chart, currency);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class DashboardChartValue {\n");

		sb.append("    bars: ").append(toIndentedString(bars)).append("\n");
		sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		UNDEFINED("Undefined"),

		GVT("GVT"),

		ETH("ETH"),

		BTC("BTC"),

		ADA("ADA"),

		USD("USD"),

		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}

}

