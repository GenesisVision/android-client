/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * InternalTransferRequest
 */


public class InternalTransferRequest implements Parcelable
{
  @SerializedName("sourceId")
  private UUID sourceId = null;

  @SerializedName("sourceType")
  private TransferRequestType sourceType = null;

  @SerializedName("destinationId")
  private UUID destinationId = null;

  @SerializedName("destinationType")
  private TransferRequestType destinationType = null;

  @SerializedName("amount")
  private Double amount = null;

  @SerializedName("transferAll")
  private Boolean transferAll = null;

  public InternalTransferRequest() {
  }

	public InternalTransferRequest sourceId(UUID sourceId) {
		this.sourceId = sourceId;
		return this;
	}

	public static final Parcelable.Creator<InternalTransferRequest> CREATOR = new Parcelable.Creator<InternalTransferRequest>()
	{
		public InternalTransferRequest createFromParcel(Parcel in) {
			return new InternalTransferRequest(in);
		}

		public InternalTransferRequest[] newArray(int size) {
			return new InternalTransferRequest[size];
		}
	};

	public void setSourceId(UUID sourceId) {
		this.sourceId = sourceId;
	}

	public InternalTransferRequest sourceType(TransferRequestType sourceType) {
		this.sourceType = sourceType;
		return this;
	}

  InternalTransferRequest(Parcel in) {
	  sourceId = (UUID) in.readValue(UUID.class.getClassLoader());
	  sourceType = (TransferRequestType) in.readValue(TransferRequestType.class.getClassLoader());
	  destinationId = (UUID) in.readValue(UUID.class.getClassLoader());
	  destinationType = (TransferRequestType) in.readValue(TransferRequestType.class.getClassLoader());
	  amount = (Double) in.readValue(null);
	  transferAll = (Boolean) in.readValue(null);
  }

	public void setSourceType(TransferRequestType sourceType) {
		this.sourceType = sourceType;
	}

	public InternalTransferRequest destinationId(UUID destinationId) {
		this.destinationId = destinationId;
    return this;
  }

	/**
   * Get sourceId
   * @return sourceId
	 **/
  @Schema(description = "")
  public UUID getSourceId() {
    return sourceId;
  }

	public void setDestinationId(UUID destinationId) {
		this.destinationId = destinationId;
  }

	public InternalTransferRequest destinationType(TransferRequestType destinationType) {
		this.destinationType = destinationType;
    return this;
  }

	/**
   * Get sourceType
   * @return sourceType
	 **/
  @Schema(description = "")
  public TransferRequestType getSourceType() {
    return sourceType;
  }

	public void setDestinationType(TransferRequestType destinationType) {
		this.destinationType = destinationType;
  }

	public InternalTransferRequest amount(Double amount) {
		this.amount = amount;
    return this;
  }

	/**
   * Get destinationId
   * @return destinationId
	 **/
  @Schema(description = "")
  public UUID getDestinationId() {
    return destinationId;
  }

	public void setAmount(Double amount) {
		this.amount = amount;
  }

	public InternalTransferRequest transferAll(Boolean transferAll) {
		this.transferAll = transferAll;
    return this;
  }

	/**
   * Get destinationType
   * @return destinationType
	 **/
  @Schema(description = "")
  public TransferRequestType getDestinationType() {
    return destinationType;
  }

	public void setTransferAll(Boolean transferAll) {
		this.transferAll = transferAll;
  }

	/**
   * Get amount
   * @return amount
	 **/
  @Schema(description = "")
  public Double getAmount() {
    return amount;
  }

	@Override
	public int hashCode() {
		return Objects.hash(sourceId, sourceType, destinationId, destinationType, amount, transferAll);
  }

	/**
   * Get transferAll
   * @return transferAll
	 **/
  @Schema(description = "")
  public Boolean isTransferAll() {
    return transferAll;
  }

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}


	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(sourceId);
		out.writeValue(sourceType);
		out.writeValue(destinationId);
		out.writeValue(destinationType);
		out.writeValue(amount);
		out.writeValue(transferAll);
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalTransferRequest internalTransferRequest = (InternalTransferRequest) o;
    return Objects.equals(this.sourceId, internalTransferRequest.sourceId) &&
		    Objects.equals(this.sourceType, internalTransferRequest.sourceType) &&
		    Objects.equals(this.destinationId, internalTransferRequest.destinationId) &&
		    Objects.equals(this.destinationType, internalTransferRequest.destinationType) &&
		    Objects.equals(this.amount, internalTransferRequest.amount) &&
		    Objects.equals(this.transferAll, internalTransferRequest.transferAll);
  }

	public int describeContents() {
		return 0;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalTransferRequest {\n");

    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transferAll: ").append(toIndentedString(transferAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
