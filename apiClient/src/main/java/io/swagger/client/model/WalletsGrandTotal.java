/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * WalletsGrandTotal
 */


public class WalletsGrandTotal implements Parcelable
{
	public static final Parcelable.Creator<WalletsGrandTotal> CREATOR = new Parcelable.Creator<WalletsGrandTotal>()
	{
		public WalletsGrandTotal createFromParcel(Parcel in) {
			return new WalletsGrandTotal(in);
		}

		public WalletsGrandTotal[] newArray(int size) {
			return new WalletsGrandTotal[size];
		}
	};

	@SerializedName("currency")
	private Currency currency = null;

	@SerializedName("available")
	private Double available = null;

	@SerializedName("invested")
	private Double invested = null;

	@SerializedName("total")
	private Double total = null;

	@SerializedName("trading")
	private Double trading = null;

	public WalletsGrandTotal() {
	}

	WalletsGrandTotal(Parcel in) {
		currency = (Currency) in.readValue(Currency.class.getClassLoader());
		available = (Double) in.readValue(null);
		invested = (Double) in.readValue(null);
		trading = (Double) in.readValue(null);
		total = (Double) in.readValue(null);
	}

	public WalletsGrandTotal currency(Currency currency) {
		this.currency = currency;
		return this;
	}

	public WalletsGrandTotal available(Double available) {
		this.available = available;
		return this;
	}

	public WalletsGrandTotal invested(Double invested) {
		this.invested = invested;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public Currency getCurrency() {
		return currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	public WalletsGrandTotal trading(Double trading) {
		this.trading = trading;
		return this;
	}

	/**
	 * Get available
	 *
	 * @return available
	 **/
	@Schema(description = "")
	public Double getAvailable() {
		return available;
	}

	public void setAvailable(Double available) {
		this.available = available;
	}

	/**
	 * Get invested
	 *
	 * @return invested
	 **/
	@Schema(description = "")
	public Double getInvested() {
		return invested;
	}

	public void setInvested(Double invested) {
		this.invested = invested;
	}

	/**
	 * Get trading
	 *
	 * @return trading
	 **/
	@Schema(description = "")
	public Double getTrading() {
		return trading;
	}

	public void setTrading(Double trading) {
		this.trading = trading;
	}

	@Override
	public int hashCode() {
		return Objects.hash(currency, available, invested, trading, total);
	}

	/**
	 * Get total
	 *
	 * @return total
	 **/
	@Schema(description = "")
	public Double getTotal() {
		return total;
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WalletsGrandTotal walletsGrandTotal = (WalletsGrandTotal) o;
		return Objects.equals(this.currency, walletsGrandTotal.currency) &&
				Objects.equals(this.available, walletsGrandTotal.available) &&
				Objects.equals(this.invested, walletsGrandTotal.invested) &&
				Objects.equals(this.trading, walletsGrandTotal.trading) &&
				Objects.equals(this.total, walletsGrandTotal.total);
	}

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
	  sb.append("class WalletsGrandTotal {\n");

	  sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
	  sb.append("    available: ").append(toIndentedString(available)).append("\n");
	  sb.append("    invested: ").append(toIndentedString(invested)).append("\n");
	  sb.append("    trading: ").append(toIndentedString(trading)).append("\n");
	  sb.append("    total: ").append(toIndentedString(total)).append("\n");
	  sb.append("}");
	  return sb.toString();
  }

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(currency);
		out.writeValue(available);
		out.writeValue(invested);
		out.writeValue(trading);
		out.writeValue(total);
	}

	public int describeContents() {
		return 0;
	}
}
