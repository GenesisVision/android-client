/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * WalletsGrandTotal
 */


public class WalletsGrandTotal implements Parcelable
{
	public static final Parcelable.Creator<WalletsGrandTotal> CREATOR = new Parcelable.Creator<WalletsGrandTotal>()
	{
		public WalletsGrandTotal createFromParcel(Parcel in) {
			return new WalletsGrandTotal(in);
		}

		public WalletsGrandTotal[] newArray(int size) {
			return new WalletsGrandTotal[size];
		}
	};

	@SerializedName("currency")
	private Currency currency = null;

	@SerializedName("available")
	private Double available = null;

	@SerializedName("invested")
	private Double invested = null;

	@SerializedName("pending")
	private Double pending = null;

	@SerializedName("total")
	private Double total = null;

	@SerializedName("currencyCcy")
	private Currency currencyCcy = null;

	@SerializedName("availableCcy")
	private Double availableCcy = null;

	@SerializedName("investedCcy")
	private Double investedCcy = null;

	@SerializedName("pendingCcy")
	private Double pendingCcy = null;

	@SerializedName("totalCcy")
	private Double totalCcy = null;

	public WalletsGrandTotal() {
	}

	WalletsGrandTotal(Parcel in) {
		currency = (Currency) in.readValue(Currency.class.getClassLoader());
		available = (Double) in.readValue(null);
		invested = (Double) in.readValue(null);
		pending = (Double) in.readValue(null);
		total = (Double) in.readValue(null);
		currencyCcy = (Currency) in.readValue(Currency.class.getClassLoader());
		availableCcy = (Double) in.readValue(null);
		investedCcy = (Double) in.readValue(null);
		pendingCcy = (Double) in.readValue(null);
		totalCcy = (Double) in.readValue(null);
	}

	public WalletsGrandTotal currency(Currency currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public Currency getCurrency() {
		return currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	public WalletsGrandTotal available(Double available) {
		this.available = available;
		return this;
	}

	/**
	 * Get available
	 *
	 * @return available
	 **/
	@Schema(description = "")
	public Double getAvailable() {
		return available;
	}

	public void setAvailable(Double available) {
		this.available = available;
	}

	public WalletsGrandTotal invested(Double invested) {
		this.invested = invested;
		return this;
	}

	/**
	 * Get invested
	 *
	 * @return invested
	 **/
	@Schema(description = "")
	public Double getInvested() {
		return invested;
	}

	public void setInvested(Double invested) {
		this.invested = invested;
	}

	public WalletsGrandTotal pending(Double pending) {
		this.pending = pending;
		return this;
	}

	/**
	 * Get pending
	 *
	 * @return pending
	 **/
	@Schema(description = "")
	public Double getPending() {
		return pending;
	}

	public void setPending(Double pending) {
		this.pending = pending;
	}

	/**
	 * Get total
	 *
	 * @return total
	 **/
	@Schema(description = "")
	public Double getTotal() {
		return total;
	}

	public WalletsGrandTotal currencyCcy(Currency currencyCcy) {
		this.currencyCcy = currencyCcy;
		return this;
	}

	/**
	 * Get currencyCcy
	 *
	 * @return currencyCcy
	 **/
	@Schema(description = "")
	public Currency getCurrencyCcy() {
		return currencyCcy;
	}

	public void setCurrencyCcy(Currency currencyCcy) {
		this.currencyCcy = currencyCcy;
	}

	public WalletsGrandTotal availableCcy(Double availableCcy) {
		this.availableCcy = availableCcy;
		return this;
	}

	/**
	 * Get availableCcy
	 *
	 * @return availableCcy
	 **/
	@Schema(description = "")
	public Double getAvailableCcy() {
		return availableCcy;
	}

	public void setAvailableCcy(Double availableCcy) {
		this.availableCcy = availableCcy;
	}

	public WalletsGrandTotal investedCcy(Double investedCcy) {
		this.investedCcy = investedCcy;
		return this;
	}

	/**
	 * Get investedCcy
	 *
	 * @return investedCcy
	 **/
	@Schema(description = "")
	public Double getInvestedCcy() {
		return investedCcy;
	}

	public void setInvestedCcy(Double investedCcy) {
		this.investedCcy = investedCcy;
	}

	public WalletsGrandTotal pendingCcy(Double pendingCcy) {
		this.pendingCcy = pendingCcy;
		return this;
	}

	/**
	 * Get pendingCcy
	 *
	 * @return pendingCcy
	 **/
	@Schema(description = "")
	public Double getPendingCcy() {
		return pendingCcy;
	}

	public void setPendingCcy(Double pendingCcy) {
		this.pendingCcy = pendingCcy;
	}

	/**
	 * Get totalCcy
	 *
	 * @return totalCcy
	 **/
	@Schema(description = "")
	public Double getTotalCcy() {
		return totalCcy;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		WalletsGrandTotal walletsGrandTotal = (WalletsGrandTotal) o;
		return Objects.equals(this.currency, walletsGrandTotal.currency) &&
				Objects.equals(this.available, walletsGrandTotal.available) &&
				Objects.equals(this.invested, walletsGrandTotal.invested) &&
				Objects.equals(this.pending, walletsGrandTotal.pending) &&
				Objects.equals(this.total, walletsGrandTotal.total) &&
				Objects.equals(this.currencyCcy, walletsGrandTotal.currencyCcy) &&
				Objects.equals(this.availableCcy, walletsGrandTotal.availableCcy) &&
				Objects.equals(this.investedCcy, walletsGrandTotal.investedCcy) &&
				Objects.equals(this.pendingCcy, walletsGrandTotal.pendingCcy) &&
				Objects.equals(this.totalCcy, walletsGrandTotal.totalCcy);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currency, available, invested, pending, total, currencyCcy, availableCcy, investedCcy, pendingCcy, totalCcy);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WalletsGrandTotal {\n");

		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    available: ").append(toIndentedString(available)).append("\n");
		sb.append("    invested: ").append(toIndentedString(invested)).append("\n");
		sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
		sb.append("    total: ").append(toIndentedString(total)).append("\n");
		sb.append("    currencyCcy: ").append(toIndentedString(currencyCcy)).append("\n");
		sb.append("    availableCcy: ").append(toIndentedString(availableCcy)).append("\n");
		sb.append("    investedCcy: ").append(toIndentedString(investedCcy)).append("\n");
		sb.append("    pendingCcy: ").append(toIndentedString(pendingCcy)).append("\n");
		sb.append("    totalCcy: ").append(toIndentedString(totalCcy)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(currency);
		out.writeValue(available);
		out.writeValue(invested);
		out.writeValue(pending);
		out.writeValue(total);
		out.writeValue(currencyCcy);
		out.writeValue(availableCcy);
		out.writeValue(investedCcy);
		out.writeValue(pendingCcy);
		out.writeValue(totalCcy);
	}

	public int describeContents() {
		return 0;
	}
}
