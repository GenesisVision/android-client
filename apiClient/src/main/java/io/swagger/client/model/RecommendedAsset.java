/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * RecommendedAsset
 */


public class RecommendedAsset implements Parcelable
{
	public static final Parcelable.Creator<RecommendedAsset> CREATOR = new Parcelable.Creator<RecommendedAsset>()
	{
		public RecommendedAsset createFromParcel(Parcel in) {
			return new RecommendedAsset(in);
		}

		public RecommendedAsset[] newArray(int size) {
			return new RecommendedAsset[size];
		}
	};

	@SerializedName("chart")
	private ProfitChart chart = null;

	@SerializedName("id")
	private UUID id = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("color")
	private String color = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("url")
	private String url = null;

	@SerializedName("assetType")
	private AssetType assetType = null;

	@SerializedName("programDetails")
	private ProgramAssetDetails programDetails = null;

	public RecommendedAsset() {
	}

	RecommendedAsset(Parcel in) {
		chart = (ProfitChart) in.readValue(ProfitChart.class.getClassLoader());
		id = (UUID) in.readValue(UUID.class.getClassLoader());
		logo = (String) in.readValue(null);
		color = (String) in.readValue(null);
		title = (String) in.readValue(null);
		url = (String) in.readValue(null);
		assetType = (AssetType) in.readValue(AssetType.class.getClassLoader());
		programDetails = (ProgramAssetDetails) in.readValue(ProgramAssetDetails.class.getClassLoader());
	}

	public RecommendedAsset chart(ProfitChart chart) {
		this.chart = chart;
		return this;
	}

	/**
	 * Get chart
	 *
	 * @return chart
	 **/
	@Schema(description = "")
	public ProfitChart getChart() {
		return chart;
	}

	public void setChart(ProfitChart chart) {
		this.chart = chart;
	}

	public RecommendedAsset id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@Schema(description = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public RecommendedAsset logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@Schema(description = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public RecommendedAsset color(String color) {
		this.color = color;
		return this;
	}

	/**
	 * Get color
	 *
	 * @return color
	 **/
	@Schema(description = "")
	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public RecommendedAsset title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@Schema(description = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public RecommendedAsset url(String url) {
		this.url = url;
		return this;
	}

	/**
	 * Get url
	 *
	 * @return url
	 **/
	@Schema(description = "")
	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public RecommendedAsset assetType(AssetType assetType) {
		this.assetType = assetType;
		return this;
	}

	/**
	 * Get assetType
	 *
	 * @return assetType
	 **/
	@Schema(description = "")
	public AssetType getAssetType() {
		return assetType;
	}

	public void setAssetType(AssetType assetType) {
		this.assetType = assetType;
	}

	public RecommendedAsset programDetails(ProgramAssetDetails programDetails) {
		this.programDetails = programDetails;
		return this;
	}

	/**
	 * Get programDetails
	 *
	 * @return programDetails
	 **/
	@Schema(description = "")
	public ProgramAssetDetails getProgramDetails() {
		return programDetails;
	}

	public void setProgramDetails(ProgramAssetDetails programDetails) {
		this.programDetails = programDetails;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		RecommendedAsset recommendedAsset = (RecommendedAsset) o;
		return Objects.equals(this.chart, recommendedAsset.chart) &&
				Objects.equals(this.id, recommendedAsset.id) &&
				Objects.equals(this.logo, recommendedAsset.logo) &&
				Objects.equals(this.color, recommendedAsset.color) &&
				Objects.equals(this.title, recommendedAsset.title) &&
				Objects.equals(this.url, recommendedAsset.url) &&
				Objects.equals(this.assetType, recommendedAsset.assetType) &&
				Objects.equals(this.programDetails, recommendedAsset.programDetails);
	}

	@Override
	public int hashCode() {
		return Objects.hash(chart, id, logo, color, title, url, assetType, programDetails);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class RecommendedAsset {\n");

		sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    color: ").append(toIndentedString(color)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    url: ").append(toIndentedString(url)).append("\n");
		sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
		sb.append("    programDetails: ").append(toIndentedString(programDetails)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(chart);
		out.writeValue(id);
		out.writeValue(logo);
		out.writeValue(color);
		out.writeValue(title);
		out.writeValue(url);
		out.writeValue(assetType);
		out.writeValue(programDetails);
	}

	public int describeContents() {
		return 0;
	}
}
