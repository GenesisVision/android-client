/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * RecommendedAsset
 */


public class RecommendedAsset implements Parcelable
{
	public static final Parcelable.Creator<RecommendedAsset> CREATOR = new Parcelable.Creator<RecommendedAsset>()
	{
		public RecommendedAsset createFromParcel(Parcel in) {
			return new RecommendedAsset(in);
		}

		public RecommendedAsset[] newArray(int size) {
			return new RecommendedAsset[size];
		}
	};

	@SerializedName("currency")
	private CurrencyEnum currency = null;

	@SerializedName("statistic")
	private ProfitChart statistic = null;

	@SerializedName("leverage")
	private Integer leverage = null;

	@SerializedName("broker")
	private DashboardTradingAssetBrokerDetails broker = null;

	@SerializedName("isExternal")
	private Boolean isExternal = null;

	@SerializedName("hasSignalAccount")
	private Boolean hasSignalAccount = null;

	@SerializedName("id")
	private UUID id = null;

	@SerializedName("logo")
	private String logo = null;

	@SerializedName("color")
	private String color = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("url")
	private String url = null;

	@SerializedName("assetType")
	private AssetType assetType = null;

	@SerializedName("programDetails")
	private ProgramAssetDetails programDetails = null;

	public RecommendedAsset() {
	}

	RecommendedAsset(Parcel in) {
		currency = (CurrencyEnum) in.readValue(null);
		statistic = (ProfitChart) in.readValue(ProfitChart.class.getClassLoader());
		leverage = (Integer) in.readValue(null);
		broker = (DashboardTradingAssetBrokerDetails) in.readValue(DashboardTradingAssetBrokerDetails.class.getClassLoader());
		isExternal = (Boolean) in.readValue(null);
		hasSignalAccount = (Boolean) in.readValue(null);
		id = (UUID) in.readValue(UUID.class.getClassLoader());
		logo = (String) in.readValue(null);
		color = (String) in.readValue(null);
		title = (String) in.readValue(null);
		url = (String) in.readValue(null);
		assetType = (AssetType) in.readValue(AssetType.class.getClassLoader());
		programDetails = (ProgramAssetDetails) in.readValue(ProgramAssetDetails.class.getClassLoader());
	}

	public RecommendedAsset currency(CurrencyEnum currency) {
		this.currency = currency;
		return this;
	}

	/**
	 * Get currency
	 *
	 * @return currency
	 **/
	@Schema(description = "")
	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public RecommendedAsset statistic(ProfitChart statistic) {
		this.statistic = statistic;
		return this;
	}

	/**
	 * Get statistic
	 *
	 * @return statistic
	 **/
	@Schema(description = "")
	public ProfitChart getStatistic() {
		return statistic;
	}

	public void setStatistic(ProfitChart statistic) {
		this.statistic = statistic;
	}

	public RecommendedAsset leverage(Integer leverage) {
		this.leverage = leverage;
		return this;
	}

	/**
	 * Get leverage
	 *
	 * @return leverage
	 **/
	@Schema(description = "")
	public Integer getLeverage() {
		return leverage;
	}

	public void setLeverage(Integer leverage) {
		this.leverage = leverage;
	}

	public RecommendedAsset broker(DashboardTradingAssetBrokerDetails broker) {
		this.broker = broker;
		return this;
	}

	/**
	 * Get broker
	 *
	 * @return broker
	 **/
	@Schema(description = "")
	public DashboardTradingAssetBrokerDetails getBroker() {
		return broker;
	}

	public void setBroker(DashboardTradingAssetBrokerDetails broker) {
		this.broker = broker;
	}

	public RecommendedAsset isExternal(Boolean isExternal) {
		this.isExternal = isExternal;
		return this;
	}

	/**
	 * Get isExternal
	 *
	 * @return isExternal
	 **/
	@Schema(description = "")
	public Boolean isIsExternal() {
		return isExternal;
	}

	public void setIsExternal(Boolean isExternal) {
		this.isExternal = isExternal;
	}

	public RecommendedAsset hasSignalAccount(Boolean hasSignalAccount) {
		this.hasSignalAccount = hasSignalAccount;
		return this;
	}

	/**
	 * Get hasSignalAccount
	 *
	 * @return hasSignalAccount
	 **/
	@Schema(description = "")
	public Boolean isHasSignalAccount() {
		return hasSignalAccount;
	}

	public void setHasSignalAccount(Boolean hasSignalAccount) {
		this.hasSignalAccount = hasSignalAccount;
	}

	public RecommendedAsset id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@Schema(description = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public RecommendedAsset logo(String logo) {
		this.logo = logo;
		return this;
	}

	/**
	 * Get logo
	 *
	 * @return logo
	 **/
	@Schema(description = "")
	public String getLogo() {
		return logo;
	}

	public void setLogo(String logo) {
		this.logo = logo;
	}

	public RecommendedAsset color(String color) {
		this.color = color;
		return this;
	}

	/**
	 * Get color
	 *
	 * @return color
	 **/
	@Schema(description = "")
	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public RecommendedAsset title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@Schema(description = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public RecommendedAsset url(String url) {
		this.url = url;
		return this;
	}

	/**
	 * Get url
	 *
	 * @return url
	 **/
	@Schema(description = "")
	public String getUrl() {
		return url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public RecommendedAsset assetType(AssetType assetType) {
		this.assetType = assetType;
		return this;
	}

	/**
	 * Get assetType
	 *
	 * @return assetType
	 **/
	@Schema(description = "")
	public AssetType getAssetType() {
		return assetType;
	}

	public void setAssetType(AssetType assetType) {
		this.assetType = assetType;
	}

	public RecommendedAsset programDetails(ProgramAssetDetails programDetails) {
		this.programDetails = programDetails;
		return this;
	}

	/**
	 * Get programDetails
	 *
	 * @return programDetails
	 **/
	@Schema(description = "")
	public ProgramAssetDetails getProgramDetails() {
		return programDetails;
	}

	public void setProgramDetails(ProgramAssetDetails programDetails) {
		this.programDetails = programDetails;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		RecommendedAsset recommendedAsset = (RecommendedAsset) o;
		return Objects.equals(this.currency, recommendedAsset.currency) &&
				Objects.equals(this.statistic, recommendedAsset.statistic) &&
				Objects.equals(this.leverage, recommendedAsset.leverage) &&
				Objects.equals(this.broker, recommendedAsset.broker) &&
				Objects.equals(this.isExternal, recommendedAsset.isExternal) &&
				Objects.equals(this.hasSignalAccount, recommendedAsset.hasSignalAccount) &&
				Objects.equals(this.id, recommendedAsset.id) &&
				Objects.equals(this.logo, recommendedAsset.logo) &&
				Objects.equals(this.color, recommendedAsset.color) &&
				Objects.equals(this.title, recommendedAsset.title) &&
				Objects.equals(this.url, recommendedAsset.url) &&
				Objects.equals(this.assetType, recommendedAsset.assetType) &&
				Objects.equals(this.programDetails, recommendedAsset.programDetails);
	}

	@Override
	public int hashCode() {
		return Objects.hash(currency, statistic, leverage, broker, isExternal, hasSignalAccount, id, logo, color, title, url, assetType, programDetails);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class RecommendedAsset {\n");

		sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
		sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
		sb.append("    leverage: ").append(toIndentedString(leverage)).append("\n");
		sb.append("    broker: ").append(toIndentedString(broker)).append("\n");
		sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
		sb.append("    hasSignalAccount: ").append(toIndentedString(hasSignalAccount)).append("\n");
		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
		sb.append("    color: ").append(toIndentedString(color)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    url: ").append(toIndentedString(url)).append("\n");
		sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
		sb.append("    programDetails: ").append(toIndentedString(programDetails)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(currency);
		out.writeValue(statistic);
		out.writeValue(leverage);
		out.writeValue(broker);
		out.writeValue(isExternal);
		out.writeValue(hasSignalAccount);
		out.writeValue(id);
		out.writeValue(logo);
		out.writeValue(color);
		out.writeValue(title);
		out.writeValue(url);
		out.writeValue(assetType);
		out.writeValue(programDetails);
	}

	public int describeContents() {
		return 0;
	}

	/**
	 * Gets or Sets currency
	 */
	@JsonAdapter(CurrencyEnum.Adapter.class)
	public enum CurrencyEnum
	{
		USD("USD"),
		UNDEFINED("Undefined"),
		GVT("GVT"),
		ETH("ETH"),
		BTC("BTC"),
		ADA("ADA"),
		USDT("USDT"),
		XRP("XRP"),
		BCH("BCH"),
		LTC("LTC"),
		DOGE("DOGE"),
		BNB("BNB"),
		EUR("EUR");

		public static CurrencyEnum fromValue(String text) {
			for (CurrencyEnum b : CurrencyEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		CurrencyEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<CurrencyEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return CurrencyEnum.fromValue(String.valueOf(value));
			}
		}
	}
}
