/*
 * Tournament Core API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.Objects;
import java.util.UUID;

import io.swagger.annotations.ApiModelProperty;

/**
 * Tournament
 */

public class Tournament
{
	@SerializedName("id")
	private UUID id = null;

	@SerializedName("title")
	private String title = null;

	@SerializedName("description")
	private String description = null;

	@SerializedName("dateFrom")
	private DateTime dateFrom = null;

	@SerializedName("dateTo")
	private DateTime dateTo = null;

	@SerializedName("registerDateFrom")
	private DateTime registerDateFrom = null;

	@SerializedName("registerDateTo")
	private DateTime registerDateTo = null;

	@SerializedName("isEnabled")
	private Boolean isEnabled = null;

	@SerializedName("startDeposit")
	private Double startDeposit = null;

	public Tournament id(UUID id) {
		this.id = id;
		return this;
	}

	/**
	 * Get id
	 *
	 * @return id
	 **/
	@ApiModelProperty(value = "")
	public UUID getId() {
		return id;
	}

	public void setId(UUID id) {
		this.id = id;
	}

	public Tournament title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Get title
	 *
	 * @return title
	 **/
	@ApiModelProperty(value = "")
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public Tournament description(String description) {
		this.description = description;
		return this;
	}

	/**
	 * Get description
	 *
	 * @return description
	 **/
	@ApiModelProperty(value = "")
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Tournament dateFrom(DateTime dateFrom) {
		this.dateFrom = dateFrom;
		return this;
	}

	/**
	 * Get dateFrom
	 *
	 * @return dateFrom
	 **/
	@ApiModelProperty(value = "")
	public DateTime getDateFrom() {
		return dateFrom;
	}

	public void setDateFrom(DateTime dateFrom) {
		this.dateFrom = dateFrom;
	}

	public Tournament dateTo(DateTime dateTo) {
		this.dateTo = dateTo;
		return this;
	}

	/**
	 * Get dateTo
	 *
	 * @return dateTo
	 **/
	@ApiModelProperty(value = "")
	public DateTime getDateTo() {
		return dateTo;
	}

	public void setDateTo(DateTime dateTo) {
		this.dateTo = dateTo;
	}

	public Tournament registerDateFrom(DateTime registerDateFrom) {
		this.registerDateFrom = registerDateFrom;
		return this;
	}

	/**
	 * Get registerDateFrom
	 *
	 * @return registerDateFrom
	 **/
	@ApiModelProperty(value = "")
	public DateTime getRegisterDateFrom() {
		return registerDateFrom;
	}

	public void setRegisterDateFrom(DateTime registerDateFrom) {
		this.registerDateFrom = registerDateFrom;
	}

	public Tournament registerDateTo(DateTime registerDateTo) {
		this.registerDateTo = registerDateTo;
		return this;
	}

	/**
	 * Get registerDateTo
	 *
	 * @return registerDateTo
	 **/
	@ApiModelProperty(value = "")
	public DateTime getRegisterDateTo() {
		return registerDateTo;
	}

	public void setRegisterDateTo(DateTime registerDateTo) {
		this.registerDateTo = registerDateTo;
	}

	public Tournament isEnabled(Boolean isEnabled) {
		this.isEnabled = isEnabled;
		return this;
	}

	/**
	 * Get isEnabled
	 *
	 * @return isEnabled
	 **/
	@ApiModelProperty(value = "")
	public Boolean isIsEnabled() {
		return isEnabled;
	}

	public void setIsEnabled(Boolean isEnabled) {
		this.isEnabled = isEnabled;
	}

	public Tournament startDeposit(Double startDeposit) {
		this.startDeposit = startDeposit;
		return this;
	}

	/**
	 * Get startDeposit
	 *
	 * @return startDeposit
	 **/
	@ApiModelProperty(value = "")
	public Double getStartDeposit() {
		return startDeposit;
	}

	public void setStartDeposit(Double startDeposit) {
		this.startDeposit = startDeposit;
	}


	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Tournament tournament = (Tournament) o;
		return Objects.equals(this.id, tournament.id) &&
				Objects.equals(this.title, tournament.title) &&
				Objects.equals(this.description, tournament.description) &&
				Objects.equals(this.dateFrom, tournament.dateFrom) &&
				Objects.equals(this.dateTo, tournament.dateTo) &&
				Objects.equals(this.registerDateFrom, tournament.registerDateFrom) &&
				Objects.equals(this.registerDateTo, tournament.registerDateTo) &&
				Objects.equals(this.isEnabled, tournament.isEnabled) &&
				Objects.equals(this.startDeposit, tournament.startDeposit);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, title, description, dateFrom, dateTo, registerDateFrom, registerDateTo, isEnabled, startDeposit);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Tournament {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    description: ").append(toIndentedString(description)).append("\n");
		sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
		sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
		sb.append("    registerDateFrom: ").append(toIndentedString(registerDateFrom)).append("\n");
		sb.append("    registerDateTo: ").append(toIndentedString(registerDateTo)).append("\n");
		sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
		sb.append("    startDeposit: ").append(toIndentedString(startDeposit)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}

