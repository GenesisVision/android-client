/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import org.joda.time.DateTime;

import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * BinanceRawFuturesLiquidation
 */


public class BinanceRawFuturesLiquidation implements Parcelable
{
	public static final Parcelable.Creator<BinanceRawFuturesLiquidation> CREATOR = new Parcelable.Creator<BinanceRawFuturesLiquidation>()
	{
		public BinanceRawFuturesLiquidation createFromParcel(Parcel in) {
			return new BinanceRawFuturesLiquidation(in);
		}

		public BinanceRawFuturesLiquidation[] newArray(int size) {
			return new BinanceRawFuturesLiquidation[size];
		}
	};

	@SerializedName("symbol")
	private String symbol = null;

	@SerializedName("price")
	private Double price = null;

	@SerializedName("lastQuantityFilled")
	private Double lastQuantityFilled = null;

	@SerializedName("quantityFilled")
	private Double quantityFilled = null;

	@SerializedName("averagePrice")
	private Double averagePrice = null;

	@SerializedName("status")
	private BinanceOrderStatus status = null;

	@SerializedName("timeInForce")
	private BinanceTimeInForce timeInForce = null;

	@SerializedName("side")
	private BinanceOrderSide side = null;

	@SerializedName("type")
	private BinanceOrderType type = null;

	@SerializedName("time")
	private DateTime time = null;

	public BinanceRawFuturesLiquidation() {
	}

	BinanceRawFuturesLiquidation(Parcel in) {
		symbol = (String) in.readValue(null);
		price = (Double) in.readValue(null);
		lastQuantityFilled = (Double) in.readValue(null);
		quantityFilled = (Double) in.readValue(null);
		averagePrice = (Double) in.readValue(null);
		status = (BinanceOrderStatus) in.readValue(BinanceOrderStatus.class.getClassLoader());
		timeInForce = (BinanceTimeInForce) in.readValue(BinanceTimeInForce.class.getClassLoader());
		side = (BinanceOrderSide) in.readValue(BinanceOrderSide.class.getClassLoader());
		type = (BinanceOrderType) in.readValue(BinanceOrderType.class.getClassLoader());
		time = (DateTime) in.readValue(DateTime.class.getClassLoader());
	}

	public BinanceRawFuturesLiquidation symbol(String symbol) {
		this.symbol = symbol;
		return this;
	}

	/**
	 * Get symbol
	 *
	 * @return symbol
	 **/
	@Schema(description = "")
	public String getSymbol() {
		return symbol;
	}

	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}

	public BinanceRawFuturesLiquidation price(Double price) {
		this.price = price;
		return this;
	}

	/**
	 * Get price
	 *
	 * @return price
	 **/
	@Schema(description = "")
	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	public BinanceRawFuturesLiquidation lastQuantityFilled(Double lastQuantityFilled) {
		this.lastQuantityFilled = lastQuantityFilled;
		return this;
	}

	/**
	 * Get lastQuantityFilled
	 *
	 * @return lastQuantityFilled
	 **/
	@Schema(description = "")
	public Double getLastQuantityFilled() {
		return lastQuantityFilled;
	}

	public void setLastQuantityFilled(Double lastQuantityFilled) {
		this.lastQuantityFilled = lastQuantityFilled;
	}

	public BinanceRawFuturesLiquidation quantityFilled(Double quantityFilled) {
		this.quantityFilled = quantityFilled;
		return this;
	}

	/**
	 * Get quantityFilled
	 *
	 * @return quantityFilled
	 **/
	@Schema(description = "")
	public Double getQuantityFilled() {
		return quantityFilled;
	}

	public void setQuantityFilled(Double quantityFilled) {
		this.quantityFilled = quantityFilled;
	}

	public BinanceRawFuturesLiquidation averagePrice(Double averagePrice) {
		this.averagePrice = averagePrice;
		return this;
	}

	/**
	 * Get averagePrice
	 *
	 * @return averagePrice
	 **/
	@Schema(description = "")
	public Double getAveragePrice() {
		return averagePrice;
	}

	public void setAveragePrice(Double averagePrice) {
		this.averagePrice = averagePrice;
	}

	public BinanceRawFuturesLiquidation status(BinanceOrderStatus status) {
		this.status = status;
		return this;
	}

	/**
	 * Get status
	 *
	 * @return status
	 **/
	@Schema(description = "")
	public BinanceOrderStatus getStatus() {
		return status;
	}

	public void setStatus(BinanceOrderStatus status) {
		this.status = status;
	}

	public BinanceRawFuturesLiquidation timeInForce(BinanceTimeInForce timeInForce) {
		this.timeInForce = timeInForce;
		return this;
	}

	/**
	 * Get timeInForce
	 *
	 * @return timeInForce
	 **/
	@Schema(description = "")
	public BinanceTimeInForce getTimeInForce() {
		return timeInForce;
	}

	public void setTimeInForce(BinanceTimeInForce timeInForce) {
		this.timeInForce = timeInForce;
	}

	public BinanceRawFuturesLiquidation side(BinanceOrderSide side) {
		this.side = side;
		return this;
	}

	/**
	 * Get side
	 *
	 * @return side
	 **/
	@Schema(description = "")
	public BinanceOrderSide getSide() {
		return side;
	}

	public void setSide(BinanceOrderSide side) {
		this.side = side;
	}

	public BinanceRawFuturesLiquidation type(BinanceOrderType type) {
		this.type = type;
		return this;
	}

	/**
	 * Get type
	 *
	 * @return type
	 **/
	@Schema(description = "")
	public BinanceOrderType getType() {
		return type;
	}

	public void setType(BinanceOrderType type) {
		this.type = type;
	}

	public BinanceRawFuturesLiquidation time(DateTime time) {
		this.time = time;
		return this;
	}

	/**
	 * Get time
	 *
	 * @return time
	 **/
	@Schema(description = "")
	public DateTime getTime() {
		return time;
	}

	public void setTime(DateTime time) {
		this.time = time;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		BinanceRawFuturesLiquidation binanceRawFuturesLiquidation = (BinanceRawFuturesLiquidation) o;
		return Objects.equals(this.symbol, binanceRawFuturesLiquidation.symbol) &&
				Objects.equals(this.price, binanceRawFuturesLiquidation.price) &&
				Objects.equals(this.lastQuantityFilled, binanceRawFuturesLiquidation.lastQuantityFilled) &&
				Objects.equals(this.quantityFilled, binanceRawFuturesLiquidation.quantityFilled) &&
				Objects.equals(this.averagePrice, binanceRawFuturesLiquidation.averagePrice) &&
				Objects.equals(this.status, binanceRawFuturesLiquidation.status) &&
				Objects.equals(this.timeInForce, binanceRawFuturesLiquidation.timeInForce) &&
				Objects.equals(this.side, binanceRawFuturesLiquidation.side) &&
				Objects.equals(this.type, binanceRawFuturesLiquidation.type) &&
				Objects.equals(this.time, binanceRawFuturesLiquidation.time);
	}

	@Override
	public int hashCode() {
		return Objects.hash(symbol, price, lastQuantityFilled, quantityFilled, averagePrice, status, timeInForce, side, type, time);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class BinanceRawFuturesLiquidation {\n");

		sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
		sb.append("    price: ").append(toIndentedString(price)).append("\n");
		sb.append("    lastQuantityFilled: ").append(toIndentedString(lastQuantityFilled)).append("\n");
		sb.append("    quantityFilled: ").append(toIndentedString(quantityFilled)).append("\n");
		sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
		sb.append("    side: ").append(toIndentedString(side)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("    time: ").append(toIndentedString(time)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(symbol);
		out.writeValue(price);
		out.writeValue(lastQuantityFilled);
		out.writeValue(quantityFilled);
		out.writeValue(averagePrice);
		out.writeValue(status);
		out.writeValue(timeInForce);
		out.writeValue(side);
		out.writeValue(type);
		out.writeValue(time);
	}

	public int describeContents() {
		return 0;
	}
}
