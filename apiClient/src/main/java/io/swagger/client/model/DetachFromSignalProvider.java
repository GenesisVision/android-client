/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Objects;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DetachFromSignalProvider
 */


public class DetachFromSignalProvider implements Parcelable
{
	public static final Parcelable.Creator<DetachFromSignalProvider> CREATOR = new Parcelable.Creator<DetachFromSignalProvider>()
	{
		public DetachFromSignalProvider createFromParcel(Parcel in) {
			return new DetachFromSignalProvider(in);
		}

		public DetachFromSignalProvider[] newArray(int size) {
			return new DetachFromSignalProvider[size];
		}
	};

	@SerializedName("mode")
	private ModeEnum mode = null;

	public DetachFromSignalProvider() {
	}

	DetachFromSignalProvider(Parcel in) {
		mode = (ModeEnum) in.readValue(null);
	}

	public DetachFromSignalProvider mode(ModeEnum mode) {
		this.mode = mode;
		return this;
	}

	/**
	 * Get mode
	 *
	 * @return mode
	 **/
	@Schema(description = "")
	public ModeEnum getMode() {
		return mode;
	}

	public void setMode(ModeEnum mode) {
		this.mode = mode;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		DetachFromSignalProvider detachFromSignalProvider = (DetachFromSignalProvider) o;
		return Objects.equals(this.mode, detachFromSignalProvider.mode);
	}

	@Override
	public int hashCode() {
		return Objects.hash(mode);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class DetachFromSignalProvider {\n");

		sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(mode);
	}

	public int describeContents() {
		return 0;
	}

	/**
	 * Gets or Sets mode
	 */
	@JsonAdapter(ModeEnum.Adapter.class)
	public enum ModeEnum
	{
		NONE("None"),
		PROVIDERCLOSEONLY("ProviderCloseOnly"),
		CLOSEALLIMMEDIATELY("CloseAllImmediately");

		public static ModeEnum fromValue(String text) {
			for (ModeEnum b : ModeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		private String value;

		ModeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<ModeEnum>
		{
			@Override
			public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ModeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ModeEnum.fromValue(String.valueOf(value));
			}
		}
	}
}
