/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;
import java.util.UUID;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * DetachFromSignalProvider
 */


public class DetachFromSignalProvider implements Parcelable
{
	public static final Parcelable.Creator<DetachFromSignalProvider> CREATOR = new Parcelable.Creator<DetachFromSignalProvider>()
	{
		public DetachFromSignalProvider createFromParcel(Parcel in) {
			return new DetachFromSignalProvider(in);
		}

		public DetachFromSignalProvider[] newArray(int size) {
			return new DetachFromSignalProvider[size];
		}
	};

	@SerializedName("tradingAccountId")
	private UUID tradingAccountId = null;

	@SerializedName("mode")
	private SignalDetachMode mode = null;

	public DetachFromSignalProvider() {
	}

	DetachFromSignalProvider(Parcel in) {
		tradingAccountId = (UUID) in.readValue(UUID.class.getClassLoader());
		mode = (SignalDetachMode) in.readValue(SignalDetachMode.class.getClassLoader());
	}

	public DetachFromSignalProvider tradingAccountId(UUID tradingAccountId) {
		this.tradingAccountId = tradingAccountId;
		return this;
	}

	/**
	 * Get tradingAccountId
	 *
	 * @return tradingAccountId
	 **/
	@Schema(description = "")
	public UUID getTradingAccountId() {
		return tradingAccountId;
	}

	public void setTradingAccountId(UUID tradingAccountId) {
		this.tradingAccountId = tradingAccountId;
	}

	public DetachFromSignalProvider mode(SignalDetachMode mode) {
		this.mode = mode;
		return this;
	}

	/**
	 * Get mode
	 *
	 * @return mode
	 **/
	@Schema(description = "")
	public SignalDetachMode getMode() {
		return mode;
	}

	public void setMode(SignalDetachMode mode) {
		this.mode = mode;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		DetachFromSignalProvider detachFromSignalProvider = (DetachFromSignalProvider) o;
		return Objects.equals(this.tradingAccountId, detachFromSignalProvider.tradingAccountId) &&
				Objects.equals(this.mode, detachFromSignalProvider.mode);
	}

	@Override
	public int hashCode() {
		return Objects.hash(tradingAccountId, mode);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class DetachFromSignalProvider {\n");

		sb.append("    tradingAccountId: ").append(toIndentedString(tradingAccountId)).append("\n");
		sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public void writeToParcel(Parcel out, int flags) {
		out.writeValue(tradingAccountId);
		out.writeValue(mode);
	}

	public int describeContents() {
		return 0;
	}
}
