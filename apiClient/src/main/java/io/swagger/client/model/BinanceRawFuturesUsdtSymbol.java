/*
 * Core API v2.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BinanceContractType;
import io.swagger.client.model.BinanceOrderType;
import io.swagger.client.model.BinanceRawFuturesSymbolLotSizeFilter;
import io.swagger.client.model.BinanceRawFuturesSymbolMarketLotSizeFilter;
import io.swagger.client.model.BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter;
import io.swagger.client.model.BinanceRawFuturesSymbolMaxOrdersFilter;
import io.swagger.client.model.BinanceRawFuturesSymbolPercentPriceFilter;
import io.swagger.client.model.BinanceRawFuturesSymbolPriceFilter;
import io.swagger.client.model.BinanceSymbolStatus;
import io.swagger.client.model.BinanceTimeInForce;
import io.swagger.client.model.BinanceUnderlyingType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * BinanceRawFuturesUsdtSymbol
 */


public class BinanceRawFuturesUsdtSymbol implements Parcelable {
  @SerializedName("name")
  private String name = null;

  @SerializedName("pair")
  private String pair = null;

  @SerializedName("contractType")
  private BinanceContractType contractType = null;

  @SerializedName("maintenanceMarginPercent")
  private Double maintenanceMarginPercent = null;

  @SerializedName("pricePrecision")
  private Integer pricePrecision = null;

  @SerializedName("quantityPrecision")
  private Integer quantityPrecision = null;

  @SerializedName("requiredMarginPercent")
  private Double requiredMarginPercent = null;

  @SerializedName("settlePlan")
  private Double settlePlan = null;

  @SerializedName("maintMarginPercent")
  private Double maintMarginPercent = null;

  @SerializedName("triggerProtect")
  private Double triggerProtect = null;

  @SerializedName("baseAsset")
  private String baseAsset = null;

  @SerializedName("marginAsset")
  private String marginAsset = null;

  @SerializedName("quoteAsset")
  private String quoteAsset = null;

  @SerializedName("baseAssetPrecision")
  private Integer baseAssetPrecision = null;

  @SerializedName("quoteAssetPrecision")
  private Integer quoteAssetPrecision = null;

  @SerializedName("status")
  private BinanceSymbolStatus status = null;

  @SerializedName("underlyingType")
  private BinanceUnderlyingType underlyingType = null;

  @SerializedName("deliveryDate")
  private DateTime deliveryDate = null;

  @SerializedName("listingDate")
  private DateTime listingDate = null;

  @SerializedName("orderTypes")
  private List<BinanceOrderType> orderTypes = null;

  @SerializedName("timeInForce")
  private List<BinanceTimeInForce> timeInForce = null;

  @SerializedName("priceFilter")
  private BinanceRawFuturesSymbolPriceFilter priceFilter = null;

  @SerializedName("lotSizeFilter")
  private BinanceRawFuturesSymbolLotSizeFilter lotSizeFilter = null;

  @SerializedName("marketLotSizeFilter")
  private BinanceRawFuturesSymbolMarketLotSizeFilter marketLotSizeFilter = null;

  @SerializedName("maxOrdersFilter")
  private BinanceRawFuturesSymbolMaxOrdersFilter maxOrdersFilter = null;

  @SerializedName("maxAlgoOrdersFilter")
  private BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter maxAlgoOrdersFilter = null;

  @SerializedName("pricePercentFilter")
  private BinanceRawFuturesSymbolPercentPriceFilter pricePercentFilter = null;

  public BinanceRawFuturesUsdtSymbol() {
  }
  public BinanceRawFuturesUsdtSymbol name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BinanceRawFuturesUsdtSymbol pair(String pair) {
    this.pair = pair;
    return this;
  }

   /**
   * Get pair
   * @return pair
  **/
  @Schema(description = "")
  public String getPair() {
    return pair;
  }

  public void setPair(String pair) {
    this.pair = pair;
  }

  public BinanceRawFuturesUsdtSymbol contractType(BinanceContractType contractType) {
    this.contractType = contractType;
    return this;
  }

   /**
   * Get contractType
   * @return contractType
  **/
  @Schema(description = "")
  public BinanceContractType getContractType() {
    return contractType;
  }

  public void setContractType(BinanceContractType contractType) {
    this.contractType = contractType;
  }

  public BinanceRawFuturesUsdtSymbol maintenanceMarginPercent(Double maintenanceMarginPercent) {
    this.maintenanceMarginPercent = maintenanceMarginPercent;
    return this;
  }

   /**
   * Get maintenanceMarginPercent
   * @return maintenanceMarginPercent
  **/
  @Schema(description = "")
  public Double getMaintenanceMarginPercent() {
    return maintenanceMarginPercent;
  }

  public void setMaintenanceMarginPercent(Double maintenanceMarginPercent) {
    this.maintenanceMarginPercent = maintenanceMarginPercent;
  }

  public BinanceRawFuturesUsdtSymbol pricePrecision(Integer pricePrecision) {
    this.pricePrecision = pricePrecision;
    return this;
  }

   /**
   * Get pricePrecision
   * @return pricePrecision
  **/
  @Schema(description = "")
  public Integer getPricePrecision() {
    return pricePrecision;
  }

  public void setPricePrecision(Integer pricePrecision) {
    this.pricePrecision = pricePrecision;
  }

  public BinanceRawFuturesUsdtSymbol quantityPrecision(Integer quantityPrecision) {
    this.quantityPrecision = quantityPrecision;
    return this;
  }

   /**
   * Get quantityPrecision
   * @return quantityPrecision
  **/
  @Schema(description = "")
  public Integer getQuantityPrecision() {
    return quantityPrecision;
  }

  public void setQuantityPrecision(Integer quantityPrecision) {
    this.quantityPrecision = quantityPrecision;
  }

  public BinanceRawFuturesUsdtSymbol requiredMarginPercent(Double requiredMarginPercent) {
    this.requiredMarginPercent = requiredMarginPercent;
    return this;
  }

   /**
   * Get requiredMarginPercent
   * @return requiredMarginPercent
  **/
  @Schema(description = "")
  public Double getRequiredMarginPercent() {
    return requiredMarginPercent;
  }

  public void setRequiredMarginPercent(Double requiredMarginPercent) {
    this.requiredMarginPercent = requiredMarginPercent;
  }

  public BinanceRawFuturesUsdtSymbol settlePlan(Double settlePlan) {
    this.settlePlan = settlePlan;
    return this;
  }

   /**
   * Get settlePlan
   * @return settlePlan
  **/
  @Schema(description = "")
  public Double getSettlePlan() {
    return settlePlan;
  }

  public void setSettlePlan(Double settlePlan) {
    this.settlePlan = settlePlan;
  }

  public BinanceRawFuturesUsdtSymbol maintMarginPercent(Double maintMarginPercent) {
    this.maintMarginPercent = maintMarginPercent;
    return this;
  }

   /**
   * Get maintMarginPercent
   * @return maintMarginPercent
  **/
  @Schema(description = "")
  public Double getMaintMarginPercent() {
    return maintMarginPercent;
  }

  public void setMaintMarginPercent(Double maintMarginPercent) {
    this.maintMarginPercent = maintMarginPercent;
  }

  public BinanceRawFuturesUsdtSymbol triggerProtect(Double triggerProtect) {
    this.triggerProtect = triggerProtect;
    return this;
  }

   /**
   * Get triggerProtect
   * @return triggerProtect
  **/
  @Schema(description = "")
  public Double getTriggerProtect() {
    return triggerProtect;
  }

  public void setTriggerProtect(Double triggerProtect) {
    this.triggerProtect = triggerProtect;
  }

  public BinanceRawFuturesUsdtSymbol baseAsset(String baseAsset) {
    this.baseAsset = baseAsset;
    return this;
  }

   /**
   * Get baseAsset
   * @return baseAsset
  **/
  @Schema(description = "")
  public String getBaseAsset() {
    return baseAsset;
  }

  public void setBaseAsset(String baseAsset) {
    this.baseAsset = baseAsset;
  }

  public BinanceRawFuturesUsdtSymbol marginAsset(String marginAsset) {
    this.marginAsset = marginAsset;
    return this;
  }

   /**
   * Get marginAsset
   * @return marginAsset
  **/
  @Schema(description = "")
  public String getMarginAsset() {
    return marginAsset;
  }

  public void setMarginAsset(String marginAsset) {
    this.marginAsset = marginAsset;
  }

  public BinanceRawFuturesUsdtSymbol quoteAsset(String quoteAsset) {
    this.quoteAsset = quoteAsset;
    return this;
  }

   /**
   * Get quoteAsset
   * @return quoteAsset
  **/
  @Schema(description = "")
  public String getQuoteAsset() {
    return quoteAsset;
  }

  public void setQuoteAsset(String quoteAsset) {
    this.quoteAsset = quoteAsset;
  }

  public BinanceRawFuturesUsdtSymbol baseAssetPrecision(Integer baseAssetPrecision) {
    this.baseAssetPrecision = baseAssetPrecision;
    return this;
  }

   /**
   * Get baseAssetPrecision
   * @return baseAssetPrecision
  **/
  @Schema(description = "")
  public Integer getBaseAssetPrecision() {
    return baseAssetPrecision;
  }

  public void setBaseAssetPrecision(Integer baseAssetPrecision) {
    this.baseAssetPrecision = baseAssetPrecision;
  }

  public BinanceRawFuturesUsdtSymbol quoteAssetPrecision(Integer quoteAssetPrecision) {
    this.quoteAssetPrecision = quoteAssetPrecision;
    return this;
  }

   /**
   * Get quoteAssetPrecision
   * @return quoteAssetPrecision
  **/
  @Schema(description = "")
  public Integer getQuoteAssetPrecision() {
    return quoteAssetPrecision;
  }

  public void setQuoteAssetPrecision(Integer quoteAssetPrecision) {
    this.quoteAssetPrecision = quoteAssetPrecision;
  }

  public BinanceRawFuturesUsdtSymbol status(BinanceSymbolStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public BinanceSymbolStatus getStatus() {
    return status;
  }

  public void setStatus(BinanceSymbolStatus status) {
    this.status = status;
  }

  public BinanceRawFuturesUsdtSymbol underlyingType(BinanceUnderlyingType underlyingType) {
    this.underlyingType = underlyingType;
    return this;
  }

   /**
   * Get underlyingType
   * @return underlyingType
  **/
  @Schema(description = "")
  public BinanceUnderlyingType getUnderlyingType() {
    return underlyingType;
  }

  public void setUnderlyingType(BinanceUnderlyingType underlyingType) {
    this.underlyingType = underlyingType;
  }

  public BinanceRawFuturesUsdtSymbol deliveryDate(DateTime deliveryDate) {
    this.deliveryDate = deliveryDate;
    return this;
  }

   /**
   * Get deliveryDate
   * @return deliveryDate
  **/
  @Schema(description = "")
  public DateTime getDeliveryDate() {
    return deliveryDate;
  }

  public void setDeliveryDate(DateTime deliveryDate) {
    this.deliveryDate = deliveryDate;
  }

  public BinanceRawFuturesUsdtSymbol listingDate(DateTime listingDate) {
    this.listingDate = listingDate;
    return this;
  }

   /**
   * Get listingDate
   * @return listingDate
  **/
  @Schema(description = "")
  public DateTime getListingDate() {
    return listingDate;
  }

  public void setListingDate(DateTime listingDate) {
    this.listingDate = listingDate;
  }

  public BinanceRawFuturesUsdtSymbol orderTypes(List<BinanceOrderType> orderTypes) {
    this.orderTypes = orderTypes;
    return this;
  }

  public BinanceRawFuturesUsdtSymbol addOrderTypesItem(BinanceOrderType orderTypesItem) {
    if (this.orderTypes == null) {
      this.orderTypes = new ArrayList<BinanceOrderType>();
    }
    this.orderTypes.add(orderTypesItem);
    return this;
  }

   /**
   * Get orderTypes
   * @return orderTypes
  **/
  @Schema(description = "")
  public List<BinanceOrderType> getOrderTypes() {
    return orderTypes;
  }

  public void setOrderTypes(List<BinanceOrderType> orderTypes) {
    this.orderTypes = orderTypes;
  }

  public BinanceRawFuturesUsdtSymbol timeInForce(List<BinanceTimeInForce> timeInForce) {
    this.timeInForce = timeInForce;
    return this;
  }

  public BinanceRawFuturesUsdtSymbol addTimeInForceItem(BinanceTimeInForce timeInForceItem) {
    if (this.timeInForce == null) {
      this.timeInForce = new ArrayList<BinanceTimeInForce>();
    }
    this.timeInForce.add(timeInForceItem);
    return this;
  }

   /**
   * Get timeInForce
   * @return timeInForce
  **/
  @Schema(description = "")
  public List<BinanceTimeInForce> getTimeInForce() {
    return timeInForce;
  }

  public void setTimeInForce(List<BinanceTimeInForce> timeInForce) {
    this.timeInForce = timeInForce;
  }

  public BinanceRawFuturesUsdtSymbol priceFilter(BinanceRawFuturesSymbolPriceFilter priceFilter) {
    this.priceFilter = priceFilter;
    return this;
  }

   /**
   * Get priceFilter
   * @return priceFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolPriceFilter getPriceFilter() {
    return priceFilter;
  }

  public void setPriceFilter(BinanceRawFuturesSymbolPriceFilter priceFilter) {
    this.priceFilter = priceFilter;
  }

  public BinanceRawFuturesUsdtSymbol lotSizeFilter(BinanceRawFuturesSymbolLotSizeFilter lotSizeFilter) {
    this.lotSizeFilter = lotSizeFilter;
    return this;
  }

   /**
   * Get lotSizeFilter
   * @return lotSizeFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolLotSizeFilter getLotSizeFilter() {
    return lotSizeFilter;
  }

  public void setLotSizeFilter(BinanceRawFuturesSymbolLotSizeFilter lotSizeFilter) {
    this.lotSizeFilter = lotSizeFilter;
  }

  public BinanceRawFuturesUsdtSymbol marketLotSizeFilter(BinanceRawFuturesSymbolMarketLotSizeFilter marketLotSizeFilter) {
    this.marketLotSizeFilter = marketLotSizeFilter;
    return this;
  }

   /**
   * Get marketLotSizeFilter
   * @return marketLotSizeFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolMarketLotSizeFilter getMarketLotSizeFilter() {
    return marketLotSizeFilter;
  }

  public void setMarketLotSizeFilter(BinanceRawFuturesSymbolMarketLotSizeFilter marketLotSizeFilter) {
    this.marketLotSizeFilter = marketLotSizeFilter;
  }

  public BinanceRawFuturesUsdtSymbol maxOrdersFilter(BinanceRawFuturesSymbolMaxOrdersFilter maxOrdersFilter) {
    this.maxOrdersFilter = maxOrdersFilter;
    return this;
  }

   /**
   * Get maxOrdersFilter
   * @return maxOrdersFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolMaxOrdersFilter getMaxOrdersFilter() {
    return maxOrdersFilter;
  }

  public void setMaxOrdersFilter(BinanceRawFuturesSymbolMaxOrdersFilter maxOrdersFilter) {
    this.maxOrdersFilter = maxOrdersFilter;
  }

  public BinanceRawFuturesUsdtSymbol maxAlgoOrdersFilter(BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter maxAlgoOrdersFilter) {
    this.maxAlgoOrdersFilter = maxAlgoOrdersFilter;
    return this;
  }

   /**
   * Get maxAlgoOrdersFilter
   * @return maxAlgoOrdersFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter getMaxAlgoOrdersFilter() {
    return maxAlgoOrdersFilter;
  }

  public void setMaxAlgoOrdersFilter(BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter maxAlgoOrdersFilter) {
    this.maxAlgoOrdersFilter = maxAlgoOrdersFilter;
  }

  public BinanceRawFuturesUsdtSymbol pricePercentFilter(BinanceRawFuturesSymbolPercentPriceFilter pricePercentFilter) {
    this.pricePercentFilter = pricePercentFilter;
    return this;
  }

   /**
   * Get pricePercentFilter
   * @return pricePercentFilter
  **/
  @Schema(description = "")
  public BinanceRawFuturesSymbolPercentPriceFilter getPricePercentFilter() {
    return pricePercentFilter;
  }

  public void setPricePercentFilter(BinanceRawFuturesSymbolPercentPriceFilter pricePercentFilter) {
    this.pricePercentFilter = pricePercentFilter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BinanceRawFuturesUsdtSymbol binanceRawFuturesUsdtSymbol = (BinanceRawFuturesUsdtSymbol) o;
    return Objects.equals(this.name, binanceRawFuturesUsdtSymbol.name) &&
        Objects.equals(this.pair, binanceRawFuturesUsdtSymbol.pair) &&
        Objects.equals(this.contractType, binanceRawFuturesUsdtSymbol.contractType) &&
        Objects.equals(this.maintenanceMarginPercent, binanceRawFuturesUsdtSymbol.maintenanceMarginPercent) &&
        Objects.equals(this.pricePrecision, binanceRawFuturesUsdtSymbol.pricePrecision) &&
        Objects.equals(this.quantityPrecision, binanceRawFuturesUsdtSymbol.quantityPrecision) &&
        Objects.equals(this.requiredMarginPercent, binanceRawFuturesUsdtSymbol.requiredMarginPercent) &&
        Objects.equals(this.settlePlan, binanceRawFuturesUsdtSymbol.settlePlan) &&
        Objects.equals(this.maintMarginPercent, binanceRawFuturesUsdtSymbol.maintMarginPercent) &&
        Objects.equals(this.triggerProtect, binanceRawFuturesUsdtSymbol.triggerProtect) &&
        Objects.equals(this.baseAsset, binanceRawFuturesUsdtSymbol.baseAsset) &&
        Objects.equals(this.marginAsset, binanceRawFuturesUsdtSymbol.marginAsset) &&
        Objects.equals(this.quoteAsset, binanceRawFuturesUsdtSymbol.quoteAsset) &&
        Objects.equals(this.baseAssetPrecision, binanceRawFuturesUsdtSymbol.baseAssetPrecision) &&
        Objects.equals(this.quoteAssetPrecision, binanceRawFuturesUsdtSymbol.quoteAssetPrecision) &&
        Objects.equals(this.status, binanceRawFuturesUsdtSymbol.status) &&
        Objects.equals(this.underlyingType, binanceRawFuturesUsdtSymbol.underlyingType) &&
        Objects.equals(this.deliveryDate, binanceRawFuturesUsdtSymbol.deliveryDate) &&
        Objects.equals(this.listingDate, binanceRawFuturesUsdtSymbol.listingDate) &&
        Objects.equals(this.orderTypes, binanceRawFuturesUsdtSymbol.orderTypes) &&
        Objects.equals(this.timeInForce, binanceRawFuturesUsdtSymbol.timeInForce) &&
        Objects.equals(this.priceFilter, binanceRawFuturesUsdtSymbol.priceFilter) &&
        Objects.equals(this.lotSizeFilter, binanceRawFuturesUsdtSymbol.lotSizeFilter) &&
        Objects.equals(this.marketLotSizeFilter, binanceRawFuturesUsdtSymbol.marketLotSizeFilter) &&
        Objects.equals(this.maxOrdersFilter, binanceRawFuturesUsdtSymbol.maxOrdersFilter) &&
        Objects.equals(this.maxAlgoOrdersFilter, binanceRawFuturesUsdtSymbol.maxAlgoOrdersFilter) &&
        Objects.equals(this.pricePercentFilter, binanceRawFuturesUsdtSymbol.pricePercentFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pair, contractType, maintenanceMarginPercent, pricePrecision, quantityPrecision, requiredMarginPercent, settlePlan, maintMarginPercent, triggerProtect, baseAsset, marginAsset, quoteAsset, baseAssetPrecision, quoteAssetPrecision, status, underlyingType, deliveryDate, listingDate, orderTypes, timeInForce, priceFilter, lotSizeFilter, marketLotSizeFilter, maxOrdersFilter, maxAlgoOrdersFilter, pricePercentFilter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BinanceRawFuturesUsdtSymbol {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pair: ").append(toIndentedString(pair)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    maintenanceMarginPercent: ").append(toIndentedString(maintenanceMarginPercent)).append("\n");
    sb.append("    pricePrecision: ").append(toIndentedString(pricePrecision)).append("\n");
    sb.append("    quantityPrecision: ").append(toIndentedString(quantityPrecision)).append("\n");
    sb.append("    requiredMarginPercent: ").append(toIndentedString(requiredMarginPercent)).append("\n");
    sb.append("    settlePlan: ").append(toIndentedString(settlePlan)).append("\n");
    sb.append("    maintMarginPercent: ").append(toIndentedString(maintMarginPercent)).append("\n");
    sb.append("    triggerProtect: ").append(toIndentedString(triggerProtect)).append("\n");
    sb.append("    baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
    sb.append("    marginAsset: ").append(toIndentedString(marginAsset)).append("\n");
    sb.append("    quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
    sb.append("    baseAssetPrecision: ").append(toIndentedString(baseAssetPrecision)).append("\n");
    sb.append("    quoteAssetPrecision: ").append(toIndentedString(quoteAssetPrecision)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    underlyingType: ").append(toIndentedString(underlyingType)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    listingDate: ").append(toIndentedString(listingDate)).append("\n");
    sb.append("    orderTypes: ").append(toIndentedString(orderTypes)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    priceFilter: ").append(toIndentedString(priceFilter)).append("\n");
    sb.append("    lotSizeFilter: ").append(toIndentedString(lotSizeFilter)).append("\n");
    sb.append("    marketLotSizeFilter: ").append(toIndentedString(marketLotSizeFilter)).append("\n");
    sb.append("    maxOrdersFilter: ").append(toIndentedString(maxOrdersFilter)).append("\n");
    sb.append("    maxAlgoOrdersFilter: ").append(toIndentedString(maxAlgoOrdersFilter)).append("\n");
    sb.append("    pricePercentFilter: ").append(toIndentedString(pricePercentFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(name);
    out.writeValue(pair);
    out.writeValue(contractType);
    out.writeValue(maintenanceMarginPercent);
    out.writeValue(pricePrecision);
    out.writeValue(quantityPrecision);
    out.writeValue(requiredMarginPercent);
    out.writeValue(settlePlan);
    out.writeValue(maintMarginPercent);
    out.writeValue(triggerProtect);
    out.writeValue(baseAsset);
    out.writeValue(marginAsset);
    out.writeValue(quoteAsset);
    out.writeValue(baseAssetPrecision);
    out.writeValue(quoteAssetPrecision);
    out.writeValue(status);
    out.writeValue(underlyingType);
    out.writeValue(deliveryDate);
    out.writeValue(listingDate);
    out.writeValue(orderTypes);
    out.writeValue(timeInForce);
    out.writeValue(priceFilter);
    out.writeValue(lotSizeFilter);
    out.writeValue(marketLotSizeFilter);
    out.writeValue(maxOrdersFilter);
    out.writeValue(maxAlgoOrdersFilter);
    out.writeValue(pricePercentFilter);
  }

  BinanceRawFuturesUsdtSymbol(Parcel in) {
    name = (String)in.readValue(null);
    pair = (String)in.readValue(null);
    contractType = (BinanceContractType)in.readValue(BinanceContractType.class.getClassLoader());
    maintenanceMarginPercent = (Double)in.readValue(null);
    pricePrecision = (Integer)in.readValue(null);
    quantityPrecision = (Integer)in.readValue(null);
    requiredMarginPercent = (Double)in.readValue(null);
    settlePlan = (Double)in.readValue(null);
    maintMarginPercent = (Double)in.readValue(null);
    triggerProtect = (Double)in.readValue(null);
    baseAsset = (String)in.readValue(null);
    marginAsset = (String)in.readValue(null);
    quoteAsset = (String)in.readValue(null);
    baseAssetPrecision = (Integer)in.readValue(null);
    quoteAssetPrecision = (Integer)in.readValue(null);
    status = (BinanceSymbolStatus)in.readValue(BinanceSymbolStatus.class.getClassLoader());
    underlyingType = (BinanceUnderlyingType)in.readValue(BinanceUnderlyingType.class.getClassLoader());
    deliveryDate = (DateTime)in.readValue(DateTime.class.getClassLoader());
    listingDate = (DateTime)in.readValue(DateTime.class.getClassLoader());
    orderTypes = (List<BinanceOrderType>)in.readValue(BinanceOrderType.class.getClassLoader());
    timeInForce = (List<BinanceTimeInForce>)in.readValue(BinanceTimeInForce.class.getClassLoader());
    priceFilter = (BinanceRawFuturesSymbolPriceFilter)in.readValue(BinanceRawFuturesSymbolPriceFilter.class.getClassLoader());
    lotSizeFilter = (BinanceRawFuturesSymbolLotSizeFilter)in.readValue(BinanceRawFuturesSymbolLotSizeFilter.class.getClassLoader());
    marketLotSizeFilter = (BinanceRawFuturesSymbolMarketLotSizeFilter)in.readValue(BinanceRawFuturesSymbolMarketLotSizeFilter.class.getClassLoader());
    maxOrdersFilter = (BinanceRawFuturesSymbolMaxOrdersFilter)in.readValue(BinanceRawFuturesSymbolMaxOrdersFilter.class.getClassLoader());
    maxAlgoOrdersFilter = (BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter)in.readValue(BinanceRawFuturesSymbolMaxAlgorithmicOrdersFilter.class.getClassLoader());
    pricePercentFilter = (BinanceRawFuturesSymbolPercentPriceFilter)in.readValue(BinanceRawFuturesSymbolPercentPriceFilter.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<BinanceRawFuturesUsdtSymbol> CREATOR = new Parcelable.Creator<BinanceRawFuturesUsdtSymbol>() {
    public BinanceRawFuturesUsdtSymbol createFromParcel(Parcel in) {
      return new BinanceRawFuturesUsdtSymbol(in);
    }
    public BinanceRawFuturesUsdtSymbol[] newArray(int size) {
      return new BinanceRawFuturesUsdtSymbol[size];
    }
  };
}
